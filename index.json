[{"content":"The game industry is a challenging and complex field, and having the right mindset is crucial for survival and success. It\u0026rsquo;s important to have clear goals and start by giving our maximum effort, even if it seems small.\nHere are some key mindsets to cultivate in order to thrive in the game industry:\nTechnical skills are not enough While technical skills are important, they alone are not sufficient to make a living or build a career in the game industry. It requires a multidisciplinary approach and a combination of technical, artistic, and business skills.\nEmbrace a growth mindset The game industry is constantly evolving, and challenges such as failure and uncertainty are inevitable. Embracing a growth mindset means seeing failures as opportunities for learning and improvement. It\u0026rsquo;s about being open to new ideas, continuously acquiring knowledge, and adapting to change.\nFail fast, learn fast In the game industry, experiences are valuable assets. It\u0026rsquo;s important to iterate quickly and learn from failures. The more experience we gain, the better the quality of our work becomes.\nIdealism Balance idealism with practicality While it\u0026rsquo;s essential to have a vision and ideals, it\u0026rsquo;s equally important to consider the practical aspects of the business and the sustainability of the team. Being too idealistic without considering the business aspects can undermine what we build.\nDream with open eyes If the context is to make a living from games, it\u0026rsquo;s essential to be open to various opportunities and aspects beyond our idealism. Having a realistic view and being open to diverse possibilities can help us navigate the industry more effectively.\nClear goals Moving beyond personal projects Many people create games solely to express their personal desires and ideas, which is not wrong but may not be sufficient for survival in the industry. It\u0026rsquo;s important to expand our knowledge and skills to create games that resonate with the market and meet the demands of players.\nSet clear milestones Defining detailed and specific milestones is crucial for achieving our goals. It helps us understand the desired outcomes, allocate time effectively, and determine the necessary actions to reach those milestones. Lack of discipline and setting wrong priorities can be obstacles to achieving these milestones.\nThe biggest challenges in building a game business Financial costs Financial constraints are often a significant challenge when starting or growing a game business. It\u0026rsquo;s essential to carefully manage costs and explore creative ways to secure funding.\nHuman resources Building a skilled and dedicated team is crucial for producing high-quality games. Hiring and retaining talented individuals who share the same passion and vision can be a challenge but is essential for long-term success.\nTime management Efficient project management and timely delivery of games are crucial for the sustainability of a game business. Effectively managing time and resources, setting realistic deadlines, and prioritizing tasks are essential skills to cultivate.\nUnderstanding our capabilities Recognize our capabilities Knowing our limitations in terms of resources, market research, and available opportunities is key to developing successful game products or services. It\u0026rsquo;s important to have a clear understanding of what we can achieve with the resources at hand and make the most of them.\nGame business parallels other industries While the game industry has its unique characteristics, building a game business shares many similarities with other industries. Understanding common business principles and adapting them to the game industry context can be beneficial.\nAlternate revenue streams Diversify income sources Not all games have the opportunity to achieve massive success in the market. However, a career in the game industry doesn\u0026rsquo;t necessarily require creating a blockbuster IP. There are alternative ways to generate income and sustain a game business, such as selling games to new owners, developing games for clients, or selling game assets.\nKey takeaways Embrace failure as a learning opportunity In the game industry, failure is not the end but a stepping stone towards success. Each failure provides valuable lessons that can inform future decisions and improve our work. Embracing failure as a learning experience is essential for growth.\nThere is no substitute for hard work While working smart is important, it cannot replace hard work. Building games requires dedication, perseverance, and putting in the necessary hours to refine and polish our creations. Success in the game industry comes from a combination of talent, effort, and determination.\nBuilding a sustainable game studio is challenging Creating games is already a complex endeavor, but building a game studio that can sustain itself is an even greater challenge. It requires effective management, strong leadership, and a clear understanding of the business side of the industry.\nDiversify revenue streams Relying on a single source of income is risky in any business, including the game industry. To ensure long-term success, it\u0026rsquo;s important to diversify revenue streams. This can involve exploring various avenues such as game sales, licensing intellectual property, developing games for clients, or even creating and selling game-related merchandise.\nIn conclusion, having the right mindset is essential for surviving and thriving in the game industry. It requires a combination of technical skills, a growth mindset, a balanced approach between idealism and practicality, clear goals, and the ability to adapt to challenges. Building a game business comes with its own set of challenges, including financial constraints, human resource management, and effective time management. However, by recognizing our capabilities, embracing failure, and diversifying our revenue streams, we can increase our chances of success in this dynamic and competitive industry.\nSource:\n","permalink":"https://wewnumam.github.io/articles/having-the-right-mindset-to-survive-in-the-game-industry/","summary":"The game industry is a challenging and complex field, and having the right mindset is crucial for survival and success. It\u0026rsquo;s important to have clear goals and start by giving our maximum effort, even if it seems small.\nHere are some key mindsets to cultivate in order to thrive in the game industry:\nTechnical skills are not enough While technical skills are important, they alone are not sufficient to make a living or build a career in the game industry.","title":"Having the Right Mindset to Survive in the Game Industry"},{"content":"Adam Ardisasmita The gaming industry\u0026rsquo;s revenue and export numbers are much larger than other entertainment/content industries (music, movies, etc.). Mobile games account for 45% in 2021 and 53% in 2022 of the global gaming market. Indonesians spend 25 trillion rupiah a year on games, mostly to get items that increase social strata in games. Challenges of the gaming industry in Indonesia: the comparison between the spending of Indonesian gamers on games and the income of Indonesian game developers is still very far (1000:1). Obstacles in making games: lack of funds (66.7%), lack of human resources (44.4%), lack of skills (36.1%), others (26.4%). Why there are few successful local game developers in Indonesia: Business Model; Market Visibility; Access To Funding. Business model challenges: premium (sales conversion \u0026amp; product experience) and freemium (live ops \u0026amp; reading data) Market visibility challenge: pc gamers are more open to games with similar genres while mobile gamers tend to be enthusiastic about 1 game only. Longer life time and limited storage space make mobile gamers rarely look for other games in the same genre. Access to funding challenges: premium (market similar to publisher) and freemium (market validation before funding). Trends in mobile games: Game as a Service (live service and in-app purchase) revenue is greater than full game. Trends in game purchasing power in developing countries: very sensitive to price, micro-transactions are more suitable than one-time purchases. Pay attention to the development of cloud gaming and subscription based model. Other strategies that can be taken: capitalize on viral trends, local wisdom, niche markets. In terms of revenue, it makes more sense to target the global market, but in the local market, we know the market better, so competition is easier. Relatibility is a challenge when promoting local wisdom, the unique selling point must be generally accepted. Game trends are changing, all market segments need games, make sure to test games to the right target market.\nDave Fabrian General structure and responsibilities of a mobile game business: development team (core features \u0026amp; liveops) \u0026amp; publishing team (marketing strategy \u0026amp; community management). Capabilities required in addition to game development: data analysis, performance marketing, community management, customer support, market research, market validation. Key metrics: ARPPU, MAU, DAU, LTV, Paying Conversion, ROAS, CPI, D1/D7/D30 Retention, IPM, FTUE Funnel, CPM, Session Length, Stickiness, Organic Rate, etc. Unlike pc/console gamers whose market is mature (know the channels/sources of information available through media/KOL), the mobile market is still scattered, so to reach out they need to do user acquisition by advertising. Unlike pc/console gamers who spend time specifically for games, mobile games are made to match the behavior (5W+1H) of the market. How to estimate cost: operational cost (marketing cost, team payroll, general affairs) \u0026amp; cost of revenue (platform cost, server cost). Iterate fast, be mindful when to kill and move on. Sometimes developers are too attached to their product, understand the runway, limit, and opportunity cost. How to estimate revenue: revenue projection (new users \u0026amp; returning users/active users). \u0026ldquo;Proven\u0026rdquo; is better than \u0026ldquo;New\u0026rdquo;. Don\u0026rsquo;t have too many experimental aspects. Before making a game, find out the business end goal first. By understanding metrics we can iterate/solve issues as quickly as possible and precisely.\nFandry Indrayadi Fundamental differences between gaming platforms: mode of play, form factor, \u0026amp; session time. Mobile gamers are divided into several spectrum: casual (non-gamer, can be quite hardcore, unforgiving about time), midcore (knowledgeable in games, wants hardcore but doesn\u0026rsquo;t have time), hardcore (dedicated time to game). Core Experience: Taking experience from the real world is better than taking experience from other games. As designers, we can only take experience from other games if we know what experience the game is taking in the real world. Core Audience: To please everyone is to please no one. Target your game to a specific audience based on demographic (gender, location, age) \u0026amp; psychographic (motivation to play). Business model strategy: premium (direct sell), freemium (in-app purchase), free (ads). It\u0026rsquo;s hard to make a profit from premium games on mobile because premium games compete with thousands of new free games every day. Design focus for freemium games: retention (length of time players stay in the game) and conversion (percentage of players who buy in the game). 3 things that make players want to buy (choose maximum 2): content unlock (gatcha, skin, etc) for emotion, boosters (xp+) for optimization, skips (instant upgrade) for time. For free games with ads, don\u0026rsquo;t spam ads, you should make players want to watch ads with rewarded ads (extra life, double coin, etc). As a designer we have to create the needs first so that there is demand so that players want to pay. A design is said to be elegant if it can solve as many problems as possible with 1 feature. Fake ads can be used to test game ideas to the target audience. Trends change quickly, but behavior or culture rarely changes. A designer\u0026rsquo;s job is not to make games but to solve problems in a creative way, his responsibility is to craft experiences.\nYanu Ashari Low budget ≠ Low effort. The name of the business is capital, the bigger the capital is relatively the easier it is to do the steps that need to be done. Approach before making a game: Top Down (starting from market analysis) \u0026amp; Buttom Up (starting from SWOT analysis) Market Analysis: (1) target audience identification, (2) competitor research, (3) market trend analysis. Target audience identification: the goal is to empathize with the player (keywords: demographics, psychographics). Competitor research: (1) identify similar games, (2) identify UX and gameplay, (3) analyze player reviews, (4) research marketing strategies, (5) identify unique selling points. Market trend analysis: (1) industry publications/trends/news/developments, (2) industry conferences/exhibitions/meetings, (3) market reports. How to determine UVP: value proposition canvas (fit between the product and why people buy it). How to validate UVP: (1) prototyping \u0026amp; pseudo MVP, (2) qualitative (usability testing, interviews, FGD) \u0026amp; quantitative (survey, wishlist) research. Formulas to make a successful game: (1) DATA from industry standards and our game, (2) WORDS from user reviews, (3) our FEELINGS to believe in the product.\nPanelist Bandung Steps that beginners can take: observe-imitate-modify, focus on mature execution rather than experimental, because there will be many failures so make sure there are skills that are honed and knowledge that is carried over to the next project. Guidelines for building a team: be able to objectively assess team members from their contributions, be professional, spend a lot of time at the beginning to get to know each other, the team search process cannot be instantaneous, the team composition must be correct (development, business, operations). Make this indie project an opportunity to understand end-to-end business, even though we will eventually focus on one other area, the knowledge is still important. The logical consequence of having a fun life is not only doing what you like but also being trained to do things you don\u0026rsquo;t like (sacrifice). 1 skill required by founders: convincing people to join because the values are the same, even if the salary is small or unpaid. It is important to make a written agreement at the beginning to address unwanted scenarios in the future. Alternatives for those of us who fail to release a game and we need a budget to survive: outsourcing, gamification, or working as professionals for other companies. In business there is always a chance to fail, in fact all our efforts are to minimize risk. Johannes Nindyo You can consider the asset store first to help speed up the development process, except for 2D assets which are usually specialized for 1 project. Other factors besides UVP that can be considered: hockey (featured by media \u0026amp; platform), barriers to entry (optimization for low-spec devices), good execution (free games feel like premium games). We can learn business as we go, but make sure you can make a very good product first - within your capabilities. If not managed properly, remote work can hinder your project progress. Other marketing channels: android game reviewers/youtubers (via email), certain Facebook groups (impersonate a group member). Sometimes people who think too much about good games and good business may not be successful in both, because if we are lacking in one aspect we should look for partners who can cover our shortcomings, so we can focus on aspects that are our strength points.\nBoy Dozan Sometimes, we don\u0026rsquo;t have to innovate everything, why?: (1) experimentation carries a big risk that needs to be validated, (2) game development involves many complex processes that need to be considered, (3) lack of experience and there is still much to learn. What can be learned: (1) use successful games as solid references, (2) market research, (3) create player personas, (4) prototyping \u0026amp; AB testing themes and artstyle (5) early access. Not innovating everything can help us: by using something proven we can speed up the development process and focus on other things. proven \u0026gt; reduced validation process \u0026amp; higher chance for profitable \u0026gt; faster development \u0026gt; better execution \u0026amp; smaller production cost Making a game has to have a business element\u0026ndash;whether it\u0026rsquo;s a clone or not\u0026ndash;because at the end of the day, games have to make money. But, innovation is the best weapon if we use it properly: UVP (unique value proportion). When is the right time to innovate is relative depending on the needs of the market and the capabilities of the team for execution \u0026amp; validation. Game clone rule of thumb: it\u0026rsquo;s hard to be more successful than the game you clone, unless you have a very strong uvp, but the question is do we need to be that successful? in the end, the most important thing is that the results obtained can be sufficient for the company. Copyright needs to be considered when cloning: character designs, assets, parodies. Put idealism aside if it\u0026rsquo;s not financially viable, unless it brings in a large audience. Best practice in-app purchase: usually people who buy once in our game will have a higher chance to buy continuously (continuous buyer), so the hook at the beginning is important to attract the first purchase. Having a brilliant idea with poor execution is worthless, but even a common idea executed well is still better.\nShafiq Hussein It\u0026rsquo;s not just ads and in-app purchases that can make money from games, there are many other ways such as in-game branding (sponsorship) \u0026amp; IP licensing. One of the determining factors of a game\u0026rsquo;s success: luck. People will be more likely to try a game if their friends promote it. When we want to make something - in addition to knowing where our strength points are - we must know what our weaknesses are. If our weakness is in the marketing budget, we can try to approach people who have marketing power. How to become part of the market share in the industry: (1) market research, (2) catch up with social media trends in our target market, (3) incorporate relatable content into game design, (5) development \u0026amp; testing, (4) marketing \u0026amp; PR, (5) maintenance \u0026amp; bug-fixing. Marketing \u0026amp; PR: find a good angle for your target market, approach influencers, send press releases to media, ask your friends to share. The problem only starts when your game is in the store. Typical people are \u0026ldquo;good at staying quiet, not good at complaining.\u0026rdquo; Tips for getting sponsors in games: see on social media what brands are running campaigns and what their branding direction is. Having a business partner is not as easy as recruiting people for work, because the burden is different. The key to the relationship between business and development is to trust each other that the promised results are the best that can be given. Don\u0026rsquo;t let our game\u0026rsquo;s research \u0026amp; development take longer than the game\u0026rsquo;s lifespan. Content-able strategy: not necessarily people like the product, but at least people can create content from the product. When we work with other parties, we must have a legal team to read the terms \u0026amp; conditions of the contract. We must know our battlefield first, how far we can compete, where our capabilities are, and what the quality of our product is.\nBanu Andaru Local values are not only traditional, but all the customs around us, be it traditional or popular popular culture. Application of game experience in the real world: (1) transfer personal experience into relatable content (effect: increase retention, conversion rate \u0026amp; brand trust), (2) understand the mindset and habits of the target audience (effect: increase in revenue), (3) make other creators create content about your game (content baits, effect: traffic, conversion rate, organic growth rate), (5) build communication with players in the community (effect: loyalty, community support). Types of content baits: LOL (anything funny), Win (secret content, easter egg), OMG (dramatic scene/hyperbole), Cute (triggering cuteness), Trashy (hard to see people happy and happy to see people hard, positioning players to feel better than others), Fail (general unrest), WTF (weird). The cycle: game developer -\u0026gt; fan/content creator -\u0026gt; community -\u0026gt; more players -\u0026gt; game developer. If you want to promote local values for the global market, consider relatibilty (something that can be generally accepted). Surabaya Panelist When the market research is right but the execution fails, the game is still garbage. sometimes when the idea is mediocre but executed very well, the potential for success is greater. Not everything based on feeling is successful because the luck factor plays more, and if based on data we must be able to judge that we are not processing the wrong data. Sometimes we misdirect our game because we position ourselves as the target market which the market doesn\u0026rsquo;t necessarily like (biased validation). This is not about whose way is the most correct, but about you seeing your game development strategy from which angle and where is your strenght? product or commercial. Before we make a product, there is always a product-market fit (there is a demand from the market that we are trying to serve with the product). Unlike e-commerce and other tech products, games are not \u0026ldquo;winners take all\u0026rdquo; - because the value in games can still be tweaked a little and it can still be competitive because the market can consume many similar games at once (content-based). The 70-20-10 principle: 70% clone, 20% improve, 10% innovate. Nothing is 100% original. Why would we build from scratch something we don\u0026rsquo;t know yet, where we can perfect something that exists for a market that wants it. Whether we fail or succeed, if we don\u0026rsquo;t start, we don\u0026rsquo;t know where our limits are. Because the chances of us failing are greater, so we must be able to get up again and try again (growth mindset). Joseph Putra Games are hit or miss business (either succeed once or fail completely and die). So, what can we do? faster iteration (copy the successful formula then change the theme), beginners start from hypercasual, milestone knowledge \u0026amp; experience. How to copy or iterate fast: (1) find a game with compelling gameplay, (2) find a data, (3) analyze the core gameplay, (4) make a little innovation, (5) try to release it fast. In the end, the hypothesis from the data needs to be executed and validated as quickly as possible. Measuring a successful game depends on the context of each studio, it can be from the capital spent or from the size of the team. If we don\u0026rsquo;t have time to add content to the game, we can slow down the player\u0026rsquo;s progress by dividing the stage then complicating the final stage or limiting the amount of access (hearts, energy, etc.), these methods can also be used as opportunities for monetization. If your game is a competitive experience, don\u0026rsquo;t monetize skill boosters that ruin the balance of the competition. Lucky Putra Reskins of small games with nothing improved and poor monetization make your game unmarketable. Narrative game problems: (1) no hook in the first 5 minutes, (2) lack of in-game interaction, (3) not free player friendly, (4) players wait too long for new content. Things to consider: (1) prepare a clear monetization from the beginning, (2) pay attention to the matrix of the early game, (3) hook the first 5 minutes, (4) think about the live-ops plan, (5) optimize game performance. There\u0026rsquo;s no need to set grandiose targets, being able to pay employee salaries and create an okay portfolio is enough to open up new opportunities (business deals, benchmark the next project). Tips when sharing on social media: The caption must be personal and look for the right moment, tell the purpose of why making this game and tell our personal background. Tips for making survey questions: make directed questions according to the feedback we expect, don\u0026rsquo;t give open questions, start with generic questions then deepen them in the next question. Suyono Why make games for a niche audience? It\u0026rsquo;s more guaranteed and targeted (even though the pool is smaller, you can get more out of it), it\u0026rsquo;s more fun (what we make is what we understand), the fans are more hardcore (loyal). Don\u0026rsquo;t daydream too much, there are things that you will discover on your own as time goes by. Just make it, just make it. The negative thing about too many guides is that there are more gatekeepers (thoughts that make it difficult for you) to start something. Failure is part of the process and an inevitability, there is no need to be overly afraid. Tips for applying the principle of just making things: don\u0026rsquo;t look from a gamedev perspective, don\u0026rsquo;t start from what you want to make, but focus on making games that you and others want to play. New features are rough first, polish later, they don\u0026rsquo;t necessarily work and prevent you from burnout. Community can happen naturally as long as the game is good, you can also direct people to join your community or design the game to be suitable for the community. Data is important as long as you can read data, if you can\u0026rsquo;t read data, you don\u0026rsquo;t know which data is relevant. There is no one right way for all because people\u0026rsquo;s execution skills vary, and in the end, the market is the judge. The longer you\u0026rsquo;re in gamedev, the more you\u0026rsquo;ll feel your skill is the inhale skill :v\nJulio Andryanto No need to make tools/anything from scratch, our focus is to make a good game. Don\u0026rsquo;t spend a lot of time on things that require talent instead of time to learn. Mobile game business model is a live service, which needs content all the time. If the core mechanic is not proven in the market, it\u0026rsquo;s better to kill it. We can\u0026rsquo;t add people to an organization without a system where everyone doesn\u0026rsquo;t know what to do, we need project management and organizational structure. If you have an idea directly executed without project management it will be chaotic, the project cannot be managed and extended. Things that must be proven in the development stage: product risk (core loop, meta game), marketing risk (theme, artstyle). PBN Framework: proven (mechanics that have been tested in the market), better (improvements made), new (USP). Build games that can grow: higher LTV (string game mechanics) \u0026gt; lower CPI (approachable art) = positive ROI Artstyle has a big influence on FTUE (first time user experience), for that CTR (metric people want to click) must be high first. Test the game on the right target audience. Use Facebook ads, it is not recommended to share in your friends\u0026rsquo; social media circles, to avoid bias. Metrics \u0026amp; KPIs are the core of the free to play mobile game business. If you want to create a company, first focus on your team, then the product.\nBatam Panelist Although we use data, in the end we use feelings to make decisions, the data actually supports our feelings. Although we use feelings, in the end our decisions must be based on data, if during discussions everyone uses feelings, whose feelings do we want to believe? Don\u0026rsquo;t trust your feelings if 50% of your time is not spent forming those feelings, also use references that already work as support for feelings. In the end, the one who judges our product is the market, so don\u0026rsquo;t let our product judge us and never release the game. In the end, the effective way of the team varies depending on our strength points, some have the capability and time to grow the existing team skills (improve weaknesses), some choose to convince other people who have the capability to join the team (prioritize strengths). With a community, we can reduce development costs and accelerate validation to the market because core players gather there. Community is important for us to build, but before that, first find our identity as a game developer in which direction, don\u0026rsquo;t let us invest in things that we are not ready to harvest. For bigger projections, target audiences to countries with high purchase conversions first, then look for the same user base that exists locally, so when we test we can test locally. To start with low risk (low CPI), we can start from the local target audience because we are more reachable. If you succeed without failing, you don\u0026rsquo;t appreciate failure. If you fail, you are one step ahead of those who haven\u0026rsquo;t failed yet. Always have a plan B ready, so that you can totally stick to plan A without fear, in the end you have to be able to keep going. Tips for surviving in the gaming industry: (1) just make it, (2) networking, (3) invest in skills other than gamedev, (4) consistently finish the job, get the full lesson. Watch the Full Roadshow At https://www.youtube.com/playlist?list=PLVUyIfQWnm-EnPV53GdCtNhkhA7aA5ELv\n","permalink":"https://wewnumam.github.io/articles/gameseed-roadshow-key-points/","summary":"Adam Ardisasmita The gaming industry\u0026rsquo;s revenue and export numbers are much larger than other entertainment/content industries (music, movies, etc.). Mobile games account for 45% in 2021 and 53% in 2022 of the global gaming market. Indonesians spend 25 trillion rupiah a year on games, mostly to get items that increase social strata in games. Challenges of the gaming industry in Indonesia: the comparison between the spending of Indonesian gamers on games and the income of Indonesian game developers is still very far (1000:1).","title":"Gameseed Roadshow Key Points"},{"content":"To run your first playtest, it\u0026rsquo;s important to have a clear understanding of your target audience and the type of game you\u0026rsquo;re creating. This will help you to choose the right group of playtesters and create a test scenario that closely simulates the final product.\nBefore the playtest, prepare a list of questions that you want to ask your playtesters, and set up a system for collecting feedback. This can be done through a survey or through verbal feedback during the playtest. Additionally, make sure you have all the necessary materials and equipment ready, such as game boards, cards, dice, and any other components that are needed for the game.\nDuring the playtest, make sure to observe your playtesters\u0026rsquo;s behavior and interactions with the game, and take notes on any issues that arise. It\u0026rsquo;s also important to remain neutral and avoid interrupting the playtest, as this can disrupt the natural flow of the game.\nAfter the playtest, be sure to thank your playtesters for their time and efforts. Use their feedback to identify areas of improvement and make adjustments to the game accordingly. Remember, playtesting is an iterative process, so don\u0026rsquo;t be afraid to run multiple playtests with different groups of players. Each playtest will bring new insights and help to improve the game further.\nIt\u0026rsquo;s also important to keep in mind that playtesting is not only about finding problems, but also about getting feedback on what\u0026rsquo;s working well. This can help you to identify the strengths of your game, and build on them to make it even better.\nRunning your first playtest can be a nerve-wracking experience, but it\u0026rsquo;s an essential step in the game design process. Playtesting allows you to gather valuable feedback and make necessary adjustments to your game before it\u0026rsquo;s released to the public. By following the 4 I\u0026rsquo;s Framework, you can ensure that your playtest is conducted effectively and that the feedback you receive is useful in improving your game.\nThe first step in the 4 I\u0026rsquo;s Framework is to INQUIRE through playtesting. This means setting up and running your playtest, and observing the results. It\u0026rsquo;s important to have a clear understanding of what you\u0026rsquo;re trying to test and what you\u0026rsquo;re hoping to learn from the playtest. This will help you to focus on the most important aspects of the game and gather the most useful feedback.\nThe next step is to IDENTIFY any problems by asking your playtesters for feedback. It\u0026rsquo;s important to be open-minded and willing to hear constructive criticism. Playtesters feedback can be invaluable in identifying areas of the game that need improvement.\nOnce you\u0026rsquo;ve identified potential problems, the third step is to ILLUMINATE them by brainstorming a number of ideas for solutions. This is a creative process and it\u0026rsquo;s important to be open to new ideas. It\u0026rsquo;s also important to consider the impact that any changes will have on the overall balance of the game.\nFinally, the fourth step is to ITERATE and revise your game. Select your best potential solution, make the necessary changes, and playtest again. This process of testing, feedback, and iteration should be repeated until the game is in the best possible state.\nIn summary, running your first playtest is a crucial step in the game design process. By following the 4 I\u0026rsquo;s Framework, you can ensure that your playtest is conducted effectively and that the feedback you receive is useful in improving your game. Remember, game design is an iterative process, so don\u0026rsquo;t be discouraged if the first playtest doesn\u0026rsquo;t go perfectly. Embrace the failure and learn from it to make your game better.\nIn conclusion, running your first playtest can seem daunting, but it\u0026rsquo;s an essential step in the game design process. By preparing properly, observing playtesters behavior, and gathering feedback, you can make valuable adjustments to your game and create a product that is enjoyable for players. Remember, game design is an iterative process, and playtesting is an essential part of that process.\nSource:\nSlack, J., \u0026amp; Stegmaier, J. (2017). The Board Game Designer\u0026rsquo;s Guide: The Easy 4 Step Process to Create Amazing Games that People Can\u0026rsquo;t Stop Playing. Crazy Like a Box.\n","permalink":"https://wewnumam.github.io/articles/how-to-run-your-first-playtest/","summary":"To run your first playtest, it\u0026rsquo;s important to have a clear understanding of your target audience and the type of game you\u0026rsquo;re creating. This will help you to choose the right group of playtesters and create a test scenario that closely simulates the final product.\nBefore the playtest, prepare a list of questions that you want to ask your playtesters, and set up a system for collecting feedback. This can be done through a survey or through verbal feedback during the playtest.","title":"How to Run Your First Playtest"},{"content":"According to a study, people play games for a variety of reasons, including the opportunity to structure and change their internal experiences. Many adults enjoy the chance to fill their heads with thoughts and emotions unrelated to work or school, while others are drawn to the challenge and opportunity to test their abilities. Games offer a sense of efficiency and order that may be lacking in everyday life, and can provide a sense of excitement and relaxation.\nSome people are attracted to the sensations that games can provide, such as the thrill of dirt-bike racing or the feeling of flying. These experiences may be out of reach in real life, due to a lack of skills, resources, or social permission. Others may use games as a way to escape the real world or escape its social norms. Nearly all players enjoy the feeling of complete absorption and challenge that games can offer.\nObservation has shown that players experience a range of emotions while playing games. These emotions can be seen in players\u0026rsquo; visceral, behavioral, cognitive, and social responses to the games they play. Some players may crave the increased heart rate and excitement of a race, while others may experience the skin-prickling sensation of wonder. Tension and frustration may also be felt, followed by a sense of accomplishment and pride (known as \u0026ldquo;Fiero\u0026rdquo;).\nFor some players, the appeal of games lies in the opportunity to relax and escape from their worries and thoughts. Others may use games as a way to build self-esteem or to gain a sense of perspective on their own lives. In any case, it is clear that games can have a powerful impact on players\u0026rsquo; emotions and can offer a range of therapeutic benefits.\nThe Four Keys to emotion structure Player Experiences are four factors that can influence how players experience emotions while playing games. These factors are:\nPlayers\u0026rsquo; internal experiences Players may find enjoyment from their internal experiences in reaction to the visceral (physical sensations), behavioral (actions and movements), cognitive (thoughts and perceptions), and social (interactions with other players) properties of the game. These players play for internal sensations such as excitement or relief from their thoughts and feelings.\nChallenge, strategy, and problem solving Players may enjoy the opportunities for challenge, strategy, and problem solving that games offer. Their comments may focus on the game\u0026rsquo;s challenge and strategic thinking and problem solving. This \u0026ldquo;Hard Fun\u0026rdquo; frequently generates emotions and experiences of frustration and Fiero (a sense of accomplishment and pride).\nIntrigue and curiosity Players may become immersed in games when it absorbs their complete attention, or when it takes them on an exciting adventure. These immersive game aspects are \u0026ldquo;Easy Fun\u0026rdquo; and generate emotions and experiences of wonder, awe, and mystery.\nSocial experiences Some players use games as mechanisms for social experiences. These players may enjoy the emotions of amusement, schadenfreude (pleasure at the misfortune of others), and naches (pride in the achievements of others) that come from social experiences of competition, teamwork, and the opportunity for social bonding and personal recognition that comes from playing with others.\nThis research found that there is a dramatic contrast in emotional displays between players who are playing a game on their own versus those playing in a group. Players in groups tend to emote more frequently and with more intensity than those playing alone. This suggests that group play adds new behaviors, rituals, and emotions that can make games more exciting.\nThe researchers were also surprised by the usefulness of the concept of \u0026ldquo;Flow\u0026rdquo; in describing the challenge of games and the potential for games to improve the quality of life. Flow refers to a state of complete immersion in an activity, characterized by a feeling of effortless concentration and enjoyment.\nFor game designers, the Four Keys to unlocking emotion in moment-to-moment gameplay (internal experiences, challenge and strategy, intrigue and curiosity, and social experiences) offer new opportunities for generating emotion through player choice. This research suggests that by understanding and utilizing these keys, game designers can create games that effectively engage and evoke emotions in players.\nSource:\nGames, W. W. P. (2004). Four Keys to More Emotion Without Story.\n","permalink":"https://wewnumam.github.io/articles/why-do-people-play-games/","summary":"According to a study, people play games for a variety of reasons, including the opportunity to structure and change their internal experiences. Many adults enjoy the chance to fill their heads with thoughts and emotions unrelated to work or school, while others are drawn to the challenge and opportunity to test their abilities. Games offer a sense of efficiency and order that may be lacking in everyday life, and can provide a sense of excitement and relaxation.","title":"Why Do People Play Games"},{"content":"There are many ways to make money from games, whether as a developer selling homemade games, a streamer entertaining an audience, or a player trading in-game items. In this article, we will explore five different ways to monetize the passion for gaming and turn it into a profitable venture. From developing and selling homemade games to offering gaming-related services, there are many opportunities to make money in the gaming industry.\nHowever, it\u0026rsquo;s important to remember that making money from gaming can be competitive and requires a lot of time and effort.\nDeveloping and selling homemade games This involves creating a game from scratch and then selling it to players. To sell games online, there are a few ways you can do this, namely publishing them through app stores such as the Apple App Store, Google Play Store, Steam, or Itch.io. You can also offer to publishers to market your game. To develop a successful game, you need to have a strong understanding of game design, programming, and marketing.\nMonetize free games Many games are free to download, but they can still be monetized through in-app purchases or microtransactions. These are small purchases that players can make within the game to unlock new content or features. You can also monetize free-to-play games by displaying ads or offering subscription services.\nStream game gameplay If you enjoy playing games and have an engaging personality, you can make money by streaming your gameplay on platforms like Twitch or YouTube. Viewers can subscribe to your channel, donate money, or watch ads to support you. To be successful as a game streamer, you need to have a strong understanding of the games you play and be able to entertain and engage your audience.\nSelling items or in-game currency Some games allow players to trade or sell in-game items or currency on online marketplaces such as eBay or PlayerAuctions. These items or currencies can be valuable to other players, and you can make money by buying and selling them.\nOffer game-related services If you have a deep understanding of a particular game, you can offer services such as opening up game-related skill training or consulting to clients who need your services in the gaming industry. You can create and sell game-related content, such as guides or tutorials. To succeed in this field, you need to have a strong understanding of games and be able to communicate effectively with your clients.\nIn conclusion, there are many ways to make money from games, whether you are a developer, streamer or player. From developing and selling your own games to offering services related to gaming, there are many opportunities to monetize your passion for games.\nHowever, it\u0026rsquo;s important to remember that monetizing games can be competitive and requires a lot of time and effort. It is also important to follow the terms of service and applicable laws when monetizing games. If you\u0026rsquo;re willing to commit and have a clear plan, you can turn your love for gaming into a profitable venture.\n","permalink":"https://wewnumam.github.io/articles/making-money-from-games/","summary":"There are many ways to make money from games, whether as a developer selling homemade games, a streamer entertaining an audience, or a player trading in-game items. In this article, we will explore five different ways to monetize the passion for gaming and turn it into a profitable venture. From developing and selling homemade games to offering gaming-related services, there are many opportunities to make money in the gaming industry.","title":"Making Money From Games"},{"content":"Writing good commit messages is an important practice that can help other people understand the changes that you have made and why. Here are some tips for writing better commit messages:\nUse a clear and descriptive subject line The first line of the commit message should be a short and concise summary of the changes that you have made. Keep it to around 50 characters or less. This will help other developers quickly understand the changes that you have made.\n\u0026amp;nbsp\nBad:\nUpdate\n\u0026amp;nbsp\nGood:\nFix typo in README file\nUse the imperative mood Use the imperative mood in the subject line, as if you are giving a command. For example, Fix bug or Add feature. This helps to make the commit message more direct and actionable.\n\u0026amp;nbsp\nBad:\nAdded feature to search bar\n\u0026amp;nbsp\nGood:\nAdd feature to search bar\nAdd more context in the body The body of the commit message should provide more detailed information about the changes that you have made. Explain why you made the changes and how they benefit the codebase. This will help other developers understand the reasoning behind your changes.\n\u0026amp;nbsp\nBad:\n(No body)\n\u0026amp;nbsp\nGood:\nI added a feature to the search bar that allows users to search for specific items by keyword. This will make it easier for users to find what they are looking for and should improve the overall user experience.\nKeep it concise Try to keep the commit message to around 72 characters per line. This makes it easier to read in the command line or in a git client.\n\u0026amp;nbsp\nBad:\nI fixed a bug that was causing the application to crash when a user tried to submit a form with an empty field. This was a really annoying bug and it took me a while to track it down, but I finally found it and was able to fix it. I hope this doesn't happen again.\n\u0026amp;nbsp\nGood:\nFix bug that caused application to crash when submitting form with empty field\nUse bullet points If you have made multiple changes, use bullet points to list them out. This helps to organize the information and make it easier to read.\n\u0026amp;nbsp\nBad:\nI made a bunch of changes to the codebase. I fixed some bugs, added some new features, and refactored some of the code to make it more readable. I also added some tests to make sure everything is working properly.\n\u0026amp;nbsp\nGood:\n- Fix bug that caused application to crash when submitting form with empty field\n- Add feature to search bar\n- Refactor code for improved readability\n- Add tests to ensure proper functionality\nMore Example Here are some examples of good git commit messages that use bullet points in the body to clearly and concisely describe the changes made:\n\u0026ldquo;Fix typo in README file\u0026rdquo;\nCorrected spelling error on line 5 \u0026ldquo;Add feature to search bar\u0026rdquo;\nAdded keyword search functionality Improved UI of search bar \u0026ldquo;Refactor code for improved readability\u0026rdquo;\nRenamed variables to be more descriptive Grouped related code into functions Added comments to clarify code logic \u0026ldquo;Improve performance of login page\u0026rdquo;\nOptimized database queries Reduced amount of data transferred between server and client Added caching to improve response time \u0026ldquo;Update dependencies to fix security vulnerabilities\u0026rdquo;\nUpgraded library \u0026ldquo;X\u0026rdquo; to version 2.0 Replaced deprecated function \u0026ldquo;Y\u0026rdquo; with recommended alternative \u0026ldquo;Fix bug that caused application to crash when submitting form with empty field\u0026rdquo;\nIdentified root cause of crash Implemented fix to handle empty field input Added tests to prevent similar issues in the future \u0026ldquo;Add tests to ensure proper functionality\u0026rdquo;\nWrote tests for new features Added coverage for edge cases Improved reliability of existing tests \u0026ldquo;Update documentation to reflect changes in API\u0026rdquo;\nAdded descriptions for new endpoints Updated examples to reflect changes in request and response formats Clarified usage of deprecated functions \u0026ldquo;Rename variables for improved readability\u0026rdquo;\nRenamed variables throughout codebase to be more descriptive Adjusted tests and documentation to reflect renames Improved code clarity and maintainability \u0026ldquo;Refactor code to use new library\u0026rdquo;\nReplaced old library with more feature-rich alternative Adjusted code to use new library\u0026rsquo;s API Improved code performance and reliability By following these tips, you can write commit messages that are clear, concise, and easy to understand. This will help other developers to more easily review and understand your code, which can lead to faster code review and deployment. So take some time to carefully craft your commit messages and you\u0026rsquo;ll be on your way to writing better git commit messages in no time!\n","permalink":"https://wewnumam.github.io/articles/5-tips-for-writing-clear-and-concise-git-commit-messages/","summary":"Writing good commit messages is an important practice that can help other people understand the changes that you have made and why. Here are some tips for writing better commit messages:\nUse a clear and descriptive subject line The first line of the commit message should be a short and concise summary of the changes that you have made. Keep it to around 50 characters or less. This will help other developers quickly understand the changes that you have made.","title":"5 Tips for Writing Clear and Concise Git Commit Messages"},{"content":"Clean code is code that is easy to read, understand, and maintain. It follows a set of coding standards and principles that aim to make the code as readable and maintainable as possible.\nClean code is important because it helps reduce the time and effort required to understand and modify the codebase, and it makes it easier to add new features or fix bugs. It also promotes collaboration and reduces the risk of introducing new issues when modifying the code.\nTo achieve clean code, it\u0026rsquo;s important to follow best practices for naming variables and functions, using clear and consistent formatting, keeping functions small and focused, avoiding unnecessary complexity, and writing self-documenting code. It\u0026rsquo;s also important to follow established coding standards and to consistently apply these principles throughout the codebase.\nHere are five important principles of clean code, along with some example code to illustrate each principle:\nUse Searchable Names Good names are easy to search for and make it easy to understand the purpose of the code. Use descriptive and meaningful names that accurately reflect the purpose of the variable or function.\nBad:\nint computeTotalCost(int quantity, int pricePerItem) { return quantity * pricePerItem + 5; } In this example, the additional cost of $5 is added directly to the computation, without any context or explanation. This makes it harder to understand the purpose of the code and to modify it if necessary.\nA better way to implement this code would be to use a descriptive constant to represent the additional cost:\nGood:\nint computeTotalCost(int quantity, int pricePerItem) { final int SHIPPING_COST = 5; return quantity * pricePerItem + SHIPPING_COST; } This version of the code is easier to understand and modify, because the purpose of the additional cost is clearly explained with the use of a descriptive constant.\nFunction Name Should Be Verb and Function Should Do One Thing in One Thing Only Functions should have descriptive names that reflect the action they perform, and they should do one thing only. A function that does more than one thing is harder to understand and maintain.\nBad:\nint calc(int x, int y) { int z = x + y; int w = x * y; return z - w; } Good:\nint add(int x, int y) { return x + y; } int multiply(int x, int y) { return x * y; } int subtract(int x, int y) { return add(x, y) - multiply(x, y); } Three or Less Arguments in a Function Functions with too many arguments are hard to understand and maintain. Aim to keep the number of arguments in a function to three or less. If a function requires more than three arguments, consider refactoring the code to use an object or a data structure to pass the arguments.\nBad:\nvoid printInvoice(int customerId, int invoiceNumber, int itemNumber, int quantity, int pricePerItem, int discountPercent, int taxPercent) { // code to print invoice } Good:\nclass Invoice { int customerId; int invoiceNumber; int itemNumber; int quantity; int pricePerItem; int discountPercent; int taxPercent; } void printInvoice(Invoice invoice) { // code to print invoice } Avoid Passing Boolean Value as Arguments in a Function Passing a boolean value as an argument to a function can make the code harder to understand, because it is not immediately clear what the boolean value represents. Instead, consider using a descriptive name for the argument or refactoring the code to use a function with a more descriptive name.\nBad:\nvoid printMessage(string message, bool isError) { if (isError) { Console.WriteLine(\u0026#34;ERROR: \u0026#34; + message); } else { Console.WriteLine(message); } } In this example, the boolean value isError is passed as an argument to the function, which requires an additional if statement to determine how to print the message.\nA better way to implement this code would be to use a function with a more descriptive name that reflects the purpose of the function:\nGood:\nvoid printErrorMessage(string message) { Console.WriteLine(\u0026#34;ERROR: \u0026#34; + message); } void printMessage(string message) { Console.WriteLine(message); } This version of the code is easier to understand, because the purpose of the functions is clear from their names, and there is no need for an additional if statement inside the function.\nAvoid Using Letter Names Using single-letter names for variables and functions can make the code hard to understand, because it is not immediately clear what the letters represent. Instead, use descriptive names that accurately reflect the purpose of the code.\nBad:\nint[][] data = new int[5][5]; for (int i = 0; i \u0026lt; 5; i++) { for (int j = 0; j \u0026lt; 5; j++) { data[i][j] = i + j; } } In this example, the variables i and j are used as indexes for the multidimensional array data, but it is not immediately clear what these letters represent.\nA better way to implement this code would be to use descriptive names for the indexes:\nGood:\nint[][] data = new int[5][5]; for (int row = 0; row \u0026lt; 5; row++) { for (int col = 0; col \u0026lt; 5; col++) { data[row][col] = row + col; } } This version of the code is easier to understand, because the purpose of the variables row and col is clear from their names.\nIn conclusion, clean code is code that is easy to read, understand, and maintain. It follows a set of coding standards and principles that aim to make the code as readable and maintainable as possible.\nSome important principles of clean code include using meaningful and descriptive names, using clear and consistent formatting, keeping functions small and focused, avoiding unnecessary complexity, and writing self-documenting code.\nBy following these principles, you can create code that is easier to understand and modify, and that promotes collaboration and reduces the risk of introducing new issues when modifying the code.\nSource:\n","permalink":"https://wewnumam.github.io/articles/5-tips-for-creating-clean-code/","summary":"Clean code is code that is easy to read, understand, and maintain. It follows a set of coding standards and principles that aim to make the code as readable and maintainable as possible.\nClean code is important because it helps reduce the time and effort required to understand and modify the codebase, and it makes it easier to add new features or fix bugs. It also promotes collaboration and reduces the risk of introducing new issues when modifying the code.","title":"5 Tips for Creating Clean Code"},{"content":"As a game designer, it\u0026rsquo;s important to be aware of common pitfalls and mistakes that can hinder the success of your projects. By avoiding these mistakes, you can increase your chances of creating successful and enjoyable games that players will love. Here are the top 10 mistakes game designers should avoid:\nHuge Project without Portfolio Starting with a large, ambitious project without a portfolio of smaller, completed games can be risky. It\u0026rsquo;s important to build a portfolio of completed projects to showcase your skills and capabilities before tackling a larger project. A portfolio can also help you demonstrate your ability to complete projects and can be used to attract funding or partners for larger projects.\nHide the Idea It\u0026rsquo;s important to share your game ideas and get feedback from others, whether it\u0026rsquo;s through playtesting or seeking input from industry professionals. Hiding your ideas can limit the potential for improvement and growth. Sharing your ideas with others can help you get valuable feedback and insights, leading to a stronger and more successful game.\nNot Using the Cloud One mistake that game designers should avoid is not using the cloud for storage and collaboration. Local storage can be problematic because it is limited in capacity and can be prone to data loss or corruption due to hardware issues or other unexpected events. The cloud, on the other hand, provides virtually unlimited storage capacity and is more reliable and secure.\nCreate Unfinished Projects It\u0026rsquo;s important to see a game through to completion rather than abandoning it halfway through development. Players will be disappointed if they invest time and money into a game that is never fully finished. It\u0026rsquo;s better to set realistic goals and priorities and to focus on completing a smaller number of projects rather than taking on too much and leaving projects unfinished.\nOnly Make Games by Yourself Collaborating with others can bring fresh perspectives and ideas to the table and can lead to a better final product. It\u0026rsquo;s important to consider teaming up with others, whether it\u0026rsquo;s through hiring employees or partnering with other developers. Working alone can limit your creativity and the potential of your game.\nNot Saving Money for Advertisement Marketing and advertising are crucial for getting the word out about your game and attracting players. Failing to allocate sufficient resources for these efforts can hinder the success of your game. It\u0026rsquo;s important to budget for marketing and advertising from the outset and to allocate a sufficient portion of your budget to these efforts.\nFocus on Technology While technology is an important aspect of game development, it should not be the main focus. It\u0026rsquo;s important to strike a balance and ensure that the gameplay and overall experience are the primary focus. Focusing too much on technology can lead to a game that is impressive from a technical standpoint but lacking in terms of gameplay and enjoyment.\nQuit Your Job Without Guarantees Game design can be a risky and uncertain career path, and it\u0026rsquo;s important to have a solid plan in place before quitting your day job to pursue it full-time. This includes having some level of financial security and guarantees, such as contracts or funding, to ensure that you can sustain yourself while working on your game.\nDon\u0026rsquo;t Prototype Prototyping is an essential step in the game design process that allows you to test and iterate on your ideas before investing a lot of time and resources into development. Skipping this step can lead to costly mistakes and a less polished final product. Prototyping can also help you identify and address potential issues early on, saving time and effort in the long run.\nNo Meaningful Differential One common mistake game designers make is failing to ensure that their game has a unique selling point or differential. Without a meaningful differential, it will be difficult to stand out in a crowded market and attract players. It\u0026rsquo;s important to carefully consider what makes your game different and how you can use that to your advantage.\nAvoiding these common mistakes can help game designers create successful and enjoyable games.\nIt\u0026rsquo;s important to carefully consider the unique selling points of your game, to prototype and test your ideas, to plan for financial security and marketing efforts, to collaborate with others, to complete projects, to utilize the cloud, to seek feedback on your ideas, and to build a portfolio of completed projects.\nBy following these best practices, game designers can increase their chances of success and create games that players will love.\nSource:\nIntroduction to Game Design Theory by John Haste\n","permalink":"https://wewnumam.github.io/articles/top-10-game-designer-mistakes/","summary":"As a game designer, it\u0026rsquo;s important to be aware of common pitfalls and mistakes that can hinder the success of your projects. By avoiding these mistakes, you can increase your chances of creating successful and enjoyable games that players will love. Here are the top 10 mistakes game designers should avoid:\nHuge Project without Portfolio Starting with a large, ambitious project without a portfolio of smaller, completed games can be risky.","title":"Top 10 Game Designer Mistakes"},{"content":"Games serve many different purposes and can be enjoyed for a variety of reasons. Some people play games as a form of entertainment, to pass the time, or to socialize with friends and family. Others play games to challenge themselves or to improve their skills in a particular area. Still others play games as a way to relax and destress after a long day.\nPurposes for games in different contexts:\nEntertainment Games can be a source of entertainment, providing enjoyment and relaxation for players. They can be a fun way to pass the time and can be played alone or with others.\nEducation Games can be used as a tool for education, helping players learn new concepts or develop new skills. This can be done through educational games that are specifically designed for learning, or through games that incorporate educational elements in a more engaging and interactive way.\nAdvertising Games can be used as a way to advertise products or services. For example, a company might create a simple game that promotes their brand or product, which players can access and play for free.\nProductivity (Gamification) Gamification is the process of incorporating game-like elements into non-game activities in order to make them more engaging and motivating. This can be used to increase productivity and motivate people to complete tasks or achieve goals.\nBusiness Model Games can be developed as a business, with the goal of generating revenue through sales or in-game purchases. They can also be used as a way to promote a business or brand and gamification as a service, as mentioned above. Another business model is by licensing intelectual property and helding an event like tournament.\nArt Games can be considered a form of art, with designers and developers creating immersive and visually appealing worlds for players to explore. Games can also be used as a medium for artistic expression, allowing players to create and share their own creations.\nScience Games can be used in scientific research, such as in studies on human behavior or cognition. They can also be used to simulate real-world scenarios or test hypotheses in a controlled environment.\nTherapy Games can be used as a form of therapy, helping people to cope with stress, anxiety, or other mental health issues. They can also be used to help people with physical disabilities or injuries to improve their function and mobility.\nIn general, the purpose of a game is to provide enjoyment and engagement for the player. This can be achieved through competition, problem-solving, exploration, creativity, or a combination of these elements. Games can also serve educational purposes, helping players learn new concepts or develop new skills.\nUltimately, the purpose of a game depends on the individual player and their goals and motivations for playing. Some people may play games simply for fun, while others may be more focused on achieving specific goals or improving their performance.\nCredits:\nArticle quality improved by ChatGPT (2022).\n","permalink":"https://wewnumam.github.io/articles/the-purpose-of-games/","summary":"Games serve many different purposes and can be enjoyed for a variety of reasons. Some people play games as a form of entertainment, to pass the time, or to socialize with friends and family. Others play games to challenge themselves or to improve their skills in a particular area. Still others play games as a way to relax and destress after a long day.\nPurposes for games in different contexts:","title":"The Purpose of Games"},{"content":"Note:\nTo be able to use these features we need at least C# version 7 and above or Unity 2018 and above.\nTernary Operator In computer programming, the ternary conditional operator is a ternary operator that is part of the syntax for basic conditional expressions in several programming languages.It is commonly referred to as the conditional operator, ternary if, or inline if.\nAn expression a ? b : c evaluates to b if the value of a is true, and otherwise to c. One can read it aloud as \u0026ldquo;if a then b otherwise c\u0026rdquo;.\nNormal if statement:\nif (health \u0026gt; 0) { barColor = Color.red; } else { barColor = Color.black; } if statement using ternary operator:\nbarColor = health \u0026gt; 0 ? Color.red : Color.black; String Interpolation The special character $ identifies a string literal (unformatted string) as an interpolated string. An interpolated string is a literal string that may contain an interpolated expression.\nInterpolated strings provide a more readable and convenient syntax for formatting strings.\nstring name = \u0026#34;Groot\u0026#34;; float health = 100; float mana = 50; // operator \u0026#39;+\u0026#39; logMessage = \u0026#34;Unit \u0026#34; + name + \u0026#34;, health: \u0026#34; + health + \u0026#34;, mana: \u0026#34; + mana; // string.Format logMessage = string.Format(\u0026#34;Unit {0}, health: {1}, mana: {2}\u0026#34;, name, health, mana); // string interpolation logMessage = $\u0026#34;Unit {name}, health: {health}, mana: {mana}\u0026#34;; Expression Body Expression body definitions allow us to provide property implementations in a very concise and readable form.\nThe expression body definition has the following general syntax: member =\u0026gt; expression;\nNormal property:\nprivate float health, maxHealth; public float HealthPrencentage { get { return health / maxHealth; } set { health = value * maxHealth; } } Expression-body porperty:\nprivate float health, maxHealth; public float HealthPrencentage { get =\u0026gt; health / maxHealth; set =\u0026gt; health = value * maxHealth; } Expression-body read-only property:\npublic float HealthPrencentage =\u0026gt; health / maxHealth; \u0026amp;nbsp\nNormal method:\npublic float Percentage(float current, float max) { return current / max; } Expression-body method:\npublic float Percentage(float current, float max) =\u0026gt; current / max; Local Function Local functions are methods that are nested inside other methods. They can only be called from the method that contains them.\nLocal functions make the intent of our code clear. Anyone reading our code can see that this method cannot be called except by the method that contains it.\nNormal method:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); } private IEnumerator UpdateHealthBarCoroutine() { yield return null; } Local function:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); IEnumerator UpdateHealthBarCoroutine() { yield return null; } } Null Checking Simplifies a common coding pattern where a variable is assigned a value if it is null.\nCommon null checking:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { if (OnEnemyHit != null) OnEnemyHit.Invoke(other.gameObject); } Null checking operator:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { OnEnemyHit?.Invoke(other.gameObject); } Null Coalescing The null-coalescing operator ?? returns the value of its left-hand operand if it isn\u0026rsquo;t null; otherwise, it evaluates the right-hand operand and returns its result. The ?? operator doesn\u0026rsquo;t evaluate its right-hand operand if the left-hand operand evaluates to non-null.\npublic class GameManager : MonoBehaviour { private Player player; // using null comparison public Player GetPlayer() { if (player == null) return new Player(\u0026#34;Groot\u0026#34;); else return player; } // using null coalescing operator public Player GetPlayer() { return player ?? new Player(\u0026#34;Groot\u0026#34;); } } nameof Keyword A nameof expression produces the name of a variable, type, or member as the string constant. A nameof expression is evaluated at compile time and has no effect at run time.\npublic class Enemy { public string name; public flaot health; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.name}, health: {enemy.health}\u0026#34;); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;{nameof(Enemy.name)}: {enemy.name}, {nameof(Enemy.health)}: {enemy.health}\u0026#34;); In certain situations when we want to change the name of a variable, we don\u0026rsquo;t need to change the string we created manually.\npublic class Enemy { public string id; public flaot hp; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.id}, health: {enemy.hp}\u0026#34;); // will print -\u0026gt; id: Groot, hp: 100 Debug.Log($\u0026#34;{nameof(Enemy.id)}: {enemy.id}, {nameof(Enemy.hp)}: {enemy.hp}\u0026#34;); Source:\n","permalink":"https://wewnumam.github.io/articles/syntatic-sugars-csharp-hidden-features/","summary":"Note:\nTo be able to use these features we need at least C# version 7 and above or Unity 2018 and above.\nTernary Operator In computer programming, the ternary conditional operator is a ternary operator that is part of the syntax for basic conditional expressions in several programming languages.It is commonly referred to as the conditional operator, ternary if, or inline if.\nAn expression a ? b : c evaluates to b if the value of a is true, and otherwise to c.","title":"Syntatic Sugars | C# Hidden Features"},{"content":"Think about Every Piece of the Picture When watching a video, we can only watch the direction of the camera. If the camera looks at the same thing for too long or is not looking at something the viewer wants to see, the viewer will get bored.\nSporting events on TV are usually captured with a dozen to dozens of different cameras-every few seconds moving to a different image. And each image focuses on new information. Each image has meaning, and the cuts between them provide a lot of information without boring the audience.\nEvery time you shoot a camera, think, who are we going to shoot? What are they doing? Is it interesting? If not, cut it out and find something else to shoot.\nDon\u0026rsquo;t keep the camera on non-stop. Even if you are going to edit it, this is a bad habit that will only waste your time because you will have to watch dozens of useless and unusable pieces of video.\nShoot When the Whites of the Subject\u0026rsquo;s Eyes Are Visible People communicate half of what they say with their mouths and the other half with their eyes. If we miss the eyes, we will miss half of the message.\nSubtle patterns on the face make up half the communication between people.\nOur videos instantly become 200 percent better if we stay close to the subject to clearly capture the whites of their eyes.\nAlways Take Pictures Under 10 Seconds in Length Short cuts are part of the modern movie language.\nA mix of different short videos has more information and feeling than if the video was shot continuously.\nZooming with Feet 10x zoom = 10x more shake.\nUse recording tools that help us overcome camera shake due to our hands. To prevent camera shake, we can attach a tripod or stabilizer-or make use of a flat plane around the location.\nTo get a good close-up, set the camera lens to a wide angle (aka no zoom at all). Physically walk up to the subject and take a picture.\nThings to remember about digital zoom:\nDon\u0026rsquo;t. Don\u0026rsquo;t ever use it.\nDon\u0026rsquo;t Move! Don\u0026rsquo;t Shake! And Don\u0026rsquo;t zoom During Shooting! Treat the video camera like a photographic camera.\nAim the lens. Keep your finger away from the zoom button. Look at the LCD screen to make sure the picture is good. And, press start.\nStop after getting the image, and repeat. The rhythm we follow is Move, Shoot, Record, Stop.\nArrange for Light to Come from Behind the Camera The camera gets confused when it has to deal with several different exposure levels in the same shot.\nMost video cameras will expose for the largest and brightest object in the frame.\nIf the light is in front of the camera, then the background of the subject will always be brighter. The subject we are filming will be dark.\nIf the light source stays behind the camera, the light will fall on the subjects. They will become the bright part of the frame. And we will be able to see them.\nDisable Camera Digital Effects If we take a nice, clean video, we can always add the effects we want later, using one of the many computer editing programs designed for that purpose.\nBut if we shoot a video directly with the camera\u0026rsquo;s built-in effects app, we can never get rid of them. Our video is stuck with that effect forever.\nFocus on What\u0026rsquo;s Really Interesting Every video gets better when we apply an organized principle, and it almost doesn\u0026rsquo;t matter what that principle is.\nShoot a concentration of the subject\u0026rsquo;s face, what they\u0026rsquo;re doing, the reaction of the audience, what the audience is seeing, and the mood of the location.\nFind something to focus on-a person or an interesting angle-and your video will instantly become more interesting.\nDon\u0026rsquo;t Use Amateurish Captions Don\u0026rsquo;t use captions unless it\u0026rsquo;s absolutely necessary.\nHere are some important tips to apply when using captions:\nKeep the text short and the words simple. Use a simple, easy-to-read font (sans-serif font category).\nDon\u0026rsquo;t let the text interfere with the important parts of the image and make sure it remains easy to read.\nPlace it at the top or bottom third of the screen.\nUse white letters on a black background or black on a light color-don\u0026rsquo;t add shadow, outline, underline, motion, or glow.\nDo not use vertical writing.\nUse white letters on a black background or black on a light color-do not add shadow, outline, underline, motion, or glow.\nDo not use vertical writing.\nIf the background of your image is half-bright so that the text is hard to read with black or white text colors, put a simple rectangular box behind the text.\nDisplay the text on the screen about one-tap longer than the time it takes you to read it out loud.\nLike everything else in the video, keep the text simple but elegant.\nKeep the Video Short Whatever is appropriate to say in a video should be said in a short way.\nTV commercials tell a complete story, entertain us, and sell us-all in 30 seconds.\nThe best way to make your video shorter is to intend for it to be short in the first place.\nWhen in doubt, cut it.\nUse an external microphone Most video cameras set their own sound levels. That means they take whatever they hear and amplify it to a constant, audible level.\nUnfortunately, if the camera hears noise around it, it will also turn it up. Traffic noise, sirens, and crowd noise-all are amplified.\nIf we get as close to the subject as possible, there will be fewer problems.\nTo make it no problem at all use a good clip on mic. Clip the clip on to the subject\u0026rsquo;s shirt, and this sound problem will be over.\nSource: Stockman, S. (2011). How to Shoot Video That Doesn’t Suck: Advice to Make Any Amateur Look Like a Pro. Workman Publishing.\n","permalink":"https://wewnumam.github.io/articles/12-easy-ways-to-make-videos-significantly-better/","summary":"Think about Every Piece of the Picture When watching a video, we can only watch the direction of the camera. If the camera looks at the same thing for too long or is not looking at something the viewer wants to see, the viewer will get bored.\nSporting events on TV are usually captured with a dozen to dozens of different cameras-every few seconds moving to a different image. And each image focuses on new information.","title":"12 Easy Ways to Make Videos Significantly Better"},{"content":"Opening Page The cover page contains information including:\nTitle. The title in the form of the words \u0026ldquo;Game Design Document\u0026rdquo; is needed to name the document so that at a glance people can imply what is meant in the document. Game Title. In the form of an attachment to the game name either in the form of a logo or any form that can be read. Genre and Game Mode. Contains information about the genre and game mode—such as online or offline mode, and single-player or multi-player mode—that will be used. Stakeholders. Includes the logo of the group, organization, and/or institution that oversees the game project. Copyright, Address, and Contact. Contains copyright information, year of production, name of the organization responsible, work address, and contact email address. Then the next page contains the table of contents of the document along with the page number.\nIntroduction The introduction contains a description of the problems that occurred and the reason why the game designer made this game. The background consists of three or more paragraphs.\nThe first paragraph contains a general description of the problem or phenomenon raised. Then the next paragraph contains a specific explanation of the problem that is still related to the description of the first paragraph. The last paragraph contains the reasons why this game needs to be made based on the existing problems.\nIdea of Creation (Problem Formulation) The problem formulation contains a list of questions that will be described in the design explanation. In general, the list of questions asks whether the parts or content in the game design will be able to solve the problem raised.\nObjectives and Benefits Objectives contain a statement about why the game designer is making this game. It generally summarizes the solution to the problem, or briefly offers this game as a solution to the problem.\nBenefits contain the expectations of the game designer to the player after playing the game created. Generally, it explains the impact or changes that want to be made with this game.\nPlatform Used This section describes the device that will be used to play this game. In general, this section describes the hardware and software specifications that players need to have.\nRequirements This section describes the production requirements for making this game. It generally contains a list of devices that will be used in production such as hardware specifications and applications used.\nGame References Game references contain reference sources or references from other games or other projects.\nThese references are categorized based on the existing content of the reference game. For example: story references, gameplay references, mechanic references, character design references, user interface references, font references, environment references, animation references, etc.\nExplanations accompanied by images and links will greatly help the team understand the desired intent.\nGame Design Process This section lists the details and explanations of all aspects of production, including:\nProduction Timeline. Contains a sequence of actions or activities that will be performed during production, organized by a defined schedule, and categorized by the responsibilities of each team member. Genre. Outlines details about the type of game and theme the game has. Also includes the reason why the game designer picked this genre. Storyline Tells the background of the events experienced by the character before the conflict in this game. Generally contains the introduction of the character and his environment as well as the challenges that need to be answered in the game. Gameplay. Describes the tactical aspects of the game, such as its plot and how to play it. Generally contains details of the patterns defined through the rules of the game, the relationship between the player and the game, the challenges and overcoming them, the plot and the player\u0026rsquo;s connection to it. Mechanics. Describes the system components that respond to the game to the player\u0026rsquo;s movements or actions. Generally described in the form of tables or diagrams. This section should be able to explain the purpose of the mechanic based on the mechanic name/type, interacting objects, active state, player input, and other descriptions. Level Design. Level design is also known as environment design or game mapping. Level design includes a sketch of the conceptual design of the level. It generally contains an attachment of the layout of objects in the game map along with a description of the events that will be triggered from player actions. User Interface (UI). User interface includes the design of UI pages and elements, space layout, typography usage, color selection, and style or theme selection. UI elements include input controls (button, text field, checkbox), navigation components (gamepad, slider, breadcrumb), information components (icon, message box, progress bar), and container (UI component wrapper). Character Design. Contains an attachment of the character along with a description of all the elements used. The character design should attach the character in various dimensions, states, and expressions. Game Assets. Contains a list of descriptions and attachments of visual assets or objects used in the game. Engine. Contains technical explanations related to the environment or configuration in the game engine. Generally contains a description of customized configurations, a list of modules used, methods and frameworks used, and other technical explanations that contain directions for game programmers. Sound Design. Contains a list of background music (BGM) and sound effects (SFX) along with a description of their type, type, or theme-and their condition in the game. Selling Point. Refers to the unique benefits of this game that allow it to stand out from competitors. Generally describes explicit claims of uniqueness that involve in game attributes and are objectively verifiable and have usability benefits. Credit Title This section lists the names of the team members and their duties in this project. Generally, each is responsible for one area including art, tech, or design.\n","permalink":"https://wewnumam.github.io/articles/game-design-document-format-for-academic-purposes/","summary":"Opening Page The cover page contains information including:\nTitle. The title in the form of the words \u0026ldquo;Game Design Document\u0026rdquo; is needed to name the document so that at a glance people can imply what is meant in the document. Game Title. In the form of an attachment to the game name either in the form of a logo or any form that can be read. Genre and Game Mode. Contains information about the genre and game mode—such as online or offline mode, and single-player or multi-player mode—that will be used.","title":"Game Design Document Format for Academic Purposes"},{"content":"Meaningful Variable Names Choosing good names takes time but saves more than it takes.\nIntention-Revealing Names The name should answer all big questions. It should tell you why it exists, what it does, and how it is used. If the name requires a comment, the name does not reveal the intent.\nlet d; // elapsed time in days We should choose the name that specifies what is being measured and the unit of that measurement:\nlet elapsedTimeInDays; let daysSinceCreation; let daysSinceModification; let fileAgeInDays; Example of code that is hard to understand because of using bad names:\nfunction getThem() { let list1 = []; for (let x in theList) if (x[0] == 4) list1.add(x); return list1; } The problem isn\u0026rsquo;t the simplicity of the code but the implicity of the code. The code doesn\u0026rsquo;t tell what kinds of things are in theList and what is the value of 4. Just by giving concepts names, we can improve the code considerably:\nfunction getFlaggedCells() { let flaggedCells = []; for (let cell in gameBoard) { if (cell[STATUS_VALUE] == FLAGGED) flaggedCells.add(cell); } return flaggedCells; } or in a functional way:\nfunction getFlaggedCells(gameBoard) { return gameBoard.filter(cell =\u0026gt; cell[STATUS_VALUE] === FLAGGED) } Example of Good and Bad Variable Names\nPurpose of Variable Good Names Bad Names Running total of checks written to date runningTotal, checkTotal written, ct, checks, CHKTTL, x, x1, x2 Velocity of a bullet velocity, trainVelocity, velocityMph velt, v, tv, train,x, x1, x2 Current date currentDate, todaysDate cd, current, c, x, x1, x2, date Lines per page linesPerPage lpp, lines, l, x, x1, x2 Optimum Name Length\nToo long To short Just Right numberOfPeopleOnTheUsOlympicTeam n, np, ntm numTeamMembers, teamMemberCount numberOfSeatsInTheStadium n, ns, nsisd numSeatsInStadium, seatCount maximumNumberOfPointsInModernOlympics m, mp, max, points maxTeamPoints, maxPoints Meaningful Distinctions Because you can\u0026rsquo;t use the same name to refer to two different things in the same scope, you might be tempted to change one name arbitrarily. It is not sufficient to add number series or noise words (redundant), even though the compiler or interpreter is satisfied.\nfunction copyChars(a1, a2) { for (let i = 0; i \u0026lt; a1.length; i++) { a2[i] = a1[i]; } } If names must be different, then they should also mean something different. Number-series {a1, a2, ... aN} is the opposite of intentional naming. Such names are not disinformative\u0026ndash;they are noninformative; they provide no clue to the author\u0026rsquo;s intention. Consider:\nfunction copyChars(source, target) { for (let i = 0; i \u0026lt; source.length; i++) { target[i] = source[i]; } } Use opposites precisely. Using naming conventions for opposites helps consistency, which helps readability.\nCommon Opposites in Variable Names\nbegin/end first/last locked/unlocked min/max next/previous old/new opened/closed visible/invisible source/target up/down Pronounceable Names If you can\u0026rsquo;t pronounce it, you can\u0026rsquo;t discuss it without sounding like an idiot. This matters because programming is a social activity. Compare:\n// ymdhms (date, year, month, day, hour) let genymdhms; let modymdhms; let pszqint = \u0026#34;102\u0026#34;; to\nlet generationTimestamp; let modificationTimestamp; let recordId = \u0026#34;102\u0026#34;; Searchable Names Single-letter names and numeric constants have a particular problem in that they are not easy to locate across a body of text. Single-letter names can ONLY be used as local variables inside short methods. The length of the name should correspond to the size of its scope. If a variable or constant might be seen or used in multiple places in a body of code, it is imperative to give it a search-friendly name. Compare:\nfor (let j = 0; j \u0026lt; 34; j++) { s += (t[j] * 4) / 5; } to\nlet realDaysPerIdealDay = 4; const WORK_DAYS_PER_WEEK = 5; let sum = 0; for (let j = 0; j \u0026lt; NUMBER_OF_TASK; j++) { let realTaskDays = taskEstimate[j] * realDaysPerIdealDay; let realTaskWeeks = realTaskDays / WORK_DAYS_PER_WEEK; sum += realTaskWeeks; } Naming Specific Types of Data Naming Loop Indexes\nThe names i, j, and k are customary, simple loop variable names:\nfor (let i = firstItem; i \u0026lt; lastItem; i++) { data[i] = 0; } If a variable is to be used outside the loop, it should be given a more meaningful name than i, j, k. For example, if you are reading records from a file and need to remember how many records you\u0026rsquo;ve read, a more meaningful name like recordCount would be appropriate:\nlet recordCount = 0 while (moreScore()) { score[recordCount] = getNextScore(); recordCount++; } One common reason loops grow is that they\u0026rsquo;re nested. If you have several nested loops, assign longer names to the top variables to improve readability.\nfor (teamIndex = 0; teamIndex \u0026lt; teamCount; teamIndex++) { for (eventIndex = 0; eventIndex \u0026lt; eventCount[teamIndex]; eventIndex++) { score[teamIndex][eventIndex] = 0; } } Carefully chosen names for loop-index variables avoid the common problem of index cross-talk. The simplest way to avoid such problems is simply to think of more descriptive names than i, j, k. The score[teamIndex][eventIndex] is more informative than score[i][j]\nNaming Status Variables Status variables describe the state of your program. It\u0026rsquo;s better to think of flags as status variables. Flags should be assigned values and their values should be tested with enumerated types, named constants, or global variables that act as named constants. Here are some examples of flags with bad names:\nif (flag) ... if (statusFlag == 0x0F) ... if (printFlag == 16) ... if (computeFlag == 0) ... flag = 0x1; statusFlag = 0x80; printFlag = 16 computeFlag = 0; Here are equivalent code example that are clearer:\nif (dataReady) ... if (charType \u0026amp; PRINTABLE_CHAR) ... if (reportType == reportTypeEnum.annual) ... if (recalcNeeded == true) ... dataReady = true; charType = CONTROL_CHARACTER; reportType = reportTypeEnum.annual recalcNeeded = false; Naming Temporary Variables\nTemporary variables are used to hold intermediate results of calculations, as temporary placeholders, and to hold housekeeping values. They\u0026rsquo;re usually called temp, x, or some other vague and nondescriptive name. In general, temporary variables are a sign that the programmer does not yet fully understand the problem. Moreover, because the variables are officially given temporary status, programmers tend to treat them more casually than other variables, increasing the chance of errors.\nlet temp = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + temp) / (2 * a); root[1] = (-b - temp) / (2 * a); The name temp doesn\u0026rsquo;t tell you anything about what the variable does. A better approach is shown in this example:\nlet disciminant = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + disciminant) / (2 * a); root[1] = (-b - disciminant) / (2 * a); Naming Boolean Variables\nUseful boolean variable names:\ndone error found success Give boolean variables names that imply true or false\nNames like done and success are good boolean names because the state is either true or false. Names like status and sourceFile, on the other hand, are poor boolean names because they\u0026rsquo;re not obviously true or false.\nFor better results, replace status with the name like error or statusOK, and replace sourceFile with sourceFileAvailable or sourceFileFound, or whatever the variable represents.\nSome programmers like to put Is in front of their boolean names. Then the variable name becomes question: isDone? isError? isFound? isProcessingComplete? Answering the question with true or false provides the value of the variable.\nUse positive boolean variable names\nNegative names like notFound, notDone, and notSuccessful are difficult to read when they are negated.\nNaming Enumerated Types\nconst daysEnum = Object.freeze({ monday: 0, tuesday: 1, wednesday: 2, thursday: 3, friday: 4, saturday: 5, sunday: 6 }); Taking this one step further, one could extract the logic into a function with a variable number of arguments and produce a frozen object. There is very little benefit to this technique, so a better alternative would be to create a simple class. After all, enums are more common in object-oriented programming languages, so this sounds like a great fit.\nNaming Constants When naming constants, name the abstract entity constant represents rather than the number the constant refers to. FIVE is a bad name for constant. FIVE = 6 would be ridiculous. CYCLES_NEEDED is a good name. By the same token, BAKERS_DOZEN is also a poor constant name; DONUT_MAX is a good constant name.\nGeneral Issues in Using Variable Disinformation Programmers must avoid leaving false clues that obscure the meaning of code. We should avoid words whose entrenched meanings vary from our intended meaning. Abbreviations could be disinformative.\nDo not refer to grouping accounts as an accountList unless it\u0026rsquo;s a List. The word list means something specific to programmers. If the container holding the accounts is not a List, it may lead to false conclusions. So accountGroup or just plain accounts would be better.\nA truly awful example of disinformative names would be the use of lower-case L and upper-case O as variable names, especially in combination. The problem, of course, is that they look almost entirely like constants one and zero, respectively.\nlet a = l; if (O == l) a = O1; else l = 01; Problem-Orientation\nA good name mnemonic name generally speaks to the problem rather than the solution. A good name is the what more than how. In general, if a name refers to some aspect of computing rather than to the problem, it\u0026rsquo;s a how rather than a what. Avoid such a name in favor of a name that refers to the problem itself.\nA record of employee data could be called inputRec or employeeData. inputRec is a computer term that refers to computing ideas\u0026ndash;input and record. employeeData refers to the problem domain rather than the computing universe. Similarly, for a bit field indicating printer status, bitFlag is a more computerish name than printerReady. In accounting application, calcVal is more computerish.\nEncodings We have enough encodings to deal with without adding more to our burden. Encoding type or scope information into names simply adds an extra burden of deciphering. It is an unnecessary mental burden when trying to solve a problem. Encoded names are seldom pronounceable and are easy to miss-type. An encoding system will mislead the reader.\nAdvice Avoid misleading names or abbreviations Avoid names with similar meanings Avoid variables with different meanings but similar names Avoid numerals in names Avoid misspelled words in names Don\u0026rsquo;t differentiate variable names solely by capitalization Avoid multiple natural languages Avoid the names of standard types, variables, and routines Don\u0026rsquo;t use a name that is unrelated to what the variable represents Avoid names containing hard-to-read characters Naming Conventions Why Have Convention?\nThey let you take more for granted. By making one global decision rather than many local ones, you can concentrate on the more important characteristics of code. They help you transfer knowledge across projects. Similarities names give you an easier and more confident understanding of what unfamiliar variables are supposed to do. They help you learn to code more quickly on a new project. They reduce name proliferation. Without naming conventions, you can easily call the same thing by two different names. For example, you might call total points both pointTotal and totalPoints. They compensate for language weaknesses. The convention can differentiate between local, class, and global data. They emphasize relationships among related items. When You Should Have a Naming Convention?\nWhen multiple programmers are working on a project When you plan to turn the program over to another programmer for modification and maintenance When your programs are reviewed by other programmers in your organization When your program is so large that you can\u0026rsquo;t hold the whole thing in your brain at once and must think about it in pieces When your program will be long-lived enough that you might put it aside for a few weeks or months before working on it again When you have a lot of unusual terms that are common on a project and want to have standard terms or abbreviations to use in coding You always benefit from having some kind of naming convention. The considerations above should help you determine the extent of the convention to be on the particular project.\nThe most important consideration in naming a variable is that the name fully and accurately describes the entity the variable represents.\nGood variable names are a key element of program readability.\nBibliography: Martin, R. C. (2009). Clean code: a handbook of agile software craftsmanship. Pearson Education. McConnell, S. (2004). Code complete. Pearson Education. Thanks to Julien Dephix, Ben Sinclair, and other advisors who have helped improve this article.\n","permalink":"https://wewnumam.github.io/articles/the-power-of-variable-names/","summary":"Meaningful Variable Names Choosing good names takes time but saves more than it takes.\nIntention-Revealing Names The name should answer all big questions. It should tell you why it exists, what it does, and how it is used. If the name requires a comment, the name does not reveal the intent.\nlet d; // elapsed time in days We should choose the name that specifies what is being measured and the unit of that measurement:","title":"The Power of Variable Names"},{"content":"Why is a game said to be a game?\nThe answer is because it fulfills the key qualities of a game.\nThere are at least 10 important quality keys in a game, according to Jesse Schell in his book The Art of Game Design.\nGames are played voluntarily (volunteer) There is no compulsion in playing a game. This means that the player has the control to freely join the game and leave the game.\nGame has goals (goals) A game should have a mission that is offered to the player. These missions are intended to give the player a purpose for playing.\nOn the other hand, there are also personal goals of the player, such as curiosity, social recognition, honing skills, and other forms of motivation.\nTherefore, we as designers need to facilitate the personal goals of the player. This can take the form of puzzles, scores, levels, special items, etc.\nGames have conflict (conflict) The measure of strength is judged by the conflict that the player can overcome in the game. This is the measure that distinguishes a player as a beginner or an expert. Conflicts can come from external or internal sources.\nThe form of conflict can be in the form of limitations designed in the game. Such as enemies or obstacles that hinder the player\u0026rsquo;s goal, or shortcomings that must be carried and faced by the player.\nGames have rules (rules) Rules are one of the defining aspects of a game. Rules shape the world created in the game. Rules help players to think, learn, and create strategies, finding their own steps to achieve goals.\nGames have winning and losing conditions (circumstance) Winning or losing conditions are a form of feedback or result of the player\u0026rsquo;s effort. It is intended to assess the ability demonstrated by the player in the game. This condition is used to create the effect of reality in the game.\nGames are interactive (interactive) Entities in the game interact with each other and provide feedback. Starting from the interaction between objects in the game, to the player interacting through the controller.\nIn a game, each object has a relationship with each other and has different behaviors when interacting. This cause-and-effect effect is what the player wants to explore, an experience that the player wants and seeks.\nGame has a challenge (challenge) Challenge is an advanced stage of conflict. Conflicts are structured to galvanize the player\u0026rsquo;s determination to achieve the game\u0026rsquo;s goals.\nA bad game has either too little challenge or too much challenge. Balance is a major concern in measuring and designing challenges. Designers need to design a game that is not boring while not overwhelming the player.\nGames create their own internal value (value) Everything in the game has value to the player. This value is created within the game and is valuable or useful in the game\u0026rsquo;s reality. Such as points, coins, ranks, and anything that a player or many other players want.\nGame engages the player (motivation) A game must mentally trigger the player\u0026rsquo;s engagement to play.\nMotivation comes from many aspects of the game but there are at least two important aspects that create player motivation. First, players are driven by curiosity. This is followed by the player\u0026rsquo;s desire to demonstrate and improve their abilities (skill).\nMotivation from other aspects can be analyzed based on player demographics and psychographics.\nGames are formal and closed systems (constraints) Simply put, games need to have clear boundaries and definitions in order for a game to have a comprehensible value and form. This is intended to set the balance in the game and maintain the feel of the game.\nInformation such as symbols, signs, maps, messages, feedback, and other conceptual models emphasize boundaries that help maintain game balance and form.\nThe most common principle used in the context of form and balance is to make games that are easy to learn but difficult to master.\nThe above quality keys define the meaning of a game.\nUse them as considerations in game design and as a checklist for playtesting.\nConclusion A game is a voluntary experience that contains at least the elements: goals, interactions, obstacles, and rules.\nSource:\nSchell, J. (2008). The Art of Game Design: A book of lenses. CRC press.\n","permalink":"https://wewnumam.github.io/articles/10-key-quality-of-games/","summary":"Why is a game said to be a game?\nThe answer is because it fulfills the key qualities of a game.\nThere are at least 10 important quality keys in a game, according to Jesse Schell in his book The Art of Game Design.\nGames are played voluntarily (volunteer) There is no compulsion in playing a game. This means that the player has the control to freely join the game and leave the game.","title":"The Basic Requirements of a Game"},{"content":" 📚 I love phylosophy.\n🧑‍💻 I\u0026rsquo;m presistent in software development.\n🏷 I create value from content and design.\n💻 People come to me for tech support.\n\u0026hellip;\nStill figuring out the intersection.\nCheck out my Linktree to know me more!\nNo bullshit quote. Just be clear about what we want need. ✌️\n","permalink":"https://wewnumam.github.io/about/","summary":"📚 I love phylosophy.\n🧑‍💻 I\u0026rsquo;m presistent in software development.\n🏷 I create value from content and design.\n💻 People come to me for tech support.\n\u0026hellip;\nStill figuring out the intersection.\nCheck out my Linktree to know me more!\nNo bullshit quote. Just be clear about what we want need. ✌️","title":"About Me"},{"content":" 🛠 Skills Board game and video game design. Graphic design: Logo. Print media: board game, poster, book cover, business card, packaging. Social media kit. Digital painting. Video production director. Video editor. 🕓 Experience Freelance Graphic Designer 🗓️ 2019 - PRESENT\nDesigned poster, book cover, packaging design, and social media kit. Participated in logo design contest at sribu.com. Tools used: Inkscape, GIMP. Results obtained: People liked the minimalist design that I made. Minimalist design is considered to give an elegant and modern impression. Messages that are packaged in a minimalist style are more easily captured by the audience. Fiverr - Logo Designer 🗓️ APRIL 2020 - SEPTEMBER 2021\nDesign minimalist logos for personal clients and startups. Provide logo design improvements according to client requests. Tools used: Inkscape. While the project was running, I gave advice and information about design principles to the client, so that the design used can match the needs and purpose of its use. Results obtained: I received positive feedback and 5-point reviews from all clients. 📚 Education STMM MMTC Yogyakarta (Game Technology) 🗓️ 2021 - PRESENT\nDesign board game print \u0026amp; play on itch.io. Building case study project: Group board game design: guidebook, cards, and tokens. Localized character design: Kebo Bule, Domba Priangan, Kodok Darah. Game Technology program mascot. Story book cover. SMKN 2 Surakarta (Software Engineering) 🗓️ 2018 - 2021\nCase study project: Designing business card. Director and editor of bakmie toprak cooking tutorial video. Director and editor video of statistics material for median sub-matter. Production director and editor scoutmaster profile video of SMKN 2 Surakarta. Results obtained: The video I designed helped deliver the scoutmaster of SMKN 2 Surakarta to become the outstanding scoutmaster of Prov. Central Java in 2020. 🔍 More icon platform description LinkedIn My LinkedIn profile. Fiverr My logo design service. Dribbble A collection of logos I made. ArtStation A collection of my artwork. Sarbini Damai YouTube channel that I design and operate. Ahmad Adillaumam A fully managed personal YouTube channel. 💬 Contact ✉️ Ngemplak, Boyolali, Central Java, Indonesia 57375 ✉️ Gamping, Sleman, Special Region of Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/ahmad-adillaumam-designer-resume/","summary":"🛠 Skills Board game and video game design. Graphic design: Logo. Print media: board game, poster, book cover, business card, packaging. Social media kit. Digital painting. Video production director. Video editor. 🕓 Experience Freelance Graphic Designer 🗓️ 2019 - PRESENT\nDesigned poster, book cover, packaging design, and social media kit. Participated in logo design contest at sribu.com. Tools used: Inkscape, GIMP. Results obtained: People liked the minimalist design that I made.","title":"Ahmad Adillaumam - Designer Resume"},{"content":" 🛠 Skills Video game development: Video game design. Game programming (Unity \u0026amp; HTML5). Web development: Front-End (HTML, CSS, Javascript) Back-End (Codeigniter, Laravel, NodeJS, Django). Database (MySQL, PostgreSQL). CMS (Wordpress, Hugo). Software modeling: Database design. API design and documentation. UI design. Management: Source code management. Program documentation. Project management. 🕓 Experience LKS Web Technology Prov. Central Java 🗓️ MARCH 2021\nSpeed test, building web features: CSS (responsive layout) Javascript (rgb color slider) PHP (captcha) Customizing Wordpress themes using CSS. Build a voting system using Laravel. Screen record video of the competition process here.\nSurakarta City Web Design LKS 🗓️ JANUARY 2021\nBuild a blog. Built using HTML, CSS, Javascript, Laravel, and MySQL. Defining the data schema is documented using the Laravel migration feature. This makes it easier for me to present my source code. 📚 Education STMM MMTC Yogyakarta (Game Technology) 🗓️ 2021 - PRESENT\nHIMA Gametech Research \u0026amp; Development Division: Building organization website landing page. Developing roadmap and learning resources for game developers. Building case study projects: Collection of college game projects. Voting system. SMKN 2 Surakarta (Software Engineering) 🗓️ 2018 - 2021\nBuilding case study project: Attendance system using QR code. Hospital information system. Covid-19 information service. Digital library service. 🔍 More icon platform description LinkedIn My LinkedIn profile. Github My source code repository and project activity. Itch.io A collection of games made by me. YouTube My content related to software and game development. 💬 Contact ✉️ Ngemplak, Boyolali, Central Java, Indonesia 57375 ✉️ Gamping, Sleman, Special Region of Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/ahmad-adillaumam-software-developer-resume/","summary":"🛠 Skills Video game development: Video game design. Game programming (Unity \u0026amp; HTML5). Web development: Front-End (HTML, CSS, Javascript) Back-End (Codeigniter, Laravel, NodeJS, Django). Database (MySQL, PostgreSQL). CMS (Wordpress, Hugo). Software modeling: Database design. API design and documentation. UI design. Management: Source code management. Program documentation. Project management. 🕓 Experience LKS Web Technology Prov. Central Java 🗓️ MARCH 2021\nSpeed test, building web features: CSS (responsive layout) Javascript (rgb color slider) PHP (captcha) Customizing Wordpress themes using CSS.","title":"Ahmad Adillaumam - Software Developer Resume"}]