[{"content":"Games serve many different purposes and can be enjoyed for a variety of reasons. Some people play games as a form of entertainment, to pass the time, or to socialize with friends and family. Others play games to challenge themselves or to improve their skills in a particular area. Still others play games as a way to relax and destress after a long day.\nPurposes for games in different contexts:\nEntertainment Games can be a source of entertainment, providing enjoyment and relaxation for players. They can be a fun way to pass the time and can be played alone or with others.\nEducation Games can be used as a tool for education, helping players learn new concepts or develop new skills. This can be done through educational games that are specifically designed for learning, or through games that incorporate educational elements in a more engaging and interactive way.\nAdvertising Games can be used as a way to advertise products or services. For example, a company might create a simple game that promotes their brand or product, which players can access and play for free.\nProductivity (Gamification) Gamification is the process of incorporating game-like elements into non-game activities in order to make them more engaging and motivating. This can be used to increase productivity and motivate people to complete tasks or achieve goals.\nBusiness Model Games can be developed as a business, with the goal of generating revenue through sales or in-game purchases. They can also be used as a way to promote a business or brand and gamification as a service, as mentioned above. Another business model is by licensing intelectual property and helding an event like tournament.\nArt Games can be considered a form of art, with designers and developers creating immersive and visually appealing worlds for players to explore. Games can also be used as a medium for artistic expression, allowing players to create and share their own creations.\nScience Games can be used in scientific research, such as in studies on human behavior or cognition. They can also be used to simulate real-world scenarios or test hypotheses in a controlled environment.\nTherapy Games can be used as a form of therapy, helping people to cope with stress, anxiety, or other mental health issues. They can also be used to help people with physical disabilities or injuries to improve their function and mobility.\nIn general, the purpose of a game is to provide enjoyment and engagement for the player. This can be achieved through competition, problem-solving, exploration, creativity, or a combination of these elements. Games can also serve educational purposes, helping players learn new concepts or develop new skills.\nUltimately, the purpose of a game depends on the individual player and their goals and motivations for playing. Some people may play games simply for fun, while others may be more focused on achieving specific goals or improving their performance.\nCredits:\nArticle quality improved by ChatGPT (2022).\n","permalink":"https://wewnumam.github.io/articles/the-purpose-of-games/","summary":"Games serve many different purposes and can be enjoyed for a variety of reasons. Some people play games as a form of entertainment, to pass the time, or to socialize with friends and family. Others play games to challenge themselves or to improve their skills in a particular area. Still others play games as a way to relax and destress after a long day.\nPurposes for games in different contexts:","title":"The Purpose of Games"},{"content":"Note:\nTo be able to use these features we need at least C# version 7 and above or Unity 2018 and above.\nTernary Operator In computer programming, the ternary conditional operator is a ternary operator that is part of the syntax for basic conditional expressions in several programming languages.It is commonly referred to as the conditional operator, ternary if, or inline if.\nAn expression a ? b : c evaluates to b if the value of a is true, and otherwise to c. One can read it aloud as \u0026ldquo;if a then b otherwise c\u0026rdquo;.\nNormal if statement:\nif (health \u0026gt; 0) { barColor = Color.red; } else { barColor = Color.black; } if statement using ternary operator:\nbarColor = health \u0026gt; 0 ? Color.red : Color.black; String Interpolation The special character $ identifies a string literal (unformatted string) as an interpolated string. An interpolated string is a literal string that may contain an interpolated expression.\nInterpolated strings provide a more readable and convenient syntax for formatting strings.\nstring name = \u0026#34;Groot\u0026#34;; float health = 100; float mana = 50; // operator \u0026#39;+\u0026#39; logMessage = \u0026#34;Unit \u0026#34; + name + \u0026#34;, health: \u0026#34; + health + \u0026#34;, mana: \u0026#34; + mana; // string.Format logMessage = string.Format(\u0026#34;Unit {0}, health: {1}, mana: {2}\u0026#34;, name, health, mana); // string interpolation logMessage = $\u0026#34;Unit {name}, health: {health}, mana: {mana}\u0026#34;; Expression Body Expression body definitions allow us to provide property implementations in a very concise and readable form.\nThe expression body definition has the following general syntax: member =\u0026gt; expression;\nNormal property:\nprivate float health, maxHealth; public float HealthPrencentage { get { return health / maxHealth; } set { health = value * maxHealth; } } Expression-body porperty:\nprivate float health, maxHealth; public float HealthPrencentage { get =\u0026gt; health / maxHealth; set =\u0026gt; health = value * maxHealth; } Expression-body read-only property:\npublic float HealthPrencentage =\u0026gt; health / maxHealth; \u0026amp;nbsp\nNormal method:\npublic float Percentage(float current, float max) { return current / max; } Expression-body method:\npublic float Percentage(float current, float max) =\u0026gt; current / max; Local Function Local functions are methods that are nested inside other methods. They can only be called from the method that contains them.\nLocal functions make the intent of our code clear. Anyone reading our code can see that this method cannot be called except by the method that contains it.\nNormal method:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); } private IEnumerator UpdateHealthBarCoroutine() { yield return null; } Local function:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); IEnumerator UpdateHealthBarCoroutine() { yield return null; } } Null Checking Simplifies a common coding pattern where a variable is assigned a value if it is null.\nCommon null checking:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { if (OnEnemyHit != null) OnEnemyHit.Invoke(other.gameObject); } Null checking operator:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { OnEnemyHit?.Invoke(other.gameObject); } Null Coalescing The null-coalescing operator ?? returns the value of its left-hand operand if it isn\u0026rsquo;t null; otherwise, it evaluates the right-hand operand and returns its result. The ?? operator doesn\u0026rsquo;t evaluate its right-hand operand if the left-hand operand evaluates to non-null.\npublic class GameManager : MonoBehaviour { private Player player; // using null comparison public Player GetPlayer() { if (player == null) return new Player(\u0026#34;Groot\u0026#34;); else return player; } // using null coalescing operator public Player GetPlayer() { return player ?? new Player(\u0026#34;Groot\u0026#34;); } } nameof Keyword A nameof expression produces the name of a variable, type, or member as the string constant. A nameof expression is evaluated at compile time and has no effect at run time.\npublic class Enemy { public string name; public flaot health; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.name}, health: {enemy.health}\u0026#34;); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;{nameof(Enemy.name)}: {enemy.name}, {nameof(Enemy.health)}: {enemy.health}\u0026#34;); In certain situations when we want to change the name of a variable, we don\u0026rsquo;t need to change the string we created manually.\npublic class Enemy { public string id; public flaot hp; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.id}, health: {enemy.hp}\u0026#34;); // will print -\u0026gt; id: Groot, hp: 100 Debug.Log($\u0026#34;{nameof(Enemy.id)}: {enemy.id}, {nameof(Enemy.hp)}: {enemy.hp}\u0026#34;); Source:\n","permalink":"https://wewnumam.github.io/articles/syntatic-sugars-csharp-hidden-features/","summary":"Note:\nTo be able to use these features we need at least C# version 7 and above or Unity 2018 and above.\nTernary Operator In computer programming, the ternary conditional operator is a ternary operator that is part of the syntax for basic conditional expressions in several programming languages.It is commonly referred to as the conditional operator, ternary if, or inline if.\nAn expression a ? b : c evaluates to b if the value of a is true, and otherwise to c.","title":"Syntatic Sugars | C# Hidden Features"},{"content":"Think about Every Piece of the Picture When watching a video, we can only watch the direction of the camera. If the camera looks at the same thing for too long or is not looking at something the viewer wants to see, the viewer will get bored.\nSporting events on TV are usually captured with a dozen to dozens of different cameras-every few seconds moving to a different image. And each image focuses on new information. Each image has meaning, and the cuts between them provide a lot of information without boring the audience.\nEvery time you shoot a camera, think, who are we going to shoot? What are they doing? Is it interesting? If not, cut it out and find something else to shoot.\nDon\u0026rsquo;t keep the camera on non-stop. Even if you are going to edit it, this is a bad habit that will only waste your time because you will have to watch dozens of useless and unusable pieces of video.\nShoot When the Whites of the Subject\u0026rsquo;s Eyes Are Visible People communicate half of what they say with their mouths and the other half with their eyes. If we miss the eyes, we will miss half of the message.\nSubtle patterns on the face make up half the communication between people.\nOur videos instantly become 200 percent better if we stay close to the subject to clearly capture the whites of their eyes.\nAlways Take Pictures Under 10 Seconds in Length Short cuts are part of the modern movie language.\nA mix of different short videos has more information and feeling than if the video was shot continuously.\nZooming with Feet 10x zoom = 10x more shake.\nUse recording tools that help us overcome camera shake due to our hands. To prevent camera shake, we can attach a tripod or stabilizer-or make use of a flat plane around the location.\nTo get a good close-up, set the camera lens to a wide angle (aka no zoom at all). Physically walk up to the subject and take a picture.\nThings to remember about digital zoom:\nDon\u0026rsquo;t. Don\u0026rsquo;t ever use it.\nDon\u0026rsquo;t Move! Don\u0026rsquo;t Shake! And Don\u0026rsquo;t zoom During Shooting! Treat the video camera like a photographic camera.\nAim the lens. Keep your finger away from the zoom button. Look at the LCD screen to make sure the picture is good. And, press start.\nStop after getting the image, and repeat. The rhythm we follow is Move, Shoot, Record, Stop.\nArrange for Light to Come from Behind the Camera The camera gets confused when it has to deal with several different exposure levels in the same shot.\nMost video cameras will expose for the largest and brightest object in the frame.\nIf the light is in front of the camera, then the background of the subject will always be brighter. The subject we are filming will be dark.\nIf the light source stays behind the camera, the light will fall on the subjects. They will become the bright part of the frame. And we will be able to see them.\nDisable Camera Digital Effects If we take a nice, clean video, we can always add the effects we want later, using one of the many computer editing programs designed for that purpose.\nBut if we shoot a video directly with the camera\u0026rsquo;s built-in effects app, we can never get rid of them. Our video is stuck with that effect forever.\nFocus on What\u0026rsquo;s Really Interesting Every video gets better when we apply an organized principle, and it almost doesn\u0026rsquo;t matter what that principle is.\nShoot a concentration of the subject\u0026rsquo;s face, what they\u0026rsquo;re doing, the reaction of the audience, what the audience is seeing, and the mood of the location.\nFind something to focus on-a person or an interesting angle-and your video will instantly become more interesting.\nDon\u0026rsquo;t Use Amateurish Captions Don\u0026rsquo;t use captions unless it\u0026rsquo;s absolutely necessary.\nHere are some important tips to apply when using captions:\nKeep the text short and the words simple. Use a simple, easy-to-read font (sans-serif font category).\nDon\u0026rsquo;t let the text interfere with the important parts of the image and make sure it remains easy to read.\nPlace it at the top or bottom third of the screen.\nUse white letters on a black background or black on a light color-don\u0026rsquo;t add shadow, outline, underline, motion, or glow.\nDo not use vertical writing.\nUse white letters on a black background or black on a light color-do not add shadow, outline, underline, motion, or glow.\nDo not use vertical writing.\nIf the background of your image is half-bright so that the text is hard to read with black or white text colors, put a simple rectangular box behind the text.\nDisplay the text on the screen about one-tap longer than the time it takes you to read it out loud.\nLike everything else in the video, keep the text simple but elegant.\nKeep the Video Short Whatever is appropriate to say in a video should be said in a short way.\nTV commercials tell a complete story, entertain us, and sell us-all in 30 seconds.\nThe best way to make your video shorter is to intend for it to be short in the first place.\nWhen in doubt, cut it.\nUse an external microphone Most video cameras set their own sound levels. That means they take whatever they hear and amplify it to a constant, audible level.\nUnfortunately, if the camera hears noise around it, it will also turn it up. Traffic noise, sirens, and crowd noise-all are amplified.\nIf we get as close to the subject as possible, there will be fewer problems.\nTo make it no problem at all use a good clip on mic. Clip the clip on to the subject\u0026rsquo;s shirt, and this sound problem will be over.\nSource: Stockman, S. (2011). How to Shoot Video That Doesn’t Suck: Advice to Make Any Amateur Look Like a Pro. Workman Publishing.\n","permalink":"https://wewnumam.github.io/articles/12-easy-ways-to-make-videos-significantly-better/","summary":"Think about Every Piece of the Picture When watching a video, we can only watch the direction of the camera. If the camera looks at the same thing for too long or is not looking at something the viewer wants to see, the viewer will get bored.\nSporting events on TV are usually captured with a dozen to dozens of different cameras-every few seconds moving to a different image. And each image focuses on new information.","title":"12 Easy Ways to Make Videos Significantly Better"},{"content":"Opening Page The cover page contains information including:\nTitle. The title in the form of the words \u0026ldquo;Game Design Document\u0026rdquo; is needed to name the document so that at a glance people can imply what is meant in the document. Game Title. In the form of an attachment to the game name either in the form of a logo or any form that can be read. Genre and Game Mode. Contains information about the genre and game mode—such as online or offline mode, and single-player or multi-player mode—that will be used. Stakeholders. Includes the logo of the group, organization, and/or institution that oversees the game project. Copyright, Address, and Contact. Contains copyright information, year of production, name of the organization responsible, work address, and contact email address. Then the next page contains the table of contents of the document along with the page number.\nIntroduction The introduction contains a description of the problems that occurred and the reason why the game designer made this game. The background consists of three or more paragraphs.\nThe first paragraph contains a general description of the problem or phenomenon raised. Then the next paragraph contains a specific explanation of the problem that is still related to the description of the first paragraph. The last paragraph contains the reasons why this game needs to be made based on the existing problems.\nIdea of Creation (Problem Formulation) The problem formulation contains a list of questions that will be described in the design explanation. In general, the list of questions asks whether the parts or content in the game design will be able to solve the problem raised.\nObjectives and Benefits Objectives contain a statement about why the game designer is making this game. It generally summarizes the solution to the problem, or briefly offers this game as a solution to the problem.\nBenefits contain the expectations of the game designer to the player after playing the game created. Generally, it explains the impact or changes that want to be made with this game.\nPlatform Used This section describes the device that will be used to play this game. In general, this section describes the hardware and software specifications that players need to have.\nRequirements This section describes the production requirements for making this game. It generally contains a list of devices that will be used in production such as hardware specifications and applications used.\nGame References Game references contain reference sources or references from other games or other projects.\nThese references are categorized based on the existing content of the reference game. For example: story references, gameplay references, mechanic references, character design references, user interface references, font references, environment references, animation references, etc.\nExplanations accompanied by images and links will greatly help the team understand the desired intent.\nGame Design Process This section lists the details and explanations of all aspects of production, including:\nProduction Timeline. Contains a sequence of actions or activities that will be performed during production, organized by a defined schedule, and categorized by the responsibilities of each team member. Genre. Outlines details about the type of game and theme the game has. Also includes the reason why the game designer picked this genre. Storyline Tells the background of the events experienced by the character before the conflict in this game. Generally contains the introduction of the character and his environment as well as the challenges that need to be answered in the game. Gameplay. Describes the tactical aspects of the game, such as its plot and how to play it. Generally contains details of the patterns defined through the rules of the game, the relationship between the player and the game, the challenges and overcoming them, the plot and the player\u0026rsquo;s connection to it. Mechanics. Describes the system components that respond to the game to the player\u0026rsquo;s movements or actions. Generally described in the form of tables or diagrams. This section should be able to explain the purpose of the mechanic based on the mechanic name/type, interacting objects, active state, player input, and other descriptions. Level Design. Level design is also known as environment design or game mapping. Level design includes a sketch of the conceptual design of the level. It generally contains an attachment of the layout of objects in the game map along with a description of the events that will be triggered from player actions. User Interface (UI). User interface includes the design of UI pages and elements, space layout, typography usage, color selection, and style or theme selection. UI elements include input controls (button, text field, checkbox), navigation components (gamepad, slider, breadcrumb), information components (icon, message box, progress bar), and container (UI component wrapper). Character Design. Contains an attachment of the character along with a description of all the elements used. The character design should attach the character in various dimensions, states, and expressions. Game Assets. Contains a list of descriptions and attachments of visual assets or objects used in the game. Engine. Contains technical explanations related to the environment or configuration in the game engine. Generally contains a description of customized configurations, a list of modules used, methods and frameworks used, and other technical explanations that contain directions for game programmers. Sound Design. Contains a list of background music (BGM) and sound effects (SFX) along with a description of their type, type, or theme-and their condition in the game. Selling Point. Refers to the unique benefits of this game that allow it to stand out from competitors. Generally describes explicit claims of uniqueness that involve in game attributes and are objectively verifiable and have usability benefits. Credit Title This section lists the names of the team members and their duties in this project. Generally, each is responsible for one area including art, tech, or design.\n","permalink":"https://wewnumam.github.io/articles/game-design-document-format-for-academic-purposes/","summary":"Opening Page The cover page contains information including:\nTitle. The title in the form of the words \u0026ldquo;Game Design Document\u0026rdquo; is needed to name the document so that at a glance people can imply what is meant in the document. Game Title. In the form of an attachment to the game name either in the form of a logo or any form that can be read. Genre and Game Mode. Contains information about the genre and game mode—such as online or offline mode, and single-player or multi-player mode—that will be used.","title":"Game Design Document Format for Academic Purposes"},{"content":"Meaningful Variable Names Choosing good names takes time but saves more than it takes.\nIntention-Revealing Names The name should answer all big questions. It should tell you why it exists, what it does, and how it is used. If the name requires a comment, the name does not reveal the intent.\nlet d; // elapsed time in days We should choose the name that specifies what is being measured and the unit of that measurement:\nlet elapsedTimeInDays; let daysSinceCreation; let daysSinceModification; let fileAgeInDays; Example of code that is hard to understand because of using bad names:\nfunction getThem() { let list1 = []; for (let x in theList) if (x[0] == 4) list1.add(x); return list1; } The problem isn\u0026rsquo;t the simplicity of the code but the implicity of the code. The code doesn\u0026rsquo;t tell what kinds of things are in theList and what is the value of 4. Just by giving concepts names, we can improve the code considerably:\nfunction getFlaggedCells() { let flaggedCells = []; for (let cell in gameBoard) { if (cell[STATUS_VALUE] == FLAGGED) flaggedCells.add(cell); } return flaggedCells; } or in a functional way:\nfunction getFlaggedCells(gameBoard) { return gameBoard.filter(cell =\u0026gt; cell[STATUS_VALUE] === FLAGGED) } Example of Good and Bad Variable Names\nPurpose of Variable Good Names Bad Names Running total of checks written to date runningTotal, checkTotal written, ct, checks, CHKTTL, x, x1, x2 Velocity of a bullet velocity, trainVelocity, velocityMph velt, v, tv, train,x, x1, x2 Current date currentDate, todaysDate cd, current, c, x, x1, x2, date Lines per page linesPerPage lpp, lines, l, x, x1, x2 Optimum Name Length\nToo long To short Just Right numberOfPeopleOnTheUsOlympicTeam n, np, ntm numTeamMembers, teamMemberCount numberOfSeatsInTheStadium n, ns, nsisd numSeatsInStadium, seatCount maximumNumberOfPointsInModernOlympics m, mp, max, points maxTeamPoints, maxPoints Meaningful Distinctions Because you can\u0026rsquo;t use the same name to refer to two different things in the same scope, you might be tempted to change one name arbitrarily. It is not sufficient to add number series or noise words (redundant), even though the compiler or interpreter is satisfied.\nfunction copyChars(a1, a2) { for (let i = 0; i \u0026lt; a1.length; i++) { a2[i] = a1[i]; } } If names must be different, then they should also mean something different. Number-series {a1, a2, ... aN} is the opposite of intentional naming. Such names are not disinformative\u0026ndash;they are noninformative; they provide no clue to the author\u0026rsquo;s intention. Consider:\nfunction copyChars(source, target) { for (let i = 0; i \u0026lt; source.length; i++) { target[i] = source[i]; } } Use opposites precisely. Using naming conventions for opposites helps consistency, which helps readability.\nCommon Opposites in Variable Names\nbegin/end first/last locked/unlocked min/max next/previous old/new opened/closed visible/invisible source/target up/down Pronounceable Names If you can\u0026rsquo;t pronounce it, you can\u0026rsquo;t discuss it without sounding like an idiot. This matters because programming is a social activity. Compare:\n// ymdhms (date, year, month, day, hour) let genymdhms; let modymdhms; let pszqint = \u0026#34;102\u0026#34;; to\nlet generationTimestamp; let modificationTimestamp; let recordId = \u0026#34;102\u0026#34;; Searchable Names Single-letter names and numeric constants have a particular problem in that they are not easy to locate across a body of text. Single-letter names can ONLY be used as local variables inside short methods. The length of the name should correspond to the size of its scope. If a variable or constant might be seen or used in multiple places in a body of code, it is imperative to give it a search-friendly name. Compare:\nfor (let j = 0; j \u0026lt; 34; j++) { s += (t[j] * 4) / 5; } to\nlet realDaysPerIdealDay = 4; const WORK_DAYS_PER_WEEK = 5; let sum = 0; for (let j = 0; j \u0026lt; NUMBER_OF_TASK; j++) { let realTaskDays = taskEstimate[j] * realDaysPerIdealDay; let realTaskWeeks = realTaskDays / WORK_DAYS_PER_WEEK; sum += realTaskWeeks; } Naming Specific Types of Data Naming Loop Indexes\nThe names i, j, and k are customary, simple loop variable names:\nfor (let i = firstItem; i \u0026lt; lastItem; i++) { data[i] = 0; } If a variable is to be used outside the loop, it should be given a more meaningful name than i, j, k. For example, if you are reading records from a file and need to remember how many records you\u0026rsquo;ve read, a more meaningful name like recordCount would be appropriate:\nlet recordCount = 0 while (moreScore()) { score[recordCount] = getNextScore(); recordCount++; } One common reason loops grow is that they\u0026rsquo;re nested. If you have several nested loops, assign longer names to the top variables to improve readability.\nfor (teamIndex = 0; teamIndex \u0026lt; teamCount; teamIndex++) { for (eventIndex = 0; eventIndex \u0026lt; eventCount[teamIndex]; eventIndex++) { score[teamIndex][eventIndex] = 0; } } Carefully chosen names for loop-index variables avoid the common problem of index cross-talk. The simplest way to avoid such problems is simply to think of more descriptive names than i, j, k. The score[teamIndex][eventIndex] is more informative than score[i][j]\nNaming Status Variables Status variables describe the state of your program. It\u0026rsquo;s better to think of flags as status variables. Flags should be assigned values and their values should be tested with enumerated types, named constants, or global variables that act as named constants. Here are some examples of flags with bad names:\nif (flag) ... if (statusFlag == 0x0F) ... if (printFlag == 16) ... if (computeFlag == 0) ... flag = 0x1; statusFlag = 0x80; printFlag = 16 computeFlag = 0; Here are equivalent code example that are clearer:\nif (dataReady) ... if (charType \u0026amp; PRINTABLE_CHAR) ... if (reportType == reportTypeEnum.annual) ... if (recalcNeeded == true) ... dataReady = true; charType = CONTROL_CHARACTER; reportType = reportTypeEnum.annual recalcNeeded = false; Naming Temporary Variables\nTemporary variables are used to hold intermediate results of calculations, as temporary placeholders, and to hold housekeeping values. They\u0026rsquo;re usually called temp, x, or some other vague and nondescriptive name. In general, temporary variables are a sign that the programmer does not yet fully understand the problem. Moreover, because the variables are officially given temporary status, programmers tend to treat them more casually than other variables, increasing the chance of errors.\nlet temp = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + temp) / (2 * a); root[1] = (-b - temp) / (2 * a); The name temp doesn\u0026rsquo;t tell you anything about what the variable does. A better approach is shown in this example:\nlet disciminant = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + disciminant) / (2 * a); root[1] = (-b - disciminant) / (2 * a); Naming Boolean Variables\nUseful boolean variable names:\ndone error found success Give boolean variables names that imply true or false\nNames like done and success are good boolean names because the state is either true or false. Names like status and sourceFile, on the other hand, are poor boolean names because they\u0026rsquo;re not obviously true or false.\nFor better results, replace status with the name like error or statusOK, and replace sourceFile with sourceFileAvailable or sourceFileFound, or whatever the variable represents.\nSome programmers like to put Is in front of their boolean names. Then the variable name becomes question: isDone? isError? isFound? isProcessingComplete? Answering the question with true or false provides the value of the variable.\nUse positive boolean variable names\nNegative names like notFound, notDone, and notSuccessful are difficult to read when they are negated.\nNaming Enumerated Types\nconst daysEnum = Object.freeze({ monday: 0, tuesday: 1, wednesday: 2, thursday: 3, friday: 4, saturday: 5, sunday: 6 }); Taking this one step further, one could extract the logic into a function with a variable number of arguments and produce a frozen object. There is very little benefit to this technique, so a better alternative would be to create a simple class. After all, enums are more common in object-oriented programming languages, so this sounds like a great fit.\nNaming Constants When naming constants, name the abstract entity constant represents rather than the number the constant refers to. FIVE is a bad name for constant. FIVE = 6 would be ridiculous. CYCLES_NEEDED is a good name. By the same token, BAKERS_DOZEN is also a poor constant name; DONUT_MAX is a good constant name.\nGeneral Issues in Using Variable Disinformation Programmers must avoid leaving false clues that obscure the meaning of code. We should avoid words whose entrenched meanings vary from our intended meaning. Abbreviations could be disinformative.\nDo not refer to grouping accounts as an accountList unless it\u0026rsquo;s a List. The word list means something specific to programmers. If the container holding the accounts is not a List, it may lead to false conclusions. So accountGroup or just plain accounts would be better.\nA truly awful example of disinformative names would be the use of lower-case L and upper-case O as variable names, especially in combination. The problem, of course, is that they look almost entirely like constants one and zero, respectively.\nlet a = l; if (O == l) a = O1; else l = 01; Problem-Orientation\nA good name mnemonic name generally speaks to the problem rather than the solution. A good name is the what more than how. In general, if a name refers to some aspect of computing rather than to the problem, it\u0026rsquo;s a how rather than a what. Avoid such a name in favor of a name that refers to the problem itself.\nA record of employee data could be called inputRec or employeeData. inputRec is a computer term that refers to computing ideas\u0026ndash;input and record. employeeData refers to the problem domain rather than the computing universe. Similarly, for a bit field indicating printer status, bitFlag is a more computerish name than printerReady. In accounting application, calcVal is more computerish.\nEncodings We have enough encodings to deal with without adding more to our burden. Encoding type or scope information into names simply adds an extra burden of deciphering. It is an unnecessary mental burden when trying to solve a problem. Encoded names are seldom pronounceable and are easy to miss-type. An encoding system will mislead the reader.\nAdvice Avoid misleading names or abbreviations Avoid names with similar meanings Avoid variables with different meanings but similar names Avoid numerals in names Avoid misspelled words in names Don\u0026rsquo;t differentiate variable names solely by capitalization Avoid multiple natural languages Avoid the names of standard types, variables, and routines Don\u0026rsquo;t use a name that is unrelated to what the variable represents Avoid names containing hard-to-read characters Naming Conventions Why Have Convention?\nThey let you take more for granted. By making one global decision rather than many local ones, you can concentrate on the more important characteristics of code. They help you transfer knowledge across projects. Similarities names give you an easier and more confident understanding of what unfamiliar variables are supposed to do. They help you learn to code more quickly on a new project. They reduce name proliferation. Without naming conventions, you can easily call the same thing by two different names. For example, you might call total points both pointTotal and totalPoints. They compensate for language weaknesses. The convention can differentiate between local, class, and global data. They emphasize relationships among related items. When You Should Have a Naming Convention?\nWhen multiple programmers are working on a project When you plan to turn the program over to another programmer for modification and maintenance When your programs are reviewed by other programmers in your organization When your program is so large that you can\u0026rsquo;t hold the whole thing in your brain at once and must think about it in pieces When your program will be long-lived enough that you might put it aside for a few weeks or months before working on it again When you have a lot of unusual terms that are common on a project and want to have standard terms or abbreviations to use in coding You always benefit from having some kind of naming convention. The considerations above should help you determine the extent of the convention to be on the particular project.\nThe most important consideration in naming a variable is that the name fully and accurately describes the entity the variable represents.\nGood variable names are a key element of program readability.\nBibliography: Martin, R. C. (2009). Clean code: a handbook of agile software craftsmanship. Pearson Education. McConnell, S. (2004). Code complete. Pearson Education. Thanks to Julien Dephix, Ben Sinclair, and other advisors who have helped improve this article.\n","permalink":"https://wewnumam.github.io/articles/the-power-of-variable-names/","summary":"Meaningful Variable Names Choosing good names takes time but saves more than it takes.\nIntention-Revealing Names The name should answer all big questions. It should tell you why it exists, what it does, and how it is used. If the name requires a comment, the name does not reveal the intent.\nlet d; // elapsed time in days We should choose the name that specifies what is being measured and the unit of that measurement:","title":"The Power of Variable Names"},{"content":"Why is a game said to be a game?\nThe answer is because it fulfills the key qualities of a game.\nThere are at least 10 important quality keys in a game, according to Jesse Schell in his book The Art of Game Design.\nGames are played voluntarily (volunteer) There is no compulsion in playing a game. This means that the player has the control to freely join the game and leave the game.\nGame has goals (goals) A game should have a mission that is offered to the player. These missions are intended to give the player a purpose for playing.\nOn the other hand, there are also personal goals of the player, such as curiosity, social recognition, honing skills, and other forms of motivation.\nTherefore, we as designers need to facilitate the personal goals of the player. This can take the form of puzzles, scores, levels, special items, etc.\nGames have conflict (conflict) The measure of strength is judged by the conflict that the player can overcome in the game. This is the measure that distinguishes a player as a beginner or an expert. Conflicts can come from external or internal sources.\nThe form of conflict can be in the form of limitations designed in the game. Such as enemies or obstacles that hinder the player\u0026rsquo;s goal, or shortcomings that must be carried and faced by the player.\nGames have rules (rules) Rules are one of the defining aspects of a game. Rules shape the world created in the game. Rules help players to think, learn, and create strategies, finding their own steps to achieve goals.\nGames have winning and losing conditions (circumstance) Winning or losing conditions are a form of feedback or result of the player\u0026rsquo;s effort. It is intended to assess the ability demonstrated by the player in the game. This condition is used to create the effect of reality in the game.\nGames are interactive (interactive) Entities in the game interact with each other and provide feedback. Starting from the interaction between objects in the game, to the player interacting through the controller.\nIn a game, each object has a relationship with each other and has different behaviors when interacting. This cause-and-effect effect is what the player wants to explore, an experience that the player wants and seeks.\nGame has a challenge (challenge) Challenge is an advanced stage of conflict. Conflicts are structured to galvanize the player\u0026rsquo;s determination to achieve the game\u0026rsquo;s goals.\nA bad game has either too little challenge or too much challenge. Balance is a major concern in measuring and designing challenges. Designers need to design a game that is not boring while not overwhelming the player.\nGames create their own internal value (value) Everything in the game has value to the player. This value is created within the game and is valuable or useful in the game\u0026rsquo;s reality. Such as points, coins, ranks, and anything that a player or many other players want.\nGame engages the player (motivation) A game must mentally trigger the player\u0026rsquo;s engagement to play.\nMotivation comes from many aspects of the game but there are at least two important aspects that create player motivation. First, players are driven by curiosity. This is followed by the player\u0026rsquo;s desire to demonstrate and improve their abilities (skill).\nMotivation from other aspects can be analyzed based on player demographics and psychographics.\nGames are formal and closed systems (constraints) Simply put, games need to have clear boundaries and definitions in order for a game to have a comprehensible value and form. This is intended to set the balance in the game and maintain the feel of the game.\nInformation such as symbols, signs, maps, messages, feedback, and other conceptual models emphasize boundaries that help maintain game balance and form.\nThe most common principle used in the context of form and balance is to make games that are easy to learn but difficult to master.\nThe above quality keys define the meaning of a game.\nUse them as considerations in game design and as a checklist for playtesting.\nConclusion A game is a voluntary experience that contains at least the elements: goals, interactions, obstacles, and rules.\nSource:\nSchell, J. (2008). The Art of Game Design: A book of lenses. CRC press.\n","permalink":"https://wewnumam.github.io/articles/10-key-quality-of-games/","summary":"Why is a game said to be a game?\nThe answer is because it fulfills the key qualities of a game.\nThere are at least 10 important quality keys in a game, according to Jesse Schell in his book The Art of Game Design.\nGames are played voluntarily (volunteer) There is no compulsion in playing a game. This means that the player has the control to freely join the game and leave the game.","title":"The Basic Requirements of a Game"},{"content":" 📚 I love phylosophy.\n🧑‍💻 I\u0026rsquo;m presistent in software development.\n🏷 I create value from content and design.\n💻 People come to me for tech support.\n\u0026hellip;\nStill figuring out the intersection.\nCheck out my Linktree to know me more!\nNo bullshit quote. Just be clear about what we want need. ✌️\n","permalink":"https://wewnumam.github.io/about/","summary":"📚 I love phylosophy.\n🧑‍💻 I\u0026rsquo;m presistent in software development.\n🏷 I create value from content and design.\n💻 People come to me for tech support.\n\u0026hellip;\nStill figuring out the intersection.\nCheck out my Linktree to know me more!\nNo bullshit quote. Just be clear about what we want need. ✌️","title":"About Me"},{"content":" 🛠 Skills Board game and video game design. Graphic design: Logo. Print media: board game, poster, book cover, business card, packaging. Social media kit. Digital painting. Video production director. Video editor. 🕓 Experience Freelance Graphic Designer 🗓️ 2019 - PRESENT\nDesigned poster, book cover, packaging design, and social media kit. Participated in logo design contest at sribu.com. Tools used: Inkscape, GIMP. Results obtained: People liked the minimalist design that I made. Minimalist design is considered to give an elegant and modern impression. Messages that are packaged in a minimalist style are more easily captured by the audience. Fiverr - Logo Designer 🗓️ APRIL 2020 - SEPTEMBER 2021\nDesign minimalist logos for personal clients and startups. Provide logo design improvements according to client requests. Tools used: Inkscape. While the project was running, I gave advice and information about design principles to the client, so that the design used can match the needs and purpose of its use. Results obtained: I received positive feedback and 5-point reviews from all clients. 📚 Education STMM MMTC Yogyakarta (Game Technology) 🗓️ 2021 - PRESENT\nDesign board game print \u0026amp; play on itch.io. Building case study project: Group board game design: guidebook, cards, and tokens. Localized character design: Kebo Bule, Domba Priangan, Kodok Darah. Game Technology program mascot. Story book cover. SMKN 2 Surakarta (Software Engineering) 🗓️ 2018 - 2021\nCase study project: Designing business card. Director and editor of bakmie toprak cooking tutorial video. Director and editor video of statistics material for median sub-matter. Production director and editor scoutmaster profile video of SMKN 2 Surakarta. Results obtained: The video I designed helped deliver the scoutmaster of SMKN 2 Surakarta to become the outstanding scoutmaster of Prov. Central Java in 2020. 🔍 More icon platform description LinkedIn My LinkedIn profile. Fiverr My logo design service. Dribbble A collection of logos I made. ArtStation A collection of my artwork. Sarbini Damai YouTube channel that I design and operate. Ahmad Adillaumam A fully managed personal YouTube channel. 💬 Contact ✉️ Ngemplak, Boyolali, Central Java, Indonesia 57375 ✉️ Gamping, Sleman, Special Region of Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/ahmad-adillaumam-designer-resume/","summary":"🛠 Skills Board game and video game design. Graphic design: Logo. Print media: board game, poster, book cover, business card, packaging. Social media kit. Digital painting. Video production director. Video editor. 🕓 Experience Freelance Graphic Designer 🗓️ 2019 - PRESENT\nDesigned poster, book cover, packaging design, and social media kit. Participated in logo design contest at sribu.com. Tools used: Inkscape, GIMP. Results obtained: People liked the minimalist design that I made.","title":"Ahmad Adillaumam - Designer Resume"},{"content":" 🛠 Skills Video game development: Video game design. Game programming (Unity \u0026amp; HTML5). Web development: Front-End (HTML, CSS, Javascript) Back-End (Codeigniter, Laravel, NodeJS, Django). Database (MySQL, PostgreSQL). CMS (Wordpress, Hugo). Software modeling: Database design. API design and documentation. UI design. Management: Source code management. Program documentation. Project management. 🕓 Experience LKS Web Technology Prov. Central Java 🗓️ MARCH 2021\nSpeed test, building web features: CSS (responsive layout) Javascript (rgb color slider) PHP (captcha) Customizing Wordpress themes using CSS. Build a voting system using Laravel. Screen record video of the competition process here.\nSurakarta City Web Design LKS 🗓️ JANUARY 2021\nBuild a blog. Built using HTML, CSS, Javascript, Laravel, and MySQL. Defining the data schema is documented using the Laravel migration feature. This makes it easier for me to present my source code. 📚 Education STMM MMTC Yogyakarta (Game Technology) 🗓️ 2021 - PRESENT\nHIMA Gametech Research \u0026amp; Development Division: Building organization website landing page. Developing roadmap and learning resources for game developers. Building case study projects: Collection of college game projects. Voting system. SMKN 2 Surakarta (Software Engineering) 🗓️ 2018 - 2021\nBuilding case study project: Attendance system using QR code. Hospital information system. Covid-19 information service. Digital library service. 🔍 More icon platform description LinkedIn My LinkedIn profile. Github My source code repository and project activity. Itch.io A collection of games made by me. YouTube My content related to software and game development. 💬 Contact ✉️ Ngemplak, Boyolali, Central Java, Indonesia 57375 ✉️ Gamping, Sleman, Special Region of Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/ahmad-adillaumam-software-developer-resume/","summary":"🛠 Skills Video game development: Video game design. Game programming (Unity \u0026amp; HTML5). Web development: Front-End (HTML, CSS, Javascript) Back-End (Codeigniter, Laravel, NodeJS, Django). Database (MySQL, PostgreSQL). CMS (Wordpress, Hugo). Software modeling: Database design. API design and documentation. UI design. Management: Source code management. Program documentation. Project management. 🕓 Experience LKS Web Technology Prov. Central Java 🗓️ MARCH 2021\nSpeed test, building web features: CSS (responsive layout) Javascript (rgb color slider) PHP (captcha) Customizing Wordpress themes using CSS.","title":"Ahmad Adillaumam - Software Developer Resume"}]