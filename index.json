[{"content":"Introduction It is common for programmers to create software without careful preparation. This sometimes makes the software difficult to maintain and develop when it has already been made. Therefore, before making a large software, one of the things that must be done is to choose the architecture that will be used. In choosing a software architecture, we must understand its advantages and disadvantages, so that it helps in the creation of the software to be carried out. Software Architecture Patterns Architecture Patterns are a collection of architectural styles in software development. There are many Architecture Patterns, and each pattern has its own advantages and disadvantages. In Architecture Patterns there is no right and wrong, but whether it fits or not. Programmers need to know about this material so that they can determine what pattern to use when creating software. Purpose of Architecture Patterns Each Architecture Pattern has characteristics such as easy to develop, scalable and easy to maintain. The hope is that by using the right Architecture Pattern when making software, the results of the software we make will be easy to develop in the future. Architecture Classification Software Architecture Patterns are broadly divided into two classifications, Monolithic and Distribute. Monolithic is a single deployment unit or runs in one application. Distributed is multiple deployment units, usually consisting of several applications. Monolithic Architectures Monolithic Architecture is generally very simple compared to Distributed Architecture. Monolithic application design is simpler and easier to implement. Applications that use Monolithic Architecture will be very fast to build and distribute. Distributed Architecture Distributed Architecture usually consists of several applications working simultaneously, in contrast to Monolithic applications which are only one application. Usually in Distributed Architecture, each application unit is called a Service. Distributed Architecture development is more complex than Monolithic Architecture, but offers advantages such as fault tolerance, for example when one service fails, other services can still run normally. Which one to choose? When making applications, sometimes we are confused about whether to use Monolithic or Distributed architecture? If the application we are going to create is simple or still unclear in terms of business requirements, it is highly recommended to use Monolithic, because it is easy to create. But if the application we are going to make is very clear, and also requires good scalability, including good fault tolerance, then we can use Distributed architecture. Architecture Partitioning In addition to the classification of monolithic or distributed, software architecture can also be seen in its partition structure. Software architecture, be it monolithic or distributed, can be partitioned based on technical or domain. Partitioning by structure can be used in monolithic or distributed. Technical Partitioning Technical Partitioning architecture divides the components in the system or application technically. An example of a classic architecture that is often used is Layered (N-Tier) Architecture. In Technical Partitioning, the components in the system are grouped technically, for example : Presentation Layer is the component that handles the user interface. Business Layer, a component that handles business logic and rules. Persistence Layer, a component that handles interaction with the database system. Database Layer, a component for storing data. Domain Partitioning In contrast to Technical Partitioning, in Domain Partitioning, the division of the component structure in the system is grouped based on the Domain / Feature / Department in business. This means that all Technical Partitioning such as Presentation, Business Logic, Persistence, are combined in the system domain. Domain-based system partitioning has been popular since it was introduced in a book titled “Domain Driven Design” by Eric Evans. Which one to choose? Both Technical and Domain Partitioning have advantages and disadvantages, but personally I recommend using: Technical Partitioning when the application to be created is simple and not complex, and also when the number of development team members is not too large. Domain Partitioning when the application to be created is complex and there are many application features. And it is suitable when the development team members are many team divisions based on the type of domain. Layered Architecture Layered Architecture is also known as N -Tier Architecture. This architecture is one of the standard architectures for most applications, where applications are divided technically. Because this architecture is very widely known by software developers, it makes this architecture one of the most widely used choices. Components of Layered Architecture Layered Architecture is technically divided, therefore the components in Layered Architecture are the same as Technical Partition. On average, many divide into 4 layers, Presentation Layer, Business Layer, Persistence Layer and Database Layer. However, it is possible to have more layers when the application is very complex. Tasks of each layer Each layer in Layered Architecture has its own tasks. The Presentation Layer is responsible for handling all user interfaces. The Business Layer is responsible for executing the request logic or business rules that match the request. The Persistence Layer is responsible for interacting with the database to perform data processing in the database. Database Layer is responsible for storing all application data. Layers of Isolation In Layered Architecture, each layer is isolated, and the direction of communication is only with the layer below or above it. That is, for example, when the Presentation Layer wants to retrieve Product data, the Presentation Layer will send a request to the Business Layer, then it will retrieve the data to the Persistence Layer and then enter the Database Layer. It is not recommended to directly access from the Presentation Layer directly to the Database Layer. Example After knowing how Layered Architecture works, we can easily describe the flow that must be made when creating an application. For example, we want to display the Product page, but in the Product page we also want to display the Seller data. Then we can create an application flow as in the next diagram. Considerations Layered Architecture is one of the most widely understood and used architectures. Use Layered Architecture if we are still confused about what architecture to use, because this is a good architecture to start the application. But don\u0026rsquo;t use Layered Architecture when the division of teams in the company is based on domains, it is more suitable to use Distributed Architecture which we will discuss in the next materials. Model-View-Controller Architecture Model View Controller (MVC) Architecture is one of the most popular architectures when creating the Web. MVC is similar to Layered Architecture, only the layers are different. In MVC, the center of interaction between layers is usually done by the Controller. Tasks of Each Layer In MVC, each layer has its own tasks. Controller is the layer responsible for receiving requests and executing the logic and business rules that occur in the application. Model is the layer responsible for representing the data in the database and also interacting with the database. View is a layer that contains templates for displaying web pages. Database is a layer for storing application data. Example Suppose we have a web where there is one web page that needs to display wishlist data. On that page, in addition to the wishlist data, we also have to display the product details contained in the wishlist.\nConsiderations MVC is the first choice when we want to create a web application. Many web frameworks automatically use this architecture such as Laravel, NestJS, Rails, Django, and others. But when we create a RESTful API for example, we are not obliged to follow the MVC rules, because usually we don\u0026rsquo;t need a View layer. In this case, we can just combine this MVC architecture with Layered Architecture. Hexagonal Architecture One of the problems when using Layered Architecture is that changes in the type of technology used, will complicate development. For example, when we have to change the database technology used, there will automatically be a major overhaul of the Persistence Layer and Database Layer program code, which may cause an overhaul of the Business Layer as well. Hexagonal Architecture is an architecture developed from Layered Architecture, but better when handling technological changes that occur. Hexagonal Architecture is also known as Port \u0026amp; Adapter Architecture. Ports and Adapters Hexagonal Architecture was actually introduced under the name Pert \u0026amp; Adapter Architecture, but is currently more popular as Hexagonal Architecture. Port is a technology-agnostic OOP (Object Oriented Programming) Interface, which is used by application code to communicate with other parties. An Adapter is the part that interacts directly through the Port, and uses a predefined technology. Application Layer In Hexagonal Architecture, the Application Layer will contain business logic and rules, where the code created will interact only with the Port, without knowing which Adapter is used. This is to be technology agnostic, so that when the Adapter is changed, the Application Layer does not need to change. In addition, within the Application Layer, there is a Domain Layer, which contains a representation of the application domain data. The Driving part, usually called User Interface/Transport Layer/Gateway, is the source of incoming requests to the application. The Driven part, usually called Infrastructure/Data Source/External Interfaces, is the target of data leaving the application. Clean Architecture Nowadays, Clean Architecture is also famous. Don\u0026rsquo;t be confused if you have to choose Hexagonal Architecture or Clean Architecture. Actually Clean Architecture is not much different from Hexagonal Architecture, even the author of the Clean Architecture book has explained that one of the Clean Architecture references is from Hexagonal Architecture. Example Suppose we have an online store Web application, where we will create a payment page. Where when making a payment data besides being stored in the database, it will be sent to the Payment Gateway. Considerations Hexagonal Architecture is a good architecture to use when we are going to create complex applications and so that the application is technology agnostic so that it can be easily replaced. However, developing Hexagonal Architecture is not as easy as Layered Architecture, so if the developer is not familiar with Hexagonal Architecture, it can be constrained during the development process. Microkernel Architecture Microkernel Architecture is very flexible and extensible, so developers can easily add features to applications in the form of extensions or plug-ins, without fear of disrupting the functionality of the application itself. Therefore, Microkernel Architecture is also often referred to as Plug-in Architecture. Microkernel Architecture is widely used in desktop-based applications, for example Visual Studio, Eclipse, and others, where there are many extensions or plug-ins available for these applications. Topology In Microkernel Architecture, there are only two layers, Core System and Plugin Modules. Application logic in Microkernel Architecture is usually placed in Plugins, so this architecture looks like Hexagonal Architecture, but it is not. In Hexagonal Architecture, application logic is placed in the application, while in Microkernel Architecture, application logic details are in each respective Plugin. Considerations Microkernel Architecture is very popular when creating plugin-based Desktop applications, such as Visual Studio, Eclipse, IntelliJ IDEA Ghkan like Browser. Use Microkernel Architecture if we really want to create a Plugin-based application. One of the advantages of Microkernel Architecture is that other people can contribute to creating Plugins for our applications. Client-Server Architecture Client-Server Architecture is one of the Distributed System Architectures that is widely known and used. This architecture is very simple, where there are Client and Server applications that interact with each other. Usually communication between Client and Server uses a TCP/IP network, although it is possible to use other networks such as UDP. Topology Client is an application used by users and interacts directly with users, Usually Client applications are applications based on user interfaces, be it Web, Desktop or Terminal-based, Client will send all requests requested by the user to the Server application Server is the core of the application, where all logic and business rules are carried out on the Server, Server will execute commands requested by the Client, and return the requested data to the Client The advantage of using Client-Server Architecture is that we can run many Client type applications using only one Server application Example Client-Server Architecture is an architecture that is currently widely used, maybe even unconsciously, we have used this architecture. When we create a Mobile application and then connect to the RESTful API, it is actually a Client-Server Architecture. Considerations When we want to create an application, which wants to separate the Client application, or even create many types of Client applications, then the Client-Server architecture is very suitable for use. However, if we want to create a standalone application, do not need to store data on the Server, then we do not need to create a Client-Server application, for example an editor application for Photos, Videos and the like. Master-Slave Architecture Master-Slave Architecture is an architecture where applications can distribute all their work to other applications. The application that commands the application is called the Master, and the application that receives the command is called the Slave. Just like the Client-Server Architecture, usually the Master and Slave communication uses a TCP/IP network. Topology Usually, all requests to the application will go through the Master application. All work received by the Master will usually be distributed to the Slave application. That way, work can be faster because it can be done by many Slave applications. In the diagram, we only create 3 Slave applications, but in reality, there is no limit to the number of Slave applications. Fault Tolerance One of the advantages of Master-Slave Architecture is Fault Tolerance, where when an error occurs that causes one of the Slave applications to die, the work can still be done by other Slave applications. Likewise, when a problem occurs that causes the Master application to die, one of the Slaves will automatically be promoted to become the new Master. Master-Master Architecture One of the disadvantages of Master-Slave Architecture is that all requests must go through the Master application, so when there is a delay in the Master application, all users will automatically feel the impact, even though the Slave application may not be slow. In such cases, there is also Master-Master Architecture, which is an improvement on Master-Slave Architecture. What distinguishes Master-Master Architecture is that all applications can run as Master, so they can receive requests from users independently And because all applications are Master, each application can send requests to other applications, when for example the application has handled too many requests from users. Replication What needs to be remembered in Master-Slave/Master-Master Architecture, usually data in the application is always replicated/duplicated to all Slaves/Masters. This is so that the data is always the same, so that the work done by all Slave/Master applications will always be consistent. Example Master-Slave/Master-Master Architecture should not be used when creating information system applications, this architecture is often used when we create stateful applications! (storing data) such as database systems. Almost most database system applications such as MySQL, PostgreSQL, MongoDB implement the Master-Slave Architecture Or like the Elasticsearch and Cassandra database system applications, which use the Master-Master Architecture. Considerations Use the Master-Slave/Master-Master architecture when we want to create a stateful application! (save data) If we create a stateless application (do not store data), then it is recommended not to use this architecture. Peer-to-Peer Architecture Peer-to-Peer Architecture is an architecture that is almost similar to Client-Server Architecture. However, in Peer-to-Peer, all applications can be Clients and Servers simultaneously. Usually the application logic will be centralized in the Server application, in Peer-to-Peer, the application logic is not centralized in one application, all applications can be Servers and Clients at the same time. Topology In Peer-to-Peer Architecture it seems simple, but in fact this architecture is very complex. Each Peer can be a Client that makes requests to other Peers, or even become a Server at the same time by sending responses to other Peers. Therefore, creating a Peer-to-Peer Architecture application is very complex because each Peer must know when there is a new Peer, because in reality new Peers can come and go at any time. vs Master-Master Architecture What is the difference between Peer-to-Peer Architecture and Master-Master Architecture? In Peer-to-Peer, each Peer can be a Client or Server. While in Master-Master, each Master is a Server, usually the Client is a separate application and connected to the Master-Master with a Client-Server architecture. Example Peer-to-Peer is widely used for file sharing applications such as Torrent, for example, where everyone can share files, while requesting files from other Peers in their Torrent network. In addition, Peer-to-Peer is also often used in Cryptocurrency where all data is distributed across all Peer applications to keep data safe because to change data, we have to change all data in all Peers, and that is very difficult to do. Considerations Peer-to-Peer Architecture may look very attractive, but this is a type of architecture that is rarely used, except in types of applications that require decentralized logic. Peer-to-Peer Architecture is also a very scalable architecture, because it is difficult for system failures to occur because all logic is distributed across all Peers The disadvantage is, because we cannot be the quality of resources in each Peer, so, it is likely that the quality and speed of the application cannot be maintained properly, especially if the Peer runs on hardware with insufficient resources. Microservices Architecture Microservices Architecture is a type of architecture that is currently widely used by many people. However, this architecture is not a simple type of architecture, it is a complex type of architecture. In Microservices Architectures, the system will be created in a number of small applications or called Services, and used to complete certain specific tasks only. In addition, in this architecture, each Service will be deployed and run independently In this architecture, it is not strange if a system has hundreds or even thousands of independent Services, this is because each Service does have its own task. Topology Usually in Microservices Architecture, each Service will run independently and have its own database, not sharing the database with other Services. Usually, each Service will not be exposed openly to users, but users will go through the API Gateway, which is an application that acts as a gateway to receive requests and forward them to the intended Service. Because each Service has its own tasks, it is not uncommon for the databases used to be different, this is because usually the Service will use a database that is in accordance with the tasks that must be done. Bounded Context As previously explained, each Service will have and manage its own database. This means that the database and table can only be accessed by the Service For example, when we have a Service that is used to manage Seller data, then the Seller Service can only manage the Seller data. This concept is called Bounded Context, which was introduced by Eric Evans in the Domain-Driven Design book. Communication Between Services With Bounded Context, it means that no one can access the Seller database directly from another Service except the Seller Service. If there is another Service that requires Seller data, then the other Service must request Seller data from Seller Service, using a predetermined communication method, for example RESTful API (Client-Server Architecture). Example On the online store web page, we want to display detailed Product data. However, on the Product detail data page, in addition to Product information, we also want to display data from the Seller who sells the Product. In this case, we can take Product data to Product Service, then Product Service requests Seller data from Seller Service. Supporters To use Microservices Architecture usually does not only involve the programmer team.\nThere are many things that must be changed such as infrastructure and product/business teams.\nThis is because usually in Microservice Architecture, the division of Services will be done based on the business domain, so it is not easy to create small applications.\nIn some cases, errors in creating Service types can complicate the development team, therefore Domain Experts or those who are experts in their fields in terms of business are needed.\nConsiderations Microservice Architecture is usually used in large companies with large development teams, this is because this architecture requires a lot of work other than application creation, such as infrastructure, automation, deployment and others. Do not use this architecture if the team is still small, we can start with Monolith Architecture and Layered Architecture, if it is time to need rapid team scaling, we can consider using Microservices Architecture. Event-Driven Architecture Microservices Architecture Problems With the increasing use of Microservices Architecture, finally there is one problem that is often experienced by users of this architecture, namely the dependency between Services. For example, in the previous case, when the Seller Service has a problem, for example it dies, then we cannot see the Product data, this is because the Product Service needs to call the Seller Service when it wants to display Product data. Event-Driven Architecture Event-Driven Architecture is an architecture that uses Async Process to communicate with each other between Services. Usually, in this architecture, the Service will send every data change that occurs in the Service to an application called Message Broker in the form of Event data. We call the sender of Event data Producer/Publisher. The service that needs its Event data will take the data from the Message Broker. We call the recipient of Event data Consumer/Listener. Duplicate Data As we already know, in Microservices Architecture there is a Bounded Context rule, where data can only be accessed by the Service itself. In the case of Event-Driven Architecture, because we will not call Sync to Other Services (such as using API Call), then usually the Service will consume event data and duplicate the data needed in the Service database. In the previous case, for example, the Product Service will consume Seller Event data, then save the Seller data to the Product database as duplicate data. Considerations Event-Driven Architecture is currently widely used, because of the problems that occur in Microservices Architecture, but it should be noted, there are also consequences that occur when we use Async Process. In the previous case, we must ensure that the Seller Event data is received properly by the Product Service, if it fails automatically the Seller data will not be in the Product database. Async Process will also cause the process to be delayed, therefore sometimes users do not receive results in real time, because the Async Process has not finished When a problem occurs in the Async Process, searching for problems is more difficult than the Sync Process in the Microservices architecture. Pipeline Architecture Pipeline Architecture is an architecture that is closely related to Data Stream. In some cases, sometimes we encounter data sources that come in non-stop, for example user activity log data. In cases like this, storing data in a database will be very difficult to process, because incoming data is usually in large quantities and continuously. Pipeline Architecture is an architecture where we utilize Message Queue like Message Broker as a place for data flow, and we can focus on creating Filters to process the data. Topology In Pipeline Architecture, the main focus is the Filter process for messages. There is no rule for the Filter process whether it must be in the same or different applications, so there is no right or wrong. Filters are usually processes that are carried out from receiving input data, processing data, and ending with producing output data. Cloud Function This Pipeline Architecture is now very popular in Cloud Providers such as Google Cloud or Amazon Web Service. These Cloud Providers now have features for Cloud Function, which can be used as Filters in Pipeline Architecture. One of the advantages of using Cloud Function, we only need to pay when the Filter processes data. Data Pipeline Pipeline Architecture is also often used in data processing, or often known as Data Pipeline. In Data Pipeline, there is usually a Source (data source), Destination (final destination of data), and also Processing (data processing). Example We want to create a report on the number of daily visitors to our website, where in the report, we can see the number of visitors based on the country of the visitor In this case we can use Pipeline Architecture. Starting from every visit data to our website, we will send it as an event to the Message Broker, then we will create a filter, from a filter to detect the IP address, a filter to get the country based on the IP, and a filter to group by country. Considerations Pipeline Architecture is a very suitable architecture when we want to do very long and gradual processing. Pipeline Architecture can take a very long time to process, depending on how long the Filter is, therefore it is not suitable for doing work that requires real time. Space-Based Architecture Triangle-Shaped In certain cases, there are types of applications that usually have unexpected visitor traffic, such as flash sale websites, ticket sales or bidding. The architectures that we discussed earlier, we can actually use to create these types of applications, but in certain cases, sometimes we end up getting triangle-shaped problems. Triangle-Shaped Topology Triangle-Shaped Topology is a condition where we do scalability by increasing the number of applications when there is a slowdown in our system. In cases when we create a website, increasing the number of web servers is usually very easy, because it only provides a website user interface, then usually the slowdown will move to the Backend server, for example in the RESTful API. Next, we will usually add the number of RESTful API servers, but not as many as Web Servers, because usually the application is heavier and requires more resources, then the slowness will move to the Database. In cases like this, adding servers to the database is not easy, not as flexible as Web Servers and RESTful APIs, because the database is a stateful application (storing data). Space-Based Architecture Space-Based Architecture is an architecture specifically designed for cases like this, where we need good scalability and performance for the application.\nSpace-Based Architecture solves this problem by removing the database from the application transaction process and replacing it with shared memory (Data Grid).\nHigh Scalability is achieved by connecting all applications to shared memory (Data Grid) synchronously, and asynchronously the data in shared memory will be synced to the database,\nTopology In Spaced-Based Architecture, the application we create is called a Processing Unit. In the Processing Unit, there is our application logic and also contains the In Memory Data Grid which is used as a replacement for the Database. Usually there is a Data Replication Engine which is used to synchronize all data in the In Memory Data Grid for all Processing units assisted by the Data Grid Cluster. If we want, we can async save the changes that occur in the In Memory Data Grid to the Database. Data Grid Example Usually Data Grid does not need to be created manually by application developers, just like the Database, we can use the Data Grid application that is already available, for example. Hazelcast. Apache Ignite. Oracle Coherence. And others. Considerations Spaced-Based Architecture is a very complex solution to achieve excellent scalability. However, although this solution is very good, sometimes this solution is not the best, we must see many considerations when using this architecture. For example, if our data is too large, it will be difficult to use this architecture, because all data must be moved to memory, which certainly requires a very large cost. Because of the complexity and high cost of this solution, we must also consider the costs that must be incurred to use this architecture. Conclusion Software Architecture Patterns are not a rigid solution where we have to choose one. We can combine several Patterns that suit our needs. For example, we can combine Microservices and Event-Driven, or Monolith with Layered, Microservices with Layered, and so on. Other Software Architecture Patterns This class does not discuss all existing Software Architecture Patterns, only those that are often used. Technology, especially in Software Design, is always evolving over time, in the early 2000s not many people used Microservices, but now almost all large companies use them. There are still many patterns that have not been discussed, and can be studied independently, such as: Onion Architecture, Screaming Architecture, Event-Bus Architecture, and many others. Source: ","permalink":"https://wewnumam.github.io/articles/software-architecture-patterns/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eIt is common for programmers to create software without careful preparation.\u003c/li\u003e\n\u003cli\u003eThis sometimes makes the software difficult to maintain and develop when it has already been made.\u003c/li\u003e\n\u003cli\u003eTherefore, before making a large software, one of the things that must be done is to choose the architecture that will be used.\u003c/li\u003e\n\u003cli\u003eIn choosing a software architecture, we must understand its advantages and disadvantages, so that it helps in the creation of the software to be carried out.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"software-architecture-patterns\"\u003eSoftware Architecture Patterns\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eArchitecture Patterns are a collection of architectural styles in software development.\u003c/li\u003e\n\u003cli\u003eThere are many Architecture Patterns, and each pattern has its own advantages and disadvantages. In Architecture Patterns there is no right and wrong, but whether it fits or not.\u003c/li\u003e\n\u003cli\u003eProgrammers need to know about this material so that they can determine what pattern to use when creating software.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"purpose-of-architecture-patterns\"\u003ePurpose of Architecture Patterns\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEach Architecture Pattern has characteristics such as easy to develop, scalable and easy to maintain.\u003c/li\u003e\n\u003cli\u003eThe hope is that by using the right Architecture Pattern when making software, the results of the software we make will be easy to develop in the future.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"architecture-classification\"\u003eArchitecture Classification\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eSoftware Architecture Patterns are broadly divided into two classifications, Monolithic and Distribute.\u003c/li\u003e\n\u003cli\u003eMonolithic is a single deployment unit or runs in one application.\u003c/li\u003e\n\u003cli\u003eDistributed is multiple deployment units, usually consisting of several applications.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"monolithic-architectures\"\u003eMonolithic Architectures\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eMonolithic Architecture is generally very simple compared to Distributed Architecture.\u003c/li\u003e\n\u003cli\u003eMonolithic application design is simpler and easier to implement.\u003c/li\u003e\n\u003cli\u003eApplications that use Monolithic Architecture will be very fast to build and distribute.\n\u003cimg alt=\"Monolithic Architectures\" loading=\"lazy\" src=\"https://i.imgur.com/YQkdFLv.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"distributed-architecture\"\u003eDistributed Architecture\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDistributed Architecture usually consists of several applications working simultaneously, in contrast to Monolithic applications which are only one application.\u003c/li\u003e\n\u003cli\u003eUsually in Distributed Architecture, each application unit is called a Service.\u003c/li\u003e\n\u003cli\u003eDistributed Architecture development is more complex than Monolithic Architecture, but offers advantages such as fault tolerance, for example when one service fails, other services can still run normally.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"Distributed Architecture\" loading=\"lazy\" src=\"https://i.imgur.com/CAHCQzg.png\"\u003e\u003c/p\u003e","title":"Software Architecture Patterns"},{"content":"CollegeCompendium.org A nonprofit aiming to improve access to high-quality educational computer science resources for intellectually curious people across the world.\nHow To Audit Courses What is Learning? \u0026ldquo;The activity or process of gaining new knowledge or skills by studying, practicing, being taught, or experiencing something\u0026rdquo; ~Merriam Webster\nLearning Through Institutions Structured Sequential Compulsory Experiential Other forms of education, such as home-schooling, also share several of these qualities. Autodidactic Learning You determine the topic you study, the source you learn from, and when you learn it. Flexible Non-Sequential Other Incentives Independent Self-proclaimed \u0026ldquo;unlettered man.\u0026rdquo; Less than 3 years of formal schooling. Partly taught himself how to code. Learning on the Internet. Ask Yourself\u0026hellip; What do I want to learn? Why do I want to learn it? When do I want to learn it? Are there prerequisites? Are these resources accurate and trustworthy? Learning on the Web Once you \u0026ldquo;learn\u0026rdquo; how to learn on the web, you can achieve anything! The ability to learn on the web is among the most valuable skills you can have. What Does It Mean to \u0026lsquo;Audit\u0026rsquo;? What is Auditing a Course? Access to lectures/notes. No grade/credit. No assignment feedback. Often remote. Usually inexpensive or free. History of Auditing Structured Customizable - MIT Open Course Ware.\n- Coursera.\n- College Compendium. - YouTube.\n- Khan Academy.\n- Sololearn. Why Should You Audit Courses? Bridging Formal Education with Self-Guided Learning Formal + Self-Guided = Auditing Structured curriculum. Often produced by accredited institutions. Flexible and customizable content selection. Public and free! Use Case #1 : You\u0026rsquo;re Considering Applying to a Program Explore a department and their faculty. See the types of instruction. Discover if areas covered match your interests. Use Case #2: You\u0026rsquo;re Already an Enrolled Student Supplement your current courses with relevant material. Explore academic interests at low cost without risking grades. Potentially take courses not offered at your school. Use Case #3: You\u0026rsquo;re Looking to Upskill/Change Careers Explore new subjects and career areas. Build context for necessary competence for career change. Stay competitive within your job or industry. Use Case #4: You\u0026rsquo;re Looking to Freshen Up On a Topic Pick up former skills. Build experience with new frameworks/models. Develop a more advanced understanding of previously familiar topics. Use Case #5: You\u0026rsquo;re Just Intellectually Curious! Pick up a language/framework for an upcoming interview. Gain practical experience through project-based courses. Prepare for an upcoming class on a certain topic. How to Choose the Right Topic Assess Your Interests What fascinates you? Is there anything you want to create that requires knowledge on a topic? How excited are you to spend your free time learning about this topic? Assess Your Skill Level How much do you know about your chosen topic? Have you had formal exposure to or instruction on this topic in the past? Assess Your Goals Why did you choose this topic? Are you aiming to build a project or pass an interview? What specifically about your chosen topic do you want to use or better understand? Insight Ensure your topic aligns with your goals. Popular topics: python, algorithms, data structures. Experiment before committing! How to Choose the Right Course What\u0026rsquo;s your learning style? How do you prefer to learn? Visual: Do you prefer to learn with graphical depictions such as charts/images? Auditory: Do you prefer to learn when listening to others present, such as in lectures? Kinesthetic: Do you prefer to learn through creating hands-on projects? Reading/Writing: Do you prefer to learn by completing worksheets, notes, or flashcards? What\u0026rsquo;s Your Time Commitment? How depth the course? How much content \u0026amp; assignment they offer? Experiment before committing! Adjust with your schedule and goals. Where Do You Want To Learn From? Which institution and how the content being deliver? Trustworthy institution. Tutor style. Examining Courses Course description. Syllabus (outline of course). Prerequisites. Explore course pages. Sample courses. How Do You Define Success? Know what the course offers before you dive in! Is it match with your goals? Track your progress! Making the Most of Your Audit Set realistic schedules. Evaluate how you can work a course audit into your schedule. Be organized! Make an actionable plan and stick to it as best you can. Set a reasonable schedule for yourself. Be consistent! Ensure you are studying at the pace you set for yourself. Re-evaluate if issues arise. Be studious! Review material frequently! Stay disciplined and try to avoid multitasking while learning. Be motivated! Set short-term goals and reward yourself when you achieve them! Be persistent! It\u0026rsquo;s impossible to \u0026ldquo;fail\u0026rdquo; when you\u0026rsquo;re in charge! If you\u0026rsquo;re struggling with something, take your time. Be accountable! Find someone to ask you about the course, or put yourself into a position to be asked about your progress. Don\u0026rsquo;t code alone! Obtaining help. Ask for help at Stack Overflow, GitHub Forums, or a programming community Discord server. Speeding through courses. Move at a pace where you\u0026rsquo;re confident in your understanding of the material. Textbooks. Sites like FreeCodeCamp and College Compendium provide ways to find free textbooks. Complementary Learning. Additional Enrichment. Dive into the details with academic papers from sites like PapersWithCode. Common Pitfalls Time mismanagement. Setting enough time aside for your audit can be difficult. Consistently re-adjust your schedule as needed. Getting distracted. Many students lose energy or interest. TV, social media, and more can also take up valuable time. Not engaging with other learners. Take advantage of other means of social learning online! Ways To Confirm Your Knowledge Quiz yourself; Flashcards - Quizlet, Brainscape, Anki. Have others quiz you; Join an online community. Try and apply the knowledge in some way; Build a project. Next Steps Consider auditing courses sequentially to build on previous concepts. Consider mixing and matching courses from various sources. Prioritize foundational math. Calculus, Statistics, Linear Algebra, Discrete Math. There\u0026rsquo;s always more to learn! Source: ","permalink":"https://wewnumam.github.io/articles/learn-from-free-college-cs-courses/","summary":"\u003ch1 id=\"collegecompendiumorg\"\u003eCollegeCompendium.org\u003c/h1\u003e\n\u003cp\u003eA nonprofit aiming to improve access to high-quality educational computer science resources for intellectually curious people across the world.\u003c/p\u003e\n\u003ch1 id=\"how-to-audit-courses\"\u003eHow To Audit Courses\u003c/h1\u003e\n\u003ch2 id=\"what-is-learning\"\u003eWhat is Learning?\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;The activity or process of gaining new knowledge or skills by studying, practicing, being taught, or experiencing something\u0026rdquo; ~Merriam Webster\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"learning-through-institutions\"\u003eLearning Through Institutions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eStructured\u003c/li\u003e\n\u003cli\u003eSequential\u003c/li\u003e\n\u003cli\u003eCompulsory\u003c/li\u003e\n\u003cli\u003eExperiential\n\u003cem\u003eOther forms of education, such as home-schooling, also share several of these qualities\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"autodidactic-learning\"\u003eAutodidactic Learning\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eYou determine the topic you study, the source you learn from, and when you learn it.\n\u003col\u003e\n\u003cli\u003eFlexible\u003c/li\u003e\n\u003cli\u003eNon-Sequential\u003c/li\u003e\n\u003cli\u003eOther Incentives\u003c/li\u003e\n\u003cli\u003eIndependent\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eSelf-proclaimed \u0026ldquo;unlettered man.\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eLess than 3 years of formal schooling.\u003c/li\u003e\n\u003cli\u003ePartly taught himself how to code.\u003c/li\u003e\n\u003cli\u003eLearning on the Internet.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ask-yourself\"\u003eAsk Yourself\u0026hellip;\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWhat do I want to learn?\u003c/li\u003e\n\u003cli\u003eWhy do I want to learn it?\u003c/li\u003e\n\u003cli\u003eWhen do I want to learn it?\u003c/li\u003e\n\u003cli\u003eAre there prerequisites?\u003c/li\u003e\n\u003cli\u003eAre these resources accurate and trustworthy?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"learning-on-the-web\"\u003eLearning on the Web\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOnce you \u0026ldquo;learn\u0026rdquo; how to learn on the web, you can achieve anything!\u003c/li\u003e\n\u003cli\u003eThe ability to learn on the web is among the most valuable skills you can have.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"what-does-it-mean-to-audit\"\u003eWhat Does It Mean to \u0026lsquo;Audit\u0026rsquo;?\u003c/h1\u003e\n\u003ch2 id=\"what-is-auditing-a-course\"\u003eWhat is Auditing a Course?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAccess to lectures/notes.\u003c/li\u003e\n\u003cli\u003eNo grade/credit.\u003c/li\u003e\n\u003cli\u003eNo assignment feedback.\u003c/li\u003e\n\u003cli\u003eOften remote.\u003c/li\u003e\n\u003cli\u003eUsually inexpensive or free.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"history-of-auditing\"\u003eHistory of Auditing\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eStructured\u003c/th\u003e\n          \u003cth\u003eCustomizable\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e- MIT Open Course Ware.\u003cbr\u003e- Coursera.\u003cbr\u003e- College Compendium.\u003c/td\u003e\n          \u003ctd\u003e- YouTube.\u003cbr\u003e- Khan Academy.\u003cbr\u003e- Sololearn.\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"why-should-you-audit-courses\"\u003eWhy Should You Audit Courses?\u003c/h1\u003e\n\u003ch2 id=\"bridging-formal-education-with-self-guided-learning\"\u003eBridging Formal Education with Self-Guided Learning\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eFormal + Self-Guided = Auditing\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eStructured curriculum.\u003c/li\u003e\n\u003cli\u003eOften produced by accredited institutions.\u003c/li\u003e\n\u003cli\u003eFlexible and customizable content selection.\u003c/li\u003e\n\u003cli\u003ePublic and free!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"use-case-1--youre-considering-applying-to-a-program\"\u003eUse Case #1 : You\u0026rsquo;re Considering Applying to a Program\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eExplore a department and their faculty.\u003c/li\u003e\n\u003cli\u003eSee the types of instruction.\u003c/li\u003e\n\u003cli\u003eDiscover if areas covered match your interests.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"use-case-2-youre-already-an-enrolled-student\"\u003eUse Case #2: You\u0026rsquo;re Already an Enrolled Student\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSupplement your current courses with relevant material.\u003c/li\u003e\n\u003cli\u003eExplore academic interests at low cost without risking grades.\u003c/li\u003e\n\u003cli\u003ePotentially take courses not offered at your school.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"use-case-3-youre-looking-to-upskillchange-careers\"\u003eUse Case #3: You\u0026rsquo;re Looking to Upskill/Change Careers\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eExplore new subjects and career areas.\u003c/li\u003e\n\u003cli\u003eBuild context for necessary competence for career change.\u003c/li\u003e\n\u003cli\u003eStay competitive within your job or industry.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"use-case-4-youre-looking-to-freshen-up-on-a-topic\"\u003eUse Case #4: You\u0026rsquo;re Looking to Freshen Up On a Topic\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePick up former skills.\u003c/li\u003e\n\u003cli\u003eBuild experience with new frameworks/models.\u003c/li\u003e\n\u003cli\u003eDevelop a more advanced understanding of previously familiar topics.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"use-case-5-youre-just-intellectually-curious\"\u003eUse Case #5: You\u0026rsquo;re Just Intellectually Curious!\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePick up a language/framework for an upcoming interview.\u003c/li\u003e\n\u003cli\u003eGain practical experience through project-based courses.\u003c/li\u003e\n\u003cli\u003ePrepare for an upcoming class on a certain topic.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"how-to-choose-the-right-topic\"\u003eHow to Choose the Right Topic\u003c/h1\u003e\n\u003ch2 id=\"assess-your-interests\"\u003eAssess Your Interests\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWhat fascinates you?\u003c/li\u003e\n\u003cli\u003eIs there anything you want to create that requires knowledge on a topic?\u003c/li\u003e\n\u003cli\u003eHow excited are you to spend your free time learning about this topic?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"assess-your-skill-level\"\u003eAssess Your Skill Level\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHow much do you know about your chosen topic?\u003c/li\u003e\n\u003cli\u003eHave you had formal exposure to or instruction on this topic in the past?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"assess-your-goals\"\u003eAssess Your Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWhy did you choose this topic?\u003c/li\u003e\n\u003cli\u003eAre you aiming to build a project or pass an interview?\u003c/li\u003e\n\u003cli\u003eWhat specifically about your chosen topic do you want to use or better understand?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"insight\"\u003eInsight\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEnsure your topic aligns with your goals.\u003c/li\u003e\n\u003cli\u003ePopular topics: python, algorithms, data structures.\u003c/li\u003e\n\u003cli\u003eExperiment before committing!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"how-to-choose-the-right-course\"\u003eHow to Choose the Right Course\u003c/h1\u003e\n\u003ch2 id=\"whats-your-learning-style\"\u003eWhat\u0026rsquo;s your learning style?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHow do you prefer to learn?\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eVisual\u003c/em\u003e: Do you prefer to learn with graphical depictions such as charts/images?\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eAuditory\u003c/em\u003e: Do you prefer to learn when listening to others present, such as in lectures?\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eKinesthetic\u003c/em\u003e: Do you prefer to learn through creating hands-on projects?\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eReading/Writing\u003c/em\u003e: Do you prefer to learn by completing worksheets, notes, or flashcards?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"whats-your-time-commitment\"\u003eWhat\u0026rsquo;s Your Time Commitment?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHow depth the course?\u003c/li\u003e\n\u003cli\u003eHow much content \u0026amp; assignment they offer?\u003c/li\u003e\n\u003cli\u003eExperiment before committing!\u003c/li\u003e\n\u003cli\u003eAdjust with your schedule and goals.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"where-do-you-want-to-learn-from\"\u003eWhere Do You Want To Learn From?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWhich institution and how the content being deliver?\u003c/li\u003e\n\u003cli\u003eTrustworthy institution.\u003c/li\u003e\n\u003cli\u003eTutor style.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examining-courses\"\u003eExamining Courses\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eCourse description.\u003c/li\u003e\n\u003cli\u003eSyllabus (outline of course).\u003c/li\u003e\n\u003cli\u003ePrerequisites.\u003c/li\u003e\n\u003cli\u003eExplore course pages.\u003c/li\u003e\n\u003cli\u003eSample courses.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"how-do-you-define-success\"\u003eHow Do You Define Success?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eKnow what the course offers before you dive in!\u003c/li\u003e\n\u003cli\u003eIs it match with your goals?\u003c/li\u003e\n\u003cli\u003eTrack your progress!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"making-the-most-of-your-audit\"\u003eMaking the Most of Your Audit\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSet realistic schedules.\u003c/strong\u003e Evaluate how you can work a course audit into your schedule.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe organized!\u003c/strong\u003e Make an actionable plan and stick to it as best you can. Set a reasonable schedule for yourself.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe consistent!\u003c/strong\u003e Ensure you are studying at the pace you set for yourself. Re-evaluate if issues arise.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe studious!\u003c/strong\u003e Review material frequently! Stay disciplined and try to avoid multitasking while learning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe motivated!\u003c/strong\u003e Set short-term goals and reward yourself when you achieve them!\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe persistent!\u003c/strong\u003e It\u0026rsquo;s impossible to \u0026ldquo;fail\u0026rdquo; when you\u0026rsquo;re in charge! If you\u0026rsquo;re struggling with something, take your time.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe accountable!\u003c/strong\u003e Find someone to ask you about the course, or put yourself into a position to be asked about your progress.\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t code alone!\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eObtaining help.\u003c/strong\u003e Ask for help at Stack Overflow, GitHub Forums, or a programming community Discord server.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSpeeding through courses\u003c/strong\u003e. Move at a pace where you\u0026rsquo;re confident in your understanding of the material.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTextbooks\u003c/strong\u003e. Sites like FreeCodeCamp and College Compendium provide ways to find free textbooks.\u003c/li\u003e\n\u003cli\u003eComplementary Learning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAdditional Enrichment\u003c/strong\u003e. Dive into the details with academic papers from sites like PapersWithCode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"common-pitfalls\"\u003eCommon Pitfalls\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTime mismanagement.\u003c/strong\u003e Setting enough time aside for your audit can be difficult. Consistently re-adjust your schedule as needed.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGetting distracted.\u003c/strong\u003e Many students lose energy or interest. TV, social media, and more can also take up valuable time.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNot engaging with other learners\u003c/strong\u003e. Take advantage of other means of social learning online!\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"ways-to-confirm-your-knowledge\"\u003eWays To Confirm Your Knowledge\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eQuiz yourself; Flashcards - Quizlet, Brainscape, Anki.\u003c/li\u003e\n\u003cli\u003eHave others quiz you; Join an online community.\u003c/li\u003e\n\u003cli\u003eTry and apply the knowledge in some way; Build a project.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"next-steps\"\u003eNext Steps\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eConsider auditing courses sequentially to build on previous concepts.\u003c/li\u003e\n\u003cli\u003eConsider mixing and matching courses from various sources.\u003c/li\u003e\n\u003cli\u003ePrioritize foundational math. Calculus, Statistics, Linear Algebra, Discrete Math.\u003c/li\u003e\n\u003cli\u003eThere\u0026rsquo;s always more to learn!\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eSource:\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/QeRSEoqpKVI?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\u003c/p\u003e","title":"Learn From Free College Cs Courses"},{"content":"Course Goals Save a lot of time, money and effort. Achieve your coding goals, your plan or path to achieve those goals, the steps, routines, habits and timelines required to achieve your goals. Recognize myths or mismatched expectations that stand in the way of learning to program. Use effective tools and strategies + discouragement-tree. Recognize pitfalls \u0026amp; diversions that cause delays and derailment. Be a highly effective lifelong-learner. Preparation + Mindset First thing to achieve your goals. All success start with get good at this. Getting most out of this course: Inertia. Frustration. Growth Mindset. Time + Effort = Goal. Time lots of it. A Framework for your journey 5 W + 1 H. Help you get total clarity \u0026amp; expectation from yourself, process of learning, and your definition of success. Keep referring to your plan! Are you on track with it? Does it need adjustment? The Sequence Matters: Better decisions. Demythify. Build the plan. Why do you want to learn to code? You must define your why before you can begin with the what and the how. At some point, if you ask why enough time, you will get something you strongly believe. Ask why deeply to your previous why answer. What do you want to learn based on your reason? What the skills you must have to achieve your goals? What the relevant subjects to learn? When learning a new skill focus is the absolute key. The less topics you do the more progress you make. Separate your task into \u0026ldquo;must have skills\u0026rdquo; and \u0026ldquo;nice to \u0026ldquo;have skills\u0026rdquo; to help you focus. Who? (Models \u0026amp; Mentors) How else do we know were going the right way? There so many ways to get someplace, we want the shortest right? Find someone who has achieved the same goals you\u0026rsquo;re aiming for. You almost certainly know at least one person and then there is always social media. Reach out. Make it useful, not aspirational. When do I need to turn to them? When you\u0026rsquo;re confused or stuck. A good model will help you choose a step that is right for you and takes you closer to your what, efficiently and productively. Internet is full of opinions, mentor can help when you\u0026rsquo;re confused. The Mentor/Model will help guide you to the best next step for you. The right WHO includes enough to help you make better decisions (even if they cannot make the decision for you). If they\u0026rsquo;ve done what you want to do, listen closely. But don\u0026rsquo;t blindly follow. If they\u0026rsquo;ve not done it, maybe you should find someone who has, or at least tried. Don\u0026rsquo;t confine yourself to physical mentorship. When by? \u0026ldquo;Work expands to fill the time available to complete it\u0026rdquo; ~Parkinson\u0026rsquo;s law. S.M.A.R.T goals (Specific, Measurable, Achievable, Realistic, Time-Bound). Break it down into chunks. Each chunk must have a clear beginning and finish point. Choose metrics that can be aimed for daily/weekly. Don\u0026rsquo;t set goals too far into the future. Set the game up so you win quickly and constantly. Missing the timeline is 0K, if it\u0026rsquo;s the exception. Where (Learning Formats) Books. Multimedia experience (online course). Let\u0026rsquo;s find yours: Pick your first small learning goal. Then do it several times from different sources. Should take no more than 10 hours across all your learning formats. Fundamentals feel strong? Now work out which formats were most effective for you. Eliminate formats until you\u0026rsquo;re left with top 2-3. Repeat with top 2-3 formats on your next small learning goal. The Sequence Matters Build the plan ➡️ Demythify ➡️ Better decisions\nMyth 1: Computer Science = Coding They are NOT the same. \u0026ldquo;Computer science is theoretical, it takes a scientific and mathematical approach to information and it\u0026rsquo;s computation. Computer programming is practical, it is the process of designing, writing, testing, debugging, and maintaining the source code of computer programs. They are different, but related fields.\u0026rdquo; Do you need to know computer science, or just know how to code your goal up? Less is more, and Quick Wins are important. CS degrees are essential for some things, but not for most coding roles. What is your goal? TIP: ask your model or mentor what they think! Myth 2: Math Guru? Short answer: No, not necessary. 0K - so what is the skill I need in place of math? Logical, structured thinking + Effective Problem Solving. It\u0026rsquo;s not easy for many people, it\u0026rsquo;s not natural for some. But it\u0026rsquo;s 100% learnable. Myth 3: Coding is really hard for me You\u0026rsquo;ve already done things harder than learning to code. Walk, swim, drive, ride a bike, write, use Facebook? Myth 4: I can learn it quickly The idea of a single eureka moment is a dangerous lie. Movies and pop culture get this all wrong. It makes us feel inadequate since we haven\u0026rsquo;t had ours. It prevents people with seeds of good ideas from getting started. Learn by doing and redoing. Reading a textbook doesn\u0026rsquo;t cut it. Copying a tutorial NOT the same as learning to code. But it is coding. Technically. Learning = Time + Effort. Myth 5: Boring and Geeky? \u0026ldquo;Everyone should know how to program a computer, because it teaches you how to think.\u0026rdquo; ~Steve Jobs Thinking like a programmer is a great approach to thinking generally. Software is just absolutely a tool. It just like an artist\u0026rsquo;s paint brush. You use it to shape the world around you. To solve problems. Reflect. Revisit. Revise The Biggest Risk Factors: Avoidant Behaviors. Not doing what you already know you should. Sticking with your comfort zone. The Biggest Risk Factors: Underestimations. Underestimating yourself. Underestimating the path ahead. Underestimating the time it takes to get mastery. Underestimating the competitive landscape. Underestimating the process of de-risking yourself. The Biggest Risk Factors: Wrong Expectations. What does each step feel like? What does \u0026ldquo;this is hard\u0026rdquo; mean? Things take time (but how much time is reasonable)? Social Media \u0026amp; ChatGPT. Recruiter interest in a competitive marketplace. But how do I \u0026ldquo;know\u0026rdquo; this is going to work? Bad Opportunity. Bad Execution/Plan. Impatience. The Three Currencies Money Time Energy Start 📉 📈 📈 Prime 📈 📉 📈 End 📈 📈 📉 The Trilemma Cheap Fast Good Cheap - Not Good Not Fast Fast Not Good - Not Cheap Good Not Fast Not Cheap - Ben Franklin If you think education is expensive\u0026hellip;try ignorance.\nRecap ✅ Hard things are hard. Understand what that will feel like. ✅ If you know what to do, make sure you\u0026rsquo;re actually doing it. ✅ You need to live outside your comfort zone. ✅ Invest (don\u0026rsquo;t just spend) your 3 currencies. ✅ Accept the trade offs that come with the choices you make. ✅ Coding is a great career for many. If you\u0026rsquo;re not making progress it\u0026rsquo;s either wrong expectations, impatience or bad execution/bad plan. Fundamental Decisions: Intro \u0026amp; Objectives The danger is making poor decisions that cost you wasted time, money and effort. Necessary, but not inherently hard.\nFundamental Decisions: Which Language? Popular languages. Most wanted and highest pay. Most loved languages. Pick a language as long as it is considered beginner friendly and is not a markup language. Stick to it. Ignore the urge to \u0026ldquo;dabble\u0026rdquo; in others. Get your fundamentals down pat. STAY AWAY FROM FRAMEWORKS until you\u0026rsquo;ve got the fundamentals right. Fundamental Decisions: Ready? You feel a level of comfort and familiarity where you are not struggling to understand concepts in documentation. You are able to search and find answers quickly because your intuition on the nature of the problem is sharp, and you know the right terminology and concepts underlying the problem you need to solve. You have looked at code in one or two other languages (not frameworks) and you can read it well enough to understand roughly what it does. Look at your goals and plan. What comes next? Adjust your plan to head closer to your goal. Start small. Quick wins. Fundamental Decisions: Which Tools? Keep it very, very simple. IDEs. Integrated Developer Environments. Fancy-speak for \u0026ldquo;code editors\u0026rdquo;. Tools are meant to be well suited to the task. IDES are similar. But getting comfortable with one is what gives you the advantage. IDEs Online. Online editors (code playgrounds). Good for solving programming \u0026ldquo;scratch pads\u0026rdquo; and basic training. Can be more sophisticated and entire bots and servers are possible! Require an internet connection. Other basic tools: version control, terminal. Necessary after you learn fundamentals. Fundamental Decisions: Which Skills? Remember your learning plans and goals? Break them down into smaller, measurable sub-goals. Build skills one at a time. Not sure of which skill next? Stay away from advanced skills. Ask your model / mentor. Ask yourself: Is this necessary for me to learn next? Or just desirable? Is there something else I need to know more than this? Unhelpful Questions: Should I know this? Or will this make me a better coder? Learning Formats: Measuring Effectiveness PRACTICE. What Should I practice? The way your chosen programming language needs to be written (syntax, etc.) Combining basic concepts to do more logic and interaction. Building, brick by brick. How to Google for answers. How to look at StackOverFlow. How to ask questions the right way. Build your coding vocab. Reading (and actually understanding) documentation. Add other people to your coding journey. Read Code. Open source \u0026amp; GitHub = awesome resources! Teach someone else what you\u0026rsquo;re learning. Pair program. Pace\u0026hellip;\u0026hellip;yourself\u0026hellip;\u0026hellip; Pomodoro Technique. Walk away when you\u0026rsquo;re stuck. Change your state. Do something cognitively totally different: play music, listen to music, water plants, walk the dog, meditate, exercise. Warning: it\u0026rsquo;s very hard to step away! Coding is addictive. Intense concentration is hard to Step away from. Concentrating on the wrong thing doesn\u0026rsquo;t help. Setbacks and mindsets You fail when you quit. Everything else is just a setback. Think of your favorite athlete. Develop a champion\u0026rsquo;s mindset. Learning to code is being an intellectual athlete. 2 theories as to why you may be confused\u0026hellip; The learning format/resource is not working for you You skipped steps and jumped ahead too far. Types Of Overwhelm. Information. Estimation Error. 3 reasons to why you may be overwhelmed\u0026hellip; You skipped steps and jumped too far ahead. You\u0026rsquo;re not specific enough and so you\u0026rsquo;re doing too much all together. You feel you\u0026rsquo;ve underestimated the size of the learning goal. The right mindset of overwhelm. Is a signal. Not reason to quit. Very common, but misunderstood. Not hard to solve. Solution to estimation error. Revisit goals/plan and adjust. Conclude coding cannot be a priority right now. Doubt. Here Human. Have some impostor syndrome! Feeling the weight Of doubt is normal. Actually, it\u0026rsquo;s universal. Beating doubt is a mechanical process: Accept, and separate fact from opinion. Keep moving forward. Progress is slow. Programming is a craft. Competence takes time. Don\u0026rsquo;t run out of patience, unless it is strategically right for you. Go back to the 5Ws and refresh your WHY. Success = Effort + Time Getting stuck\u0026hellip; Pause. Step back. Accept the situation. Re-set your expectations on time and effort needed in light of error. Remind yourself to be patient while you search for the answer. Most of coding is consulting google and other resources. Remind yourself the first few times are the worst. It gets easier and faster from here. Yes it\u0026rsquo;s going to take more time. But at least you\u0026rsquo;re going to find out why, so when it happens the next time you\u0026rsquo;ve got an experience to draw from. Over time you get faster. and faster. Until you learn something new. But with time you see the pattern. You\u0026rsquo;ve got a better map! You\u0026rsquo;re going to compare yourself\u0026hellip; If they can do it. I sure can. They had a much harder time finding resources than I ever will\u0026hellip; 4 stages of learning Unconscious Incompetence. Conscious Incompetence (awareness). Conscious Competence (learning \u0026amp; change). Unconscious Competence (mastery). Source: ","permalink":"https://wewnumam.github.io/articles/career-change-to-code/","summary":"\u003ch1 id=\"course-goals\"\u003eCourse Goals\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eSave a lot of time, money and effort.\u003c/li\u003e\n\u003cli\u003eAchieve your coding goals, your plan or path to achieve those goals, the steps, routines, habits and timelines required to achieve your goals.\u003c/li\u003e\n\u003cli\u003eRecognize myths or mismatched expectations that stand in the way of learning to program.\u003c/li\u003e\n\u003cli\u003eUse effective tools and strategies + discouragement-tree.\u003c/li\u003e\n\u003cli\u003eRecognize pitfalls \u0026amp; diversions that cause delays and derailment.\u003c/li\u003e\n\u003cli\u003eBe a highly effective lifelong-learner.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"preparation--mindset\"\u003ePreparation + Mindset\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eFirst thing to achieve your goals.\u003c/li\u003e\n\u003cli\u003eAll success start with get good at this.\u003c/li\u003e\n\u003cli\u003eGetting most out of this course:\n\u003col\u003e\n\u003cli\u003eInertia.\u003c/li\u003e\n\u003cli\u003eFrustration.\u003c/li\u003e\n\u003cli\u003eGrowth Mindset.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTime + Effort = Goal\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eTime lots of it.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"a-framework-for-your-journey\"\u003eA Framework for your journey\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e5 W + 1 H\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eHelp you get total clarity \u0026amp; expectation from yourself, process of learning, and your definition of success.\u003c/li\u003e\n\u003cli\u003eKeep referring to your plan! Are you on track with it? Does it need adjustment?\u003c/li\u003e\n\u003cli\u003eThe Sequence Matters:\n\u003col\u003e\n\u003cli\u003eBetter decisions.\u003c/li\u003e\n\u003cli\u003eDemythify.\u003c/li\u003e\n\u003cli\u003eBuild the plan.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"why-do-you-want-to-learn-to-code\"\u003eWhy do you want to learn to code?\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eYou must define your why before you can begin with the what and the how.\u003c/li\u003e\n\u003cli\u003eAt some point, if you ask why enough time, you will get something you strongly believe.\u003c/li\u003e\n\u003cli\u003eAsk why deeply to your previous why answer.\u003c/li\u003e\n\u003cli\u003eWhat do you want to learn based on your reason?\u003c/li\u003e\n\u003cli\u003eWhat the skills you must have to achieve your goals?\u003c/li\u003e\n\u003cli\u003eWhat the relevant subjects to learn?\u003c/li\u003e\n\u003cli\u003eWhen learning a new skill focus is the absolute key. The less topics you do the more progress you make. Separate your task into \u0026ldquo;must have skills\u0026rdquo; and \u0026ldquo;nice to \u0026ldquo;have skills\u0026rdquo; to help you focus.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"who-models--mentors\"\u003eWho? (Models \u0026amp; Mentors)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eHow else do we know were going the right way?\u003c/li\u003e\n\u003cli\u003eThere so many ways to get someplace, we want the shortest right?\u003c/li\u003e\n\u003cli\u003eFind someone who has achieved the same goals you\u0026rsquo;re aiming for.\u003c/li\u003e\n\u003cli\u003eYou almost certainly know at least one person and then there is always social media.\u003c/li\u003e\n\u003cli\u003eReach out.\u003c/li\u003e\n\u003cli\u003eMake it useful, not aspirational.\u003c/li\u003e\n\u003cli\u003eWhen do I need to turn to them? When you\u0026rsquo;re confused or stuck.\u003c/li\u003e\n\u003cli\u003eA good model will help you choose a step that is right for you and takes you closer to your what, efficiently and productively.\u003c/li\u003e\n\u003cli\u003eInternet is full of opinions, mentor can help when you\u0026rsquo;re confused.\u003c/li\u003e\n\u003cli\u003eThe Mentor/Model will help guide you to the best next step for you.\u003c/li\u003e\n\u003cli\u003eThe right WHO includes enough to help you make better decisions (even if they cannot make the decision for you).\u003c/li\u003e\n\u003cli\u003eIf they\u0026rsquo;ve done what you want to do, listen closely. But don\u0026rsquo;t blindly follow. If they\u0026rsquo;ve not done it, maybe you should find someone who has, or at least tried.\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t confine yourself to physical mentorship.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"when-by\"\u003eWhen by?\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;Work expands to fill the time available to complete it\u0026rdquo; ~Parkinson\u0026rsquo;s law.\u003c/li\u003e\n\u003cli\u003eS.M.A.R.T goals (Specific, Measurable, Achievable, Realistic, Time-Bound).\u003c/li\u003e\n\u003cli\u003eBreak it down into chunks. Each chunk must have a clear beginning and finish point. Choose metrics that can be aimed for daily/weekly.\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t set goals too far into the future. Set the game up so you win quickly and constantly. Missing the timeline is 0K, if it\u0026rsquo;s the exception.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"where-learning-formats\"\u003eWhere (Learning Formats)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eBooks.\u003c/li\u003e\n\u003cli\u003eMultimedia experience (online course).\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s find yours:\n\u003col\u003e\n\u003cli\u003ePick your first small learning goal. Then do it several times from different sources. Should take no more than 10 hours across all your learning formats.\u003c/li\u003e\n\u003cli\u003eFundamentals feel strong? Now work out which formats were most effective for you.\u003c/li\u003e\n\u003cli\u003eEliminate formats until you\u0026rsquo;re left with top 2-3.\u003c/li\u003e\n\u003cli\u003eRepeat with top 2-3 formats on your next small learning goal.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"the-sequence-matters\"\u003eThe Sequence Matters\u003c/h1\u003e\n\u003cp\u003eBuild the plan ➡️ Demythify ➡️ Better decisions\u003c/p\u003e","title":"Career Change to Code"},{"content":"What is Productivity? Productivity is all about getting things done and making the most of your time. Productivity = Time x Energy x Focus All three of them are important. Take responsibility for everything in your life You are the common denominator of all your problems. Take ownership of your actions! Are you not understanding a particular design pattern? It is your responsibility to understand it. You are more than just a coder You are a value-adding member of the team. You should aim to have a seat at the table where decisions are made. You should have a sense of ownership. Understanding the business and the value you can bring is crucial. You should partner with business and product partners. You can have unique insights into the product and its performance. Add as much value as possible Prioritize adding value over other tasks. Don\u0026rsquo;t waste time on things that don\u0026rsquo;t matter. Consider adding value in any way possible. Clarity breeds productivity Ambiguity can lead to misunderstandings and wasted time/resources. Clarify details and make sure everyone is on the same page. Ask many questions upfront and record meetings if possible. The importance of values Values guide our behavior and decision-making. Knowing your values helps align decisions with beliefs and goals. Values can help you when making difficult decisions. Values-based decisions lead to purpose, fulfillment. Set Goals Goals can make you more committed and productive. Set short-term goals that excite you, as well as long-term goals that pull you towards your dreams. Prioritize your goals based on importance and urgency. Set Deadlines Deadlines are like a compass, guiding us towards the completion of our projects. Without deadlines, it is easy for us to fall into the trap of procrastination. Setting deadlines helps us prioritize our tasks and allocate our time accordingly. The further the deadline, the more work can be prolonged unnecessarily. Setting unrealistic deadlines can be counter-productive and cause stress. It is important to find a balance and set deadlines that are challenging but achievable. 3 Pillars of Motivation Motivation is essential for staying focused and achieving goals. Dan Pink\u0026rsquo;s theory of motivation: There are 3 pillars: autonomy, mastery, and purpose. Mastery: Desire for improvement and proficiency. Constantly learning and improving skills. Autonomy: Desire for control over own lives and work. Freedom to choose projects, set schedules, make decisions about work. Purpose: Desire to contribute to something larger than ourselves. Using skills and knowledge to make positive Impact on world. Solve important problems. Motivation Equation Motivation equation by Jim Kwik: Motivation = Energy x Purpose x Small Simple Steps Maintain high energy levels through sleep, diet, exercise, and breaks. A strong sense of purpose in work is essential. Break down goals into manageable steps for motivation and progress. The Importance of Emotions Emotions impact work and relationships as a software engineer. Emotions can lead to poor decisions, poor quality work, and negative interactions. Emotions are normal and necessary, but should be managed. The Imposter Syndrome Imposter syndrome is very common among software engineers. It is the feeling of doubting your skills and success. It can reduce productivity by causing self-doubt. Everyone feels it at some degree. When it comes, do not ignore it. Identify its sources. Is it happening because you are working on a new project or technology that is challenging you? Great. You have this awesome opportunity to learn. Seek feedback from others. Do not try to be perfect. Everyone has flaws. Do not compare yourself to others. Do not feel embarrassed to ask for help when you need it. 2 Forces that Shape Us Tony Robbins states that everyone has a desire to avoid pain and a desire to gain pleasure. The desire to avoid pain is often fueled by the need to protect oneself from physical or emotional harm. The desire to gain pleasure is often fueled by the need to feel good and seek out experiences that bring joy. Example: learning a framework like React JS. Associate pain with not learning React JS (e.g. job loss, missed opportunities). Associate pleasure with benefits of learning React JS (e.g. raise, interesting projects). Use reminders (paper, phone, Slack bot) to keep consequences and benefits in mind. Become grateful We have really good salaries in comparison to others We have the opportunity to work on interesting projects, from home, with people all around the world We get paid to learn. The Impact of Stress Causes: work, personal, financial, uncertainty. Negative effects: anxiety, depression, heart disease, decreased productivity. Positive effects: eustress enhances performance, motivation. Effective management: relaxation, time management, support, self-care. Time Management Time management is essential for productivity. Productive people prioritize tasks and manage time effectively. All individuals have 24 hours in a day. Time is a finite resource and should be used wisely. Tips to Manage Your Time Set goals. Create a schedule. Learn to say no. Take breaks. Stay organized. Keep track of current time usage. Batch activities to stay focused. Choose the best location for productivity. Time management is about finding what works best for you and maximizing productivity. Use a Calendar Your calendar is one of the most important productivity tools. It gives you a clear sense of time duration. Todo lists can get too long. Your calendar gives you a reality check. Create a calendar that outlines your daily schedule. Write down new commitments or appointments immediately. Use color or symbols to indicate important tasks/events. Check the calendar the day before and prioritize tasks. Procrastination Everyone procrastinates. There are many reasons why we procrastinate: Feeling overwhelmed. Unrealistic expectations. Fear of failure. Lack of motivation. Perfectionism. Lack of discipline. Lack of energy. Poor time management. RPM RPM stands for Result Focused Purpose Driven Massive Action Plan. A really Useful technique by Tony Robbins that can motivate you to work hard. The RPM technique can help you turning your goals into reality. The RPM process consists of 4 steps: Get clear on your desired result. Identify your purpose behind the goal. Create a massive action plan by breaking the goal into manageable tasks and setting deadlines for each task. Take consistent, focused action towards your goal every day. RPM Example Purpose Result Massive Action Plan (1) Become a more valuable engineer.\n(2) Get a salary raise.\n(3) Get promoted.\n(4) Make my family proud. Become a Certified AWS Solutions Architect. (1) Research about potential resources I can use to learn.\n(2) Prepare a roadmap of steps I need to follow to prepare.\n(3) Learn everything necessary\n(4) Pass the exam. The 2 Minute Rule It is a simple and effective technique to manage workload and increase productivity. If you can get something done in 2 minutes or less, do it immediately. It helps you get small things done quickly and not overthink them. It can be applied to tasks like: Writing Jira comments. Replying to Slack messages. Improving a typo in the documentation. The 15 Minute Rule Rule of 15 minutes is a technique to overcome procrastination. Set a timer for 15 minutes and focus solely on the task at hand for that time. 15 minutes is short enough to be easy to commit to and long enough to make progress. Progress is better than perfect, the goal is to get started and build momentum. Progress compounds, the more work done the easier it becomes and momentum builds. Try setting a timer for 15 minutes next time you are feeling stuck and make progress, no matter how small. Perfectionism Trying to do something perfectly. This is not usually not about being more. This is usually just one manifestation of procrastination. Striving for perfection can prevent us from releasing our work. Consequences of Perfectionism Endless revisions and refinements leading to delays and missed deadlines. Procrastination and a backlog of unfinished tasks. Unrealistic expectations leading to frustration and demoralization. Overwhelm and burnout. Missed deadlines and falling behind schedule. Missed opportunities for growth and innovation. Start before you feel motivated It is hard to always be motivated. The \u0026ldquo;perfect\u0026rdquo; moment never comes. Motivation comes after you start. Break large tasks into small ones Large projects can be overwhelming and a source of procrastination . Break them into small simple tasks. Remember that the best way to start is to just start and take it one step at a time. \u0026ldquo;You eat an elephant one bite at a time\u0026rdquo;. Exercise Regular exercise is important for a healthy lifestyle. It reduces stress, improves sleep, increases energy levels, and improves overall physical fitness. It lowers the risk of chronic illnesses. It also enhances cognitive function, including memory and focus. Incorporate activities like walking, biking, and swimming into daily routine . Join in an exercise class or participating in team sports. Go to the gym to relieve stress and boost mental wellbeing. Socialize with people in the local community. Quick tips for exercises Try walking or biking from time to time. Download an exercise app and do a few exercises throughout the day. Utilize a jump rope for quick cardio workouts. Do a few pushups or sit-ups throughout the day. Take the stairs instead of the elevator. Do not underestimate sleep Sleep is essential for physical and mental restoration. Not sleeping well can affect: Our ability to concentrate. Our emotions and relations with others. Our health. The Importance of Focus Focus is extremely important for our productivity. Our focus is limited so we need to prioritize things. We are constantly being distracted. Focus is like a muscle Focus helps us: Get things done faster. Stay present in the moment. Reduce stress and anxiety. Have greater enjoyment and fulfillment. How to improve your focus Set clear goals and priorities. Identify distractions. Turn off non important notifications. Put your phone 6 feet away from you. Take breaks and manage energy. Multitasking is killing your Productivity Multitasking is the process of switching from one task into another. It can: Be inefficient. Slow us down. Lead to mistakes. Be a source of stress and anxiety. How to avoid multitasking Prioritize your tasks. Focus on one task at a time. Turn off distractions. Take breaks. The Pomodoro Technique It is a time management technique that helps you focus by using time-boxed intervals. The intervals are usually 25 minutes long followed by a 5 minute break. After 4 pomodoros, take a longer break (15-30 minutes) to have some proper rest. Delete Social Media Apps from Your Phone Delete social media apps from your phone. Sign out from social medias in the web browser. Now you need to take a few more steps to use them. Every minute is valuable. You are a lifelong learner Learning doesn\u0026rsquo;t end after school or training program. Software engineers must constantly learn to stay up-to-date. Embrace the mentality of being a lifelong learner. Do not Memorize the Syntax Switching programming languages is common in a career. Moving to a new language can be overwhelming, especially for beginners. Memorizing everything is not necessary. Experienced developers still need to look up information and documentation. You don\u0026rsquo;t have to be remember the syntax. You can use GitHub Copilot, ChatGPT to help you with the syntax. You are supposed to solve problems. Avoid the Tutorial Hell Watching many tutorials can give you a false impression that you are learning. You cannot learn new things by just passively watching. You get better at coding by actually coding. Be more active with project-based learning. Keep a \u0026rsquo; \u0026lsquo;TO Learn\u0026quot; List Everyone keeps \u0026ldquo;To Do\u0026rdquo; lists. There is nothing wrong with that. As a lifelong learner, you should also keep another very important list. You should keep a \u0026ldquo;To Learn\u0026rdquo; list. Benefits Of Keeping \u0026ldquo;To Learn\u0026rdquo; Lists It can help you stay: Curious. Motivated. Humble. Productive. Learn by Building Things From Scratch Building from scratch enhances understanding. Active learning through building. Learn principles and underlying concepts. Develop problem-solving skills. See the Bigger Picture Drive the business forward by adding value. Avoid getting lost in trivial tasks and focus on critical problems. Increase value and productivity by investing time wisely in high-impact areas. The Feynman Technique There is a difference between just knowing the name of something and actually understanding something. The Feynman Technique can help you understand complex topics. The technique is a four-step process: Choose a topic that you want to learn. Teach it to yourself or someone else. Whenever you get stuck, go back to the book, or course. Use simple examples and analogies. Learn to build something that already exists Avoid overwhelming yourself with complex business decisions. Clone open-source projects. Replicate projects you already use. Keep learning simple. Learn Concepts not Specific Problems Understand concepts, not just memorize solutions. Learn underlying principles, design patterns, and best practices. Increase problem-solving efficiency and effectiveness. Work on side projects You need to improve your skills. Side projects can serve as a sandbox to try out new technologies, frameworks. No need to finish complete apps. Even prototypes can help you learn a lot. Be Kind to Yourself There is so much to learn and get done. We may feel overwhelmed, anxious, and stressed. It is very important to prioritize our own well-being. Practice self-compassion. Develop Positive Relationships with Your Family Quality family time boosts motivation and drive. Open communication sets healthy boundaries. Active listening and respect foster positivity. Appreciation and gratitude fuel success. Build Positive Relationships at Work Build relationships with colleagues. Listen and respect. Show appreciation for colleagues work. Offer assistance and be a team player. Meet new people Meeting new people helps you: Expand your professional circle. Get involved in new opportunities. Develop new skills and experiences. Be open to meeting people whenever there is an opportunity. You can grow both personally and professionally. Log Your Achievements We accomplish a lot of things in our work: Fix critical bugs. Finish urgent tasks. Your work can have a really profound impact on the project. As times goes by, we forget about them. As such, it is extremely important to log our achievements. When we log our achievements, we can: Track our progress. Identify areas of improvement. Feel a higher sense of meaning and satisfaction. Feel more confident. Have higher levels of happiness. How to Log Your Achievements Use a document to list accomplishments, trainings, and relevant details. Capture positive feedback (emails, Jira comments, personal messages) as reminders. Track achievements for improvement and impact. Learn to write Effective writing is crucial for software developers. Writing saves time and prevents misunderstandings. It boosts productivity, credibility, and career growth. \u0026ldquo;What many people underestimate is that being a good writer, whether that is through emails or through documents. allows you to be more impactful. I see many engineers ignore that skill. You might be proud of your code. You should also be equally proud of the craft of writing\u0026hellip; Writing is a highly underestimated skill for engineers.\u0026rdquo; Urs Hölzle, Google\u0026rsquo;s first VP of Engineering. Power Up Your Career with Presentations Presentations enhance careers and skills. Sharing knowledge through presentations builds confidence and expertise. Overcoming the fear of public speaking fuels personal and professional growth. Learn keyboard shortcuts Keyboard shortcuts save time and reduce hand movements. Learn shortcuts for common tasks. Mastering shortcuts boosts productivity and makes work more enjoyable. Master debugging Software Engineers spend more time debugging than coding. Invest time getting better at it. Use logs and read error messages carefully. Use debugging tools: breakpoints. watch windows. call stacks. Improve Your Typing Speed Typing is a big part of our daily lives: emails, messages, documents. Faster typing means more productivity and efficiency. Practice can improve your typing speed. Just 5-10 minutes a day for a few weeks can make a significant difference. Conclusion Knowledge is not power. Knowledge is potential power. Applied knowledge is actual power. It is very important to practice what you learn. Source: ","permalink":"https://wewnumam.github.io/articles/productivity-as-developer/","summary":"\u003ch1 id=\"what-is-productivity\"\u003eWhat is Productivity?\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eProductivity is all about getting things done and making the most of your time.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProductivity = Time x Energy x Focus\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAll three of them are important.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"take-responsibility-for-everything-in-your-life\"\u003eTake responsibility for everything in your life\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eYou are the common denominator of all your problems. Take ownership of your actions!\u003c/li\u003e\n\u003cli\u003eAre you not understanding a particular design pattern? It is your responsibility to understand it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"you-are-more-than-just-a-coder\"\u003eYou are more than just a coder\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eYou are a value-adding member of the team.\u003c/li\u003e\n\u003cli\u003eYou should aim to have a seat at the table where decisions are made.\u003c/li\u003e\n\u003cli\u003eYou should have a sense of ownership.\u003c/li\u003e\n\u003cli\u003eUnderstanding the business and the value you can bring is crucial.\u003c/li\u003e\n\u003cli\u003eYou should partner with business and product partners.\u003c/li\u003e\n\u003cli\u003eYou can have unique insights into the product and its performance.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"add-as-much-value-as-possible\"\u003eAdd as much value as possible\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003ePrioritize adding value over other tasks.\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t waste time on things that don\u0026rsquo;t matter.\u003c/li\u003e\n\u003cli\u003eConsider adding value in any way possible.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"clarity-breeds-productivity\"\u003eClarity breeds productivity\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eAmbiguity can lead to misunderstandings and wasted time/resources.\u003c/li\u003e\n\u003cli\u003eClarify details and make sure everyone is on the same page.\u003c/li\u003e\n\u003cli\u003eAsk many questions upfront and record meetings if possible.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"the-importance-of-values\"\u003eThe importance of values\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eValues guide our behavior and decision-making.\u003c/li\u003e\n\u003cli\u003eKnowing your values helps align decisions with beliefs and goals.\u003c/li\u003e\n\u003cli\u003eValues can help you when making difficult decisions.\u003c/li\u003e\n\u003cli\u003eValues-based decisions lead to purpose, fulfillment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"set-goals\"\u003eSet Goals\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eGoals can make you more committed and productive.\u003c/li\u003e\n\u003cli\u003eSet short-term goals that excite you, as well as long-term goals that pull you towards your dreams.\u003c/li\u003e\n\u003cli\u003ePrioritize your goals based on importance and urgency.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"set-deadlines\"\u003eSet Deadlines\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eDeadlines are like a compass, guiding us towards the completion of our projects.\u003c/li\u003e\n\u003cli\u003eWithout deadlines, it is easy for us to fall into the trap of procrastination.\u003c/li\u003e\n\u003cli\u003eSetting deadlines helps us prioritize our tasks and allocate our time accordingly.\u003c/li\u003e\n\u003cli\u003eThe further the deadline, the more work can be prolonged unnecessarily.\u003c/li\u003e\n\u003cli\u003eSetting unrealistic deadlines can be counter-productive and cause stress.\u003c/li\u003e\n\u003cli\u003eIt is important to find a balance and set deadlines that are challenging but achievable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"3-pillars-of-motivation\"\u003e3 Pillars of Motivation\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMotivation is essential for staying focused and achieving goals.\u003c/li\u003e\n\u003cli\u003eDan Pink\u0026rsquo;s theory of motivation: There are 3 pillars: autonomy, mastery, and purpose.\u003c/li\u003e\n\u003cli\u003eMastery:\n\u003cul\u003e\n\u003cli\u003eDesire for improvement and proficiency.\u003c/li\u003e\n\u003cli\u003eConstantly learning and improving skills.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eAutonomy:\n\u003cul\u003e\n\u003cli\u003eDesire for control over own lives and work.\u003c/li\u003e\n\u003cli\u003eFreedom to choose projects, set schedules, make decisions about work.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePurpose:\n\u003cul\u003e\n\u003cli\u003eDesire to contribute to something larger than ourselves.\u003c/li\u003e\n\u003cli\u003eUsing skills and knowledge to make positive Impact on world.\u003c/li\u003e\n\u003cli\u003eSolve important problems.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"motivation-equation\"\u003eMotivation Equation\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMotivation equation by Jim Kwik: \u003ccode\u003eMotivation = Energy x Purpose x Small Simple Steps\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eMaintain high energy levels through sleep, diet, exercise, and breaks.\u003c/li\u003e\n\u003cli\u003eA strong sense of purpose in work is essential.\u003c/li\u003e\n\u003cli\u003eBreak down goals into manageable steps for motivation and progress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"the-importance-of-emotions\"\u003eThe Importance of Emotions\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eEmotions impact work and relationships as a software engineer.\u003c/li\u003e\n\u003cli\u003eEmotions can lead to poor decisions, poor quality work, and negative interactions.\u003c/li\u003e\n\u003cli\u003eEmotions are normal and necessary, but should be managed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"the-imposter-syndrome\"\u003eThe Imposter Syndrome\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eImposter syndrome is very common among software engineers.\u003c/li\u003e\n\u003cli\u003eIt is the feeling of doubting your skills and success.\u003c/li\u003e\n\u003cli\u003eIt can reduce productivity by causing self-doubt.\u003c/li\u003e\n\u003cli\u003eEveryone feels it at some degree.\u003c/li\u003e\n\u003cli\u003eWhen it comes, do not ignore it.\u003c/li\u003e\n\u003cli\u003eIdentify its sources.\u003c/li\u003e\n\u003cli\u003eIs it happening because you are working on a new project or technology that is challenging you?\u003c/li\u003e\n\u003cli\u003eGreat. You have this awesome opportunity to learn.\u003c/li\u003e\n\u003cli\u003eSeek feedback from others.\u003c/li\u003e\n\u003cli\u003eDo not try to be perfect. Everyone has flaws.\u003c/li\u003e\n\u003cli\u003eDo not compare yourself to others.\u003c/li\u003e\n\u003cli\u003eDo not feel embarrassed to ask for help when you need it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-forces-that-shape-us\"\u003e2 Forces that Shape Us\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eTony Robbins states that everyone has a desire to avoid pain and a desire to gain pleasure.\u003c/li\u003e\n\u003cli\u003eThe desire to avoid pain is often fueled by the need to protect oneself from physical or emotional harm.\u003c/li\u003e\n\u003cli\u003eThe desire to gain pleasure is often fueled by the need to feel good and seek out experiences that bring joy.\u003c/li\u003e\n\u003cli\u003eExample: learning a framework like React JS.\n\u003cul\u003e\n\u003cli\u003eAssociate pain with not learning React JS (e.g. job loss, missed opportunities).\u003c/li\u003e\n\u003cli\u003eAssociate pleasure with benefits of learning React JS (e.g. raise, interesting projects).\u003c/li\u003e\n\u003cli\u003eUse reminders (paper, phone, Slack bot) to keep consequences and benefits in mind.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"become-grateful\"\u003eBecome grateful\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eWe have really good salaries in comparison to others\u003c/li\u003e\n\u003cli\u003eWe have the opportunity to work on interesting projects, from home, with people all around the world\u003c/li\u003e\n\u003cli\u003eWe get paid to learn.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"the-impact-of-stress\"\u003eThe Impact of Stress\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eCauses: work, personal, financial, uncertainty.\u003c/li\u003e\n\u003cli\u003eNegative effects: anxiety, depression, heart disease, decreased productivity.\u003c/li\u003e\n\u003cli\u003ePositive effects: eustress enhances performance, motivation.\u003c/li\u003e\n\u003cli\u003eEffective management: relaxation, time management, support, self-care.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"time-management\"\u003eTime Management\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eTime management is essential for productivity.\u003c/li\u003e\n\u003cli\u003eProductive people prioritize tasks and manage time effectively.\u003c/li\u003e\n\u003cli\u003eAll individuals have 24 hours in a day.\u003c/li\u003e\n\u003cli\u003eTime is a finite resource and should be used wisely.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"tips-to-manage-your-time\"\u003eTips to Manage Your Time\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eSet goals.\u003c/li\u003e\n\u003cli\u003eCreate a schedule.\u003c/li\u003e\n\u003cli\u003eLearn to say no.\u003c/li\u003e\n\u003cli\u003eTake breaks.\u003c/li\u003e\n\u003cli\u003eStay organized.\u003c/li\u003e\n\u003cli\u003eKeep track of current time usage.\u003c/li\u003e\n\u003cli\u003eBatch activities to stay focused.\u003c/li\u003e\n\u003cli\u003eChoose the best location for productivity.\u003c/li\u003e\n\u003cli\u003eTime management is about finding what works best for you and maximizing productivity.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"use-a-calendar\"\u003eUse a Calendar\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eYour calendar is one of the most important productivity tools.\u003c/li\u003e\n\u003cli\u003eIt gives you a clear sense of time duration.\u003c/li\u003e\n\u003cli\u003eTodo lists can get too long.\u003c/li\u003e\n\u003cli\u003eYour calendar gives you a reality check.\u003c/li\u003e\n\u003cli\u003eCreate a calendar that outlines your daily schedule.\u003c/li\u003e\n\u003cli\u003eWrite down new commitments or appointments immediately.\u003c/li\u003e\n\u003cli\u003eUse color or symbols to indicate important tasks/events.\u003c/li\u003e\n\u003cli\u003eCheck the calendar the day before and prioritize tasks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"procrastination\"\u003eProcrastination\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eEveryone procrastinates.\u003c/li\u003e\n\u003cli\u003eThere are many reasons why we procrastinate:\n\u003cul\u003e\n\u003cli\u003eFeeling overwhelmed.\u003c/li\u003e\n\u003cli\u003eUnrealistic expectations.\u003c/li\u003e\n\u003cli\u003eFear of failure.\u003c/li\u003e\n\u003cli\u003eLack of motivation.\u003c/li\u003e\n\u003cli\u003ePerfectionism.\u003c/li\u003e\n\u003cli\u003eLack of discipline.\u003c/li\u003e\n\u003cli\u003eLack of energy.\u003c/li\u003e\n\u003cli\u003ePoor time management.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"rpm\"\u003eRPM\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eRPM stands for \u003cstrong\u003eResult\u003c/strong\u003e Focused \u003cstrong\u003ePurpose\u003c/strong\u003e Driven \u003cstrong\u003eMassive\u003c/strong\u003e Action Plan.\u003c/li\u003e\n\u003cli\u003eA really Useful technique by Tony Robbins that can motivate you to work hard.\u003c/li\u003e\n\u003cli\u003eThe RPM technique can help you turning your goals into reality.\u003c/li\u003e\n\u003cli\u003eThe RPM process consists of 4 steps:\n\u003cul\u003e\n\u003cli\u003eGet clear on your desired result.\u003c/li\u003e\n\u003cli\u003eIdentify your purpose behind the goal.\u003c/li\u003e\n\u003cli\u003eCreate a massive action plan by breaking the goal into manageable tasks and setting deadlines for each task.\u003c/li\u003e\n\u003cli\u003eTake consistent, focused action towards your goal every day.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"rpm-example\"\u003eRPM Example\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n          \u003cth\u003eResult\u003c/th\u003e\n          \u003cth\u003eMassive Action Plan\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e(1) Become a more valuable engineer.\u003cbr\u003e(2) Get a salary raise.\u003cbr\u003e(3) Get promoted.\u003cbr\u003e(4) Make my family proud.\u003c/td\u003e\n          \u003ctd\u003eBecome a Certified AWS Solutions Architect.\u003c/td\u003e\n          \u003ctd\u003e(1) Research about potential resources I can use to learn.\u003cbr\u003e(2) Prepare a roadmap of steps I need to follow to prepare.\u003cbr\u003e(3) Learn everything necessary\u003cbr\u003e(4) Pass the exam.\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"the-2-minute-rule\"\u003eThe 2 Minute Rule\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eIt is a simple and effective technique to manage workload and increase productivity.\u003c/li\u003e\n\u003cli\u003eIf you can get something done in 2 minutes or less, do it immediately.\u003c/li\u003e\n\u003cli\u003eIt helps you get small things done quickly and not overthink them.\u003c/li\u003e\n\u003cli\u003eIt can be applied to tasks like:\n\u003cul\u003e\n\u003cli\u003eWriting Jira comments.\u003c/li\u003e\n\u003cli\u003eReplying to Slack messages.\u003c/li\u003e\n\u003cli\u003eImproving a typo in the documentation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"the-15-minute-rule\"\u003eThe 15 Minute Rule\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eRule of 15 minutes is a technique to overcome procrastination.\u003c/li\u003e\n\u003cli\u003eSet a timer for 15 minutes and focus solely on the task at hand for that time.\u003c/li\u003e\n\u003cli\u003e15 minutes is short enough to be easy to commit to and long enough to make progress.\u003c/li\u003e\n\u003cli\u003eProgress is better than perfect, the goal is to get started and build momentum.\u003c/li\u003e\n\u003cli\u003eProgress compounds, the more work done the easier it becomes and momentum builds.\u003c/li\u003e\n\u003cli\u003eTry setting a timer for 15 minutes next time you are feeling stuck and make progress, no matter how small.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"perfectionism\"\u003ePerfectionism\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eTrying to do something perfectly.\u003c/li\u003e\n\u003cli\u003eThis is not usually not about being more.\u003c/li\u003e\n\u003cli\u003eThis is usually just one manifestation of procrastination.\u003c/li\u003e\n\u003cli\u003eStriving for perfection can prevent us from releasing our work.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"consequences-of-perfectionism\"\u003eConsequences of Perfectionism\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eEndless revisions and refinements leading to delays and missed deadlines.\u003c/li\u003e\n\u003cli\u003eProcrastination and a backlog of unfinished tasks.\u003c/li\u003e\n\u003cli\u003eUnrealistic expectations leading to frustration and demoralization.\u003c/li\u003e\n\u003cli\u003eOverwhelm and burnout.\u003c/li\u003e\n\u003cli\u003eMissed deadlines and falling behind schedule.\u003c/li\u003e\n\u003cli\u003eMissed opportunities for growth and innovation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"start-before-you-feel-motivated\"\u003eStart before you feel motivated\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eIt is hard to always be motivated.\u003c/li\u003e\n\u003cli\u003eThe \u0026ldquo;perfect\u0026rdquo; moment never comes.\u003c/li\u003e\n\u003cli\u003eMotivation comes after you start.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"break-large-tasks-into-small-ones\"\u003eBreak large tasks into small ones\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eLarge projects can be overwhelming and a source of procrastination .\u003c/li\u003e\n\u003cli\u003eBreak them into small simple tasks.\u003c/li\u003e\n\u003cli\u003eRemember that the best way to start is to just start and take it one step at a time.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;You eat an elephant one bite at a time\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"exercise\"\u003eExercise\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eRegular exercise is important for a healthy lifestyle.\u003c/li\u003e\n\u003cli\u003eIt reduces stress, improves sleep, increases energy levels, and improves overall physical fitness.\u003c/li\u003e\n\u003cli\u003eIt lowers the risk of chronic illnesses.\u003c/li\u003e\n\u003cli\u003eIt also enhances cognitive function, including memory and focus.\u003c/li\u003e\n\u003cli\u003eIncorporate activities like walking, biking, and swimming into daily routine .\u003c/li\u003e\n\u003cli\u003eJoin in an exercise class or participating in team sports.\u003c/li\u003e\n\u003cli\u003eGo to the gym to relieve stress and boost mental wellbeing.\u003c/li\u003e\n\u003cli\u003eSocialize with people in the local community.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"quick-tips-for-exercises\"\u003eQuick tips for exercises\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eTry walking or biking from time to time.\u003c/li\u003e\n\u003cli\u003eDownload an exercise app and do a few exercises throughout the day.\u003c/li\u003e\n\u003cli\u003eUtilize a jump rope for quick cardio workouts.\u003c/li\u003e\n\u003cli\u003eDo a few pushups or sit-ups throughout the day.\u003c/li\u003e\n\u003cli\u003eTake the stairs instead of the elevator.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"do-not-underestimate-sleep\"\u003eDo not underestimate sleep\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eSleep is essential for physical and mental restoration.\u003c/li\u003e\n\u003cli\u003eNot sleeping well can affect:\n\u003cul\u003e\n\u003cli\u003eOur ability to concentrate.\u003c/li\u003e\n\u003cli\u003eOur emotions and relations with others.\u003c/li\u003e\n\u003cli\u003eOur health.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"the-importance-of-focus\"\u003eThe Importance of Focus\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eFocus is extremely important for our productivity.\u003c/li\u003e\n\u003cli\u003eOur focus is limited so we need to prioritize things.\u003c/li\u003e\n\u003cli\u003eWe are constantly being distracted.\u003c/li\u003e\n\u003cli\u003eFocus is like a muscle\u003c/li\u003e\n\u003cli\u003eFocus helps us:\n\u003cul\u003e\n\u003cli\u003eGet things done faster.\u003c/li\u003e\n\u003cli\u003eStay present in the moment.\u003c/li\u003e\n\u003cli\u003eReduce stress and anxiety.\u003c/li\u003e\n\u003cli\u003eHave greater enjoyment and fulfillment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"how-to-improve-your-focus\"\u003eHow to improve your focus\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eSet clear goals and priorities.\u003c/li\u003e\n\u003cli\u003eIdentify distractions.\u003c/li\u003e\n\u003cli\u003eTurn off non important notifications.\u003c/li\u003e\n\u003cli\u003ePut your phone 6 feet away from you.\u003c/li\u003e\n\u003cli\u003eTake breaks and manage energy.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"multitasking-is-killing-your-productivity\"\u003eMultitasking is killing your Productivity\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMultitasking is the process of switching from one task into another.\u003c/li\u003e\n\u003cli\u003eIt can:\n\u003cul\u003e\n\u003cli\u003eBe inefficient.\u003c/li\u003e\n\u003cli\u003eSlow us down.\u003c/li\u003e\n\u003cli\u003eLead to mistakes.\u003c/li\u003e\n\u003cli\u003eBe a source of stress and anxiety.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"how-to-avoid-multitasking\"\u003eHow to avoid multitasking\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003ePrioritize your tasks.\u003c/li\u003e\n\u003cli\u003eFocus on one task at a time.\u003c/li\u003e\n\u003cli\u003eTurn off distractions.\u003c/li\u003e\n\u003cli\u003eTake breaks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"the-pomodoro-technique\"\u003eThe Pomodoro Technique\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eIt is a time management technique that helps you focus by using time-boxed intervals.\u003c/li\u003e\n\u003cli\u003eThe intervals are usually 25 minutes long followed by a 5 minute break.\u003c/li\u003e\n\u003cli\u003eAfter 4 pomodoros, take a longer break (15-30 minutes) to have some proper rest.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"delete-social-media-apps-from-your-phone\"\u003eDelete Social Media Apps from Your Phone\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eDelete social media apps from your phone.\u003c/li\u003e\n\u003cli\u003eSign out from social medias in the web browser.\u003c/li\u003e\n\u003cli\u003eNow you need to take a few more steps to use them.\u003c/li\u003e\n\u003cli\u003eEvery minute is valuable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"you-are-a-lifelong-learner\"\u003eYou are a lifelong learner\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eLearning doesn\u0026rsquo;t end after school or training program.\u003c/li\u003e\n\u003cli\u003eSoftware engineers must constantly learn to stay up-to-date.\u003c/li\u003e\n\u003cli\u003eEmbrace the mentality of being a lifelong learner.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"do-not-memorize-the-syntax\"\u003eDo not Memorize the Syntax\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eSwitching programming languages is common in a career.\u003c/li\u003e\n\u003cli\u003eMoving to a new language can be overwhelming, especially for beginners.\u003c/li\u003e\n\u003cli\u003eMemorizing everything is not necessary.\u003c/li\u003e\n\u003cli\u003eExperienced developers still need to look up information and documentation.\u003c/li\u003e\n\u003cli\u003eYou don\u0026rsquo;t have to be remember the syntax.\u003c/li\u003e\n\u003cli\u003eYou can use GitHub Copilot, ChatGPT to help you with the syntax.\u003c/li\u003e\n\u003cli\u003eYou are supposed to solve problems.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"avoid-the-tutorial-hell\"\u003eAvoid the Tutorial Hell\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eWatching many tutorials can give you a false impression that you are learning.\u003c/li\u003e\n\u003cli\u003eYou cannot learn new things by just passively watching.\u003c/li\u003e\n\u003cli\u003eYou get better at coding by actually coding.\u003c/li\u003e\n\u003cli\u003eBe more active with project-based learning.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"keep-a--to-learn-list\"\u003eKeep a \u0026rsquo; \u0026lsquo;TO Learn\u0026quot; List\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eEveryone keeps \u0026ldquo;To Do\u0026rdquo; lists.\u003c/li\u003e\n\u003cli\u003eThere is nothing wrong with that.\u003c/li\u003e\n\u003cli\u003eAs a lifelong learner, you should also keep another very important list.\u003c/li\u003e\n\u003cli\u003eYou should keep a \u0026ldquo;To Learn\u0026rdquo; list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"benefits-of-keeping-to-learn--lists\"\u003eBenefits Of Keeping \u0026ldquo;To Learn\u0026rdquo;  Lists\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eIt can help you stay:\n\u003cul\u003e\n\u003cli\u003eCurious.\u003c/li\u003e\n\u003cli\u003eMotivated.\u003c/li\u003e\n\u003cli\u003eHumble.\u003c/li\u003e\n\u003cli\u003eProductive.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"learn-by-building-things-from-scratch\"\u003eLearn by Building Things From Scratch\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eBuilding from scratch enhances understanding.\u003c/li\u003e\n\u003cli\u003eActive learning through building.\u003c/li\u003e\n\u003cli\u003eLearn principles and underlying concepts.\u003c/li\u003e\n\u003cli\u003eDevelop problem-solving skills.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"see-the-bigger-picture\"\u003eSee the Bigger Picture\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eDrive the business forward by adding value.\u003c/li\u003e\n\u003cli\u003eAvoid getting lost in trivial tasks and focus on critical problems.\u003c/li\u003e\n\u003cli\u003eIncrease value and productivity by investing time wisely in high-impact areas.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"the-feynman-technique\"\u003eThe Feynman Technique\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eThere is a difference between just knowing the name of something and actually understanding something.\u003c/li\u003e\n\u003cli\u003eThe Feynman Technique can help you understand complex topics.\u003c/li\u003e\n\u003cli\u003eThe technique is a four-step process:\n\u003col\u003e\n\u003cli\u003eChoose a topic that you want to learn.\u003c/li\u003e\n\u003cli\u003eTeach it to yourself or someone else.\u003c/li\u003e\n\u003cli\u003eWhenever you get stuck, go back to the book, or course.\u003c/li\u003e\n\u003cli\u003eUse simple examples and analogies.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"learn-to-build-something-that-already-exists\"\u003eLearn to build something that already exists\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eAvoid overwhelming yourself with complex business decisions.\u003c/li\u003e\n\u003cli\u003eClone open-source projects.\u003c/li\u003e\n\u003cli\u003eReplicate projects you already use.\u003c/li\u003e\n\u003cli\u003eKeep learning simple.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"learn-concepts-not-specific-problems\"\u003eLearn Concepts not Specific Problems\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eUnderstand concepts, not just memorize solutions.\u003c/li\u003e\n\u003cli\u003eLearn underlying principles, design patterns, and best practices.\u003c/li\u003e\n\u003cli\u003eIncrease problem-solving efficiency and effectiveness.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"work-on-side-projects\"\u003eWork on side projects\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eYou need to improve your skills.\u003c/li\u003e\n\u003cli\u003eSide projects can serve as a sandbox to try out new technologies, frameworks.\u003c/li\u003e\n\u003cli\u003eNo need to finish complete apps.\u003c/li\u003e\n\u003cli\u003eEven prototypes can help you learn a lot.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"be-kind-to-yourself\"\u003eBe Kind to Yourself\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eThere is so much to learn and get done.\u003c/li\u003e\n\u003cli\u003eWe may feel overwhelmed, anxious, and stressed.\u003c/li\u003e\n\u003cli\u003eIt is very important to prioritize our own well-being.\u003c/li\u003e\n\u003cli\u003ePractice self-compassion.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"develop-positive-relationships-with-your-family\"\u003eDevelop Positive Relationships with Your Family\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eQuality family time boosts motivation and drive.\u003c/li\u003e\n\u003cli\u003eOpen communication sets healthy boundaries.\u003c/li\u003e\n\u003cli\u003eActive listening and respect foster positivity.\u003c/li\u003e\n\u003cli\u003eAppreciation and gratitude fuel success.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"build-positive-relationships-at-work\"\u003eBuild Positive Relationships at Work\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eBuild relationships with colleagues. Listen and respect.\u003c/li\u003e\n\u003cli\u003eShow appreciation for colleagues work.\u003c/li\u003e\n\u003cli\u003eOffer assistance and be a team player.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"meet-new-people\"\u003eMeet new people\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMeeting new people helps you:\n\u003cul\u003e\n\u003cli\u003eExpand your professional circle.\u003c/li\u003e\n\u003cli\u003eGet involved in new opportunities.\u003c/li\u003e\n\u003cli\u003eDevelop new skills and experiences.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eBe open to meeting people whenever there is an opportunity.\u003c/li\u003e\n\u003cli\u003eYou can grow both personally and professionally.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"log-your-achievements\"\u003eLog Your Achievements\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eWe accomplish a lot of things in our work:\n\u003cul\u003e\n\u003cli\u003eFix critical bugs.\u003c/li\u003e\n\u003cli\u003eFinish urgent tasks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eYour work can have a really profound impact on the project.\u003c/li\u003e\n\u003cli\u003eAs times goes by, we forget about them.\u003c/li\u003e\n\u003cli\u003eAs such, it is extremely important to log our achievements.\u003c/li\u003e\n\u003cli\u003eWhen we log our achievements, we can:\n\u003cul\u003e\n\u003cli\u003eTrack our progress.\u003c/li\u003e\n\u003cli\u003eIdentify areas of improvement.\u003c/li\u003e\n\u003cli\u003eFeel a higher sense of meaning and satisfaction.\u003c/li\u003e\n\u003cli\u003eFeel more confident.\u003c/li\u003e\n\u003cli\u003eHave higher levels of happiness.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"how-to-log-your-achievements\"\u003eHow to Log Your Achievements\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eUse a document to list accomplishments, trainings, and relevant details.\u003c/li\u003e\n\u003cli\u003eCapture positive feedback (emails, Jira comments, personal messages) as reminders.\u003c/li\u003e\n\u003cli\u003eTrack achievements for improvement and impact.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"learn-to-write\"\u003eLearn to write\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eEffective writing is crucial for software developers.\u003c/li\u003e\n\u003cli\u003eWriting saves time and prevents misunderstandings.\u003c/li\u003e\n\u003cli\u003eIt boosts productivity, credibility, and career growth.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;What many people underestimate is that being a good writer, whether that is through emails or through documents. allows you to be more impactful. I see many engineers ignore that skill. You might be proud of your code. You should also be equally proud of the craft of writing\u0026hellip; Writing is a highly underestimated skill for engineers.\u0026rdquo; Urs Hölzle, Google\u0026rsquo;s first VP of Engineering.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"power-up-your-career-with-presentations\"\u003ePower Up Your Career with Presentations\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003ePresentations enhance careers and skills.\u003c/li\u003e\n\u003cli\u003eSharing knowledge through presentations builds confidence and expertise.\u003c/li\u003e\n\u003cli\u003eOvercoming the fear of public speaking fuels personal and professional growth.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"learn-keyboard-shortcuts\"\u003eLearn keyboard shortcuts\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eKeyboard shortcuts save time and reduce hand movements.\u003c/li\u003e\n\u003cli\u003eLearn shortcuts for common tasks.\u003c/li\u003e\n\u003cli\u003eMastering shortcuts boosts productivity and makes work more enjoyable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"master-debugging\"\u003eMaster debugging\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eSoftware Engineers spend more time debugging than coding.\u003c/li\u003e\n\u003cli\u003eInvest time getting better at it.\u003c/li\u003e\n\u003cli\u003eUse logs and read error messages carefully.\u003c/li\u003e\n\u003cli\u003eUse debugging tools:\n\u003cul\u003e\n\u003cli\u003ebreakpoints.\u003c/li\u003e\n\u003cli\u003ewatch windows.\u003c/li\u003e\n\u003cli\u003ecall stacks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"improve-your-typing-speed\"\u003eImprove Your Typing Speed\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eTyping is a big part of our daily lives: emails, messages, documents.\u003c/li\u003e\n\u003cli\u003eFaster typing means more productivity and efficiency.\u003c/li\u003e\n\u003cli\u003ePractice can improve your typing speed.\u003c/li\u003e\n\u003cli\u003eJust 5-10 minutes a day for a few weeks can make a significant difference.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eKnowledge is not power.\u003c/li\u003e\n\u003cli\u003eKnowledge is potential power.\u003c/li\u003e\n\u003cli\u003eApplied knowledge is actual power.\u003c/li\u003e\n\u003cli\u003eIt is very important to practice what you learn.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eSource:\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/C_jQahOnGUU?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\u003c/p\u003e","title":"Productivity as Developer"},{"content":"Step 1: Gain Skillset There ara different types of freelancers. The first step is to figure out where you will start and then learn the technologies needed.\nTypes of Freelancers \u0026amp; Project Scope Types of Freelancers Scope Tech Stack Pricing Basic Web Developer/Designer Simple static websites like landing pages, small blogs, portfolios, etc HTML, CSS, JS, Tailwind Low CMS-Based Web Developer Customizable sites with Wordpress, Shopify\nand other GUI tools + Custom Code Basic Web Technologies, Some PHP, Wordpress, Shopify, Webflow, Squarespace, etc Medium Full Stack Web Developer Builds more complex web apps using frontend and backend frameworks Tech Stack: JS frameworks, Node, PHP, Python, databases, ORMs, Jamstack, Headless CMS High Niche Developer Specializes in an area like eCommerce, SaaS, 3D \u0026amp; Animation, AI/ML, etc Varies Very High Web Development Fundamentals Web development fundamentals you should be learned no mater which route you take:\n✅ HTML, the structure of your web pages. ✅ CSS, the style of your web pages. ✅ JavaScript, the behavior of your web pages. Design Fundamentals Learn the basics of design. You do not have to be a full-fledged graphic designer. You could even explore pre-made templates.\n✅ Contrast ✅ Color Scale ✅ Whitespace ✅ Typography Wordpress Wordpress is still very popular in the freelance world. There are many clients that want a dynamic website that they can update themselves. Wordpress or another CMS can save you a ton of time as opposed to creating something from scratch.\nPHP Learn PHP so that you can customize projects to the clients liking. You can then customize Wordpress plugins and themes and even create your own and reuse them.\nJamstack Technologies JavaScript, APIs \u0026amp; Markup\n✅ Headless CMS (strapi, Sanity.io) ✅ SSR Frameworks (Next, Nuxt) ✅ Static Site Generators (Gatsby, Gridsome, Astro) ✅ Markdown Step 2: Kick Start Your Business If you plan on taking on client, there are some things you need to do to get your business going.\nInitial Business Setup Business name or your own name? Find out the requirements for registering a business in your area. Create a business banking account. Business Types DBA (Doing Business As) Sole Proprietorship LLC (Limited Liability) S-Corp (For Higher Income) Business Branding Whether you decide to start an actual business or work as an individual, you should have some branding for your online presence. Select a color palette. I would also suggest creating a logo even if you are working under your own name. Take a good picture of yourself that you can use with your social accounts and job websites\nBusiness Plan BUSINESS IDEA What is your big idea? Is it a product or a service? What makes your idea different? How will your products/services stand out from the competition? Why will people want to buy? BUSINESS NAME What does this name say about your business? Is it unique? Memorable? Easy to pronounce?\nTARGET MARKET \u0026amp; DEMOGRAPHICS: Who will your customers be? Other Kids? Teenagers? Men? Women? Where do they live? What is your target market passionate about? MARKETING How will you get the word out about your business? Online? Posters? Through the Newspaper? By Email? Where will you sell your products or services? PRICING How much will you charge? What are your competitors charging? PROFIT How much will you make on each sale after you subtract your expenses? Profit = Income - Expenses Sale price of item, Cost of item, Profit What will you do with the money you make? Reinvest in the business? Save for college? Donate? Website \u0026amp; Portofolio Your portfolio is a key aspect to your success. This gives clients something to look at to prove to them you can do the job. If you have no work to show, use some personal projects.\nSocial Media \u0026amp; Web Presence ✅ Twitter ✅ Facebook ✅ LinkedIn ✅ Blog Articles ✅ Stack Overflow ✅ Reddit ✅ GitHub Step 3: Establish Your Freelance Presence Now it\u0026rsquo;s time to expose yourself as freelancer. This includes both freelancing websites and other methods.\nFreelance Websites ✅ Upwork.com ✅ Freelancer.com ✅ Fiverr.com ✅ Toptal.com ✅ Upstack.co ✅ Guru.com Optimize Your Profile ✅ Captivating Title \u0026amp; Description ✅ Clear \u0026amp; Professional Picture ✅ Portfolio \u0026amp; Past Work ✅ Past Client Work ✅ Categorize Yourself Correctly Set Your Pricing Come up with a pricing scale. There are many pricing methods:\n✅ Hourly ✅ Fixed (Project-Based) ✅ Ongoing Pricing Apply For Jobs Now you can start applying for jobs on freelancing sites. You should apply to as many as you can, but be sure that you are qualified for whatever you apply to. When you apply for a job, you will write an initial proposal.\nProposals Learn how to write excellent proposals that grab clients\u0026rsquo; attention and increase your chances of landing jobs.\nOther Ways To Find Clients ✅ Local Outreach ✅ Cold Emails ✅ Content Creation ✅ Referrals \u0026amp; Word Of Mouth ✅ Social Media ✅ Friends \u0026amp; Family ✅ Freelance Agencies ✅ Directories Like Yelp ✅ Networking, Conferences, Meetups Step 4: Your Workflow Now it\u0026rsquo;s time to get work. You may have a rough start, but you will eventually have a smooth workflow for each project.\nDiscovery Have an initial discovery phase where you talk to the client and ask questions and get all of the information that you can as well as any assets including images, content, etc.\nProposal \u0026amp; Contract Delivery Deliver your proposal along with a contract to be signed that outlines the work to be done, deadline, budget and payment schedule\nInvoicing \u0026amp; Payment You will need a way to collect payment from your client. There are a lot of different options for this. Find one that makes it very easy for the client to pay.\n✅ PayPal ✅ Venmo ✅ Stripe ✅ FreshBooks ✅ Bonsai ✅ QuickBooks ✅ BookiPi ✅ Invoicely Communication \u0026amp; Updates After the initial consult, have regular updates about the project including what you\u0026rsquo;ve done and what you are currently working on.\nProductivity Tools You will also come up with some tools to make life easier for you and help you stay organized.\n✅ Development Tools (Editors, IDES, Extensions) ✅ Al Tools (CharGPT, Midjourney, Copilot) ✅ Project \u0026amp; Task Management (Trello, Notion, Asana, Todoist) ✅ Time Tracking \u0026amp; Billing (Clockify, Toggl, Harvest) ✅ Code Collaboration (GitHub, GitLab, CodeSandbox) ✅ Deployment \u0026amp; Hosting (Vercel, Netlify, Digital Ocean, CPanel) Step 5: On Going Work With every client, you have opportunity to turn a one-time project into a recurring service and make an ongoing income.\nOngoing Service Offerings As a freelancer, you can gain some of the following skills to provide ongoing services\n✅ Website Maintenance ✅ Tech Support ✅ SEO \u0026amp; Marketing ✅ Web Hosting ✅ Content Writing ✅ Social Networking Management Upselling Clients Pitch ongoing work to clients where it makes sense.\nStep 6: Outsourcing \u0026amp; Scaling There will come a time where you will need help in order to keep growing you can start to think about outsourcing or possibly hiring employees\nOutsourcing Help You can search for help on the same freelance websites where you applied for jobs.\nHiring In-House You can hire in-house employees, just know that it starts to get a bit more complicated. If you\u0026rsquo;re a sole proprietorship, you will need to change to an LLC or S-Corp and add payroll services. Having employees can be a lot of work and can cause some stress, but it can really bring your business to the next level and bring you from freelancer to an employer and the owner of an agency.\nScaling Your Business In addition to hiring, you can scale your business in terms of expanding your workspace, license or white-label your work, offer things like consulting and coaching and more.\nSource: ","permalink":"https://wewnumam.github.io/articles/freelance-web-dev-roadmap/","summary":"\u003ch1 id=\"step-1-gain-skillset\"\u003eStep 1: Gain Skillset\u003c/h1\u003e\n\u003cp\u003eThere ara different types of freelancers. The first step is to figure out where you will start and then learn the technologies needed.\u003c/p\u003e\n\u003ch2 id=\"types-of-freelancers--project-scope\"\u003eTypes of Freelancers \u0026amp; Project Scope\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTypes of Freelancers\u003c/th\u003e\n          \u003cth\u003eScope\u003c/th\u003e\n          \u003cth\u003eTech Stack\u003c/th\u003e\n          \u003cth\u003ePricing\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eBasic Web Developer/Designer\u003c/td\u003e\n          \u003ctd\u003eSimple static websites like landing pages, small blogs, portfolios, etc\u003c/td\u003e\n          \u003ctd\u003eHTML, CSS, JS, Tailwind\u003c/td\u003e\n          \u003ctd\u003eLow\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eCMS-Based Web Developer\u003c/td\u003e\n          \u003ctd\u003eCustomizable sites with Wordpress, Shopify\u003cbr\u003eand other GUI tools + Custom Code\u003c/td\u003e\n          \u003ctd\u003eBasic Web Technologies, Some PHP, Wordpress, Shopify, Webflow, Squarespace, etc\u003c/td\u003e\n          \u003ctd\u003eMedium\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eFull Stack Web Developer\u003c/td\u003e\n          \u003ctd\u003eBuilds more complex web apps using frontend and backend frameworks\u003c/td\u003e\n          \u003ctd\u003eTech Stack: JS frameworks, Node, PHP, Python, databases, ORMs, Jamstack, Headless CMS\u003c/td\u003e\n          \u003ctd\u003eHigh\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eNiche Developer\u003c/td\u003e\n          \u003ctd\u003eSpecializes in an area like eCommerce, SaaS, 3D \u0026amp; Animation, AI/ML, etc\u003c/td\u003e\n          \u003ctd\u003eVaries\u003c/td\u003e\n          \u003ctd\u003eVery High\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"web-development-fundamentals\"\u003eWeb Development Fundamentals\u003c/h2\u003e\n\u003cp\u003eWeb development fundamentals you should be learned no mater which route you take:\u003c/p\u003e","title":"Freelance Web Dev Roadmap"},{"content":" Data Source:\nhttps://docs.google.com/spreadsheets/d/e/2PACX-1vTYmi8HLvPPIhFxOu00NLTWU-R37X7oWtyQbvIeEkO9sJ_P8_C6mFJ6cRJbr_-k1WgoXFtxcmPa0bF5/pubhtml\n","permalink":"https://wewnumam.github.io/articles/gametech-stmm-mmtc-graduate-profile/","summary":"\u003ciframe width=\"600\" height=\"371\" seamless frameborder=\"0\" scrolling=\"no\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTYmi8HLvPPIhFxOu00NLTWU-R37X7oWtyQbvIeEkO9sJ_P8_C6mFJ6cRJbr_-k1WgoXFtxcmPa0bF5/pubchart?oid=107174344\u0026amp;format=interactive\"\u003e\u003c/iframe\u003e\n\u003ciframe width=\"600\" height=\"371\" seamless frameborder=\"0\" scrolling=\"no\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTYmi8HLvPPIhFxOu00NLTWU-R37X7oWtyQbvIeEkO9sJ_P8_C6mFJ6cRJbr_-k1WgoXFtxcmPa0bF5/pubchart?oid=1647458298\u0026amp;format=interactive\"\u003e\u003c/iframe\u003e\n\u003ciframe width=\"600\" height=\"371\" seamless frameborder=\"0\" scrolling=\"no\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTYmi8HLvPPIhFxOu00NLTWU-R37X7oWtyQbvIeEkO9sJ_P8_C6mFJ6cRJbr_-k1WgoXFtxcmPa0bF5/pubchart?oid=1990046861\u0026amp;format=interactive\"\u003e\u003c/iframe\u003e\n\u003ciframe width=\"600\" height=\"371\" seamless frameborder=\"0\" scrolling=\"no\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTYmi8HLvPPIhFxOu00NLTWU-R37X7oWtyQbvIeEkO9sJ_P8_C6mFJ6cRJbr_-k1WgoXFtxcmPa0bF5/pubchart?oid=1005661680\u0026amp;format=interactive\"\u003e\u003c/iframe\u003e\n\u003ciframe width=\"600\" height=\"371\" seamless frameborder=\"0\" scrolling=\"no\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTYmi8HLvPPIhFxOu00NLTWU-R37X7oWtyQbvIeEkO9sJ_P8_C6mFJ6cRJbr_-k1WgoXFtxcmPa0bF5/pubchart?oid=954510094\u0026amp;format=interactive\"\u003e\u003c/iframe\u003e\n\u003ciframe width=\"600\" height=\"371\" seamless frameborder=\"0\" scrolling=\"no\" src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTYmi8HLvPPIhFxOu00NLTWU-R37X7oWtyQbvIeEkO9sJ_P8_C6mFJ6cRJbr_-k1WgoXFtxcmPa0bF5/pubchart?oid=852257893\u0026amp;format=interactive\"\u003e\u003c/iframe\u003e\n\u003chr\u003e\n\u003cp\u003eData Source:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTYmi8HLvPPIhFxOu00NLTWU-R37X7oWtyQbvIeEkO9sJ_P8_C6mFJ6cRJbr_-k1WgoXFtxcmPa0bF5/pubhtml\"\u003ehttps://docs.google.com/spreadsheets/d/e/2PACX-1vTYmi8HLvPPIhFxOu00NLTWU-R37X7oWtyQbvIeEkO9sJ_P8_C6mFJ6cRJbr_-k1WgoXFtxcmPa0bF5/pubhtml\u003c/a\u003e\u003c/p\u003e","title":"Gametech STMM MMTC Graduate Profile"},{"content":"Hi guys, especially my game developer friends on campus! Have you thought about what you will do after graduation? Do you have a plan? Are you interested in becoming a programmer? What have you done to develop your skills as a programmer, such as creating projects or diligently coding?\nHowever, the question is, is that enough? With your current skills, who would want to hire you? There are hundreds or thousands of people with similar skills, so what makes you irreplaceable? Where is your uniqueness?\nWhat gets in the way of your efforts? Is it mood, procrastination, time management, other people, environment, or opportunity? This discussion is not to patronize or give advice, but rather to be a moment of invitation for you to train yourself, build positive habits for yourself and others.\nThis is not just a pep talk, but also a practical guide that can be implemented. Remember, make a habit not by being told, but by being trained.\nWhy not talk about technical stuff?\nWhy don\u0026rsquo;t we talk about technical stuff like Unity or Blender tutorials? Because tutorials can be learned anytime and anywhere. We can figure it out on our own. We have provided resources that can help you with this.\nhttps://roadmap.sh/ https://github.com/wewnumam/gtstmm-gamedev-roadmap The question is, there are millions of articles and videos on the internet, but why don\u0026rsquo;t you know? Maybe it\u0026rsquo;s because you haven\u0026rsquo;t looked for it or you don\u0026rsquo;t want to look for it. The way to know? Find out. How do you do that? Have a habit of finding out.\nTable of Contents How the World Works (Complex) Why is it important? To understand how to measure potential.\nHow Humans Work (Habits) Why is it important? To maximize your potential.\nHow Programmers Work (Pragmatic) How Unity Works (Components) Fair Play \u0026amp; Unfair Advantage SUCCESS WINNER = FAIR PLAY x UNFAIR ADVANTAGE\nFair Play A must-have for survival that everyone can emulate.\nWillpower Hard Work Consistency Growth Mindset Unfair Advantage A position-defining factor that not everyone can replicate.\nMoney Intelligence \u0026amp; Insight Location \u0026amp; Luck Education \u0026amp; Expertise Status I\u0026rsquo;m confused why we demand from lecturers to give fair play treatment, such as providing relevant materials and showing a disciplined attitude, while on the other hand, lecturers can give unfair advantages such as industry connections, facilities, and involvement in a project.\nChampions don\u0026rsquo;t do extraordinary things, they do ordinary things, just without thinking. just without thinking, so fast that the opposing team doesn\u0026rsquo;t have time to react. They follow the habits they have learned.\nThe Importance of Habits Most of the choices we make on a daily basis may feel like the result of making well-considered decisions, but they are not. Those choices they are habits.\nWhat\u0026rsquo;s the first app you open on your phone or laptop? Instagram? Whatsapp? Facebook? Do you realize you are choosing to open it? When you hear the notification ringtone, what comes to mind?\nHabits, scientists say, arise because the brain is constantly looking for ways to save effort.\nHow to Start Awareness Habits are a gradual circle of three signs, routines, and rewards. The Golden Rule of Habit Change: We cannot eliminate bad habits, we can only change them. How it Works: Use the same signs same signs, provide the same rewards, change the routine.\nGoals It\u0026rsquo;s okay not to have goals, just get your basic needs met first:\nAs humans we need to work to make ends meet As an unemployed person, we need hard skills to perform our duties. As a game developer we need to make games As a student we need \u0026hellip;. for personal goals after graduation Study by taking the time by utilizing existing facilities Open up opportunities by showing yourself by involving yourself Four Rules of Behavior Change making it visible (clues), make it attractive (arousal), make it easy (response), and make it satisfying (reward) Progammer habits Pragmatic about features Continuous learning (stay up to date) Building second brain Problem Solving LR flowchart Input --\u0026gt; Process Process --\u0026gt; Output Day to Day Programmer Design - Documentation - Testing If you think the programmer\u0026rsquo;s job is coding, it\u0026rsquo;s not right. Coding is a handyman\u0026rsquo;s job, making applications is a foreman\u0026rsquo;s job, programmers are like architects, developing applications. Unity Components \u0026hellip;\nExpectations Can control yourself Don\u0026rsquo;t let emotions make decisions.\nCan measure the impact/end of our daily decisions (habit) Every action has consequences.\nCan prioritize our actions Take notes.\nCan understand any action in life is take-and-give (win-win) Nothing is free. A relationship depends on value exchange.\nCan understand the needs and perspectives of others The world doesn\u0026rsquo;t run on our terms.\nCan synergize with others ","permalink":"https://wewnumam.github.io/articles/having-the-right-mindset-as-a-programmer/","summary":"\u003cp\u003eHi guys, especially my game developer friends on campus! Have you thought about what you will do after graduation? Do you have a plan? Are you interested in becoming a programmer? What have you done to develop your skills as a programmer, such as creating projects or diligently coding?\u003c/p\u003e\n\u003cp\u003eHowever, the question is, is that enough? With your current skills, who would want to hire you? There are hundreds or thousands of people with similar skills, so what makes you irreplaceable? Where is your uniqueness?\u003c/p\u003e","title":"Having the Right Mindset as a Programmer"},{"content":"Assosiation Asosiasi Game Indonesia (AGI) Asosiasi Game Indonesia (AGI) is an organisation whose aim is to accelerate the growth of the Indonesian video game industry. Indie Games Group Indonesia (IGGI) A virtual community for Game Developers in Indonesia that aims to connect GameDevs at all levels. IGDA Indonesia The International Game Developers Association (IGDA) is the world’s largest nonprofit membership organization serving all individuals who create games. General Community Game Developer ID GameDeveloper.ID is an initiative to gather various resources related to game development information in Indonesia that have been scattered and separated on various social media platforms, especially after the disappearance of the gamedevid.org forum. Selasar Game Design Selasar Game Design (SGD) is a community to gather and learn Game Design for anyone across Indonesia. Candela Imagine Indonesian Game Industry Agency co-publishing. UNITY 3D Developers Indonesia Godot Engine Indonesia Unreal Developers Indonesia RPG Maker MV / VX / VX Ace / XP Construct 2 \u0026amp; 3 - Tutorial Indonesia Regional Community GameLan Game Developer Batam Game Developer Bandung Game Developer Bogor Game Developer Tanggerang Game Developer Malang Game Developer Palembang Game Developer Solo Game Developer Surabaya Game Developer Bekasi Game Developer Bali Game Developer Surabaya Media The Lazy Monday Game Developer ID Formal Academy STMM MMTC PENS BINUS Vocational Academy IGDX Agate Academy Miracle Academy Gamelab Academy ","permalink":"https://wewnumam.github.io/articles/indonesian-game-developer-forums/","summary":"\u003ch2 id=\"assosiation\"\u003eAssosiation\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=\"asosiasi-game-indonesia-agi\"\u003eAsosiasi Game Indonesia (AGI)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eAsosiasi Game Indonesia (AGI) is an organisation whose aim is to accelerate the growth of the Indonesian video game industry.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.agi.or.id/\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=agi.or.id\u0026style=flat-square\u0026url=https://www.agi.or.id/\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://facebook.com/AsosiasiGameIndonesia\"\u003e\u003cimg alt=\"Facebook\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-AsosiasiGameIndonesia-1877F2?logo=facebook\u0026style=flat-squar\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/asosiasigame_id/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@asosiasigame__id-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/intent/follow?screen_name=asosiasigame_id\"\u003e\u003cimg alt=\"Twitter\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@asosiasigame__id-1D9BF0?logo=twitter\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://discord.gg/A9AhF5y\"\u003e\u003cimg alt=\"Discord\" loading=\"lazy\" src=\"https://img.shields.io/discord/475157694660214795?link=https://discord.gg/A9AhF5y\u0026logo=discord\u0026style=flat-square\u0026label=https://discord.gg/A9AhF5y\u0026color=5865F2\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UCkPjm808TGpr_d7jMp7jeig\"\u003e\u003cimg alt=\"Youtube\" loading=\"lazy\" src=\"https://img.shields.io/youtube/channel/subscribers/UCkPjm808TGpr_d7jMp7jeig?logo=youtube\u0026style=flat-square\u0026label=@AsosiasiGameIndonesia\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"indie-games-group-indonesia-iggi\"\u003eIndie Games Group Indonesia (IGGI)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eA virtual community for Game Developers in Indonesia that aims to connect GameDevs at all levels.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://linktr.ee/igg.indonesia\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=linktr.ee/igg.indonesia\u0026style=flat-square\u0026url=https://linktr.ee/igg.indonesia\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.facebook.com/iggindonesia\"\u003e\u003cimg alt=\"Facebook\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-iggindonesia-1877F2?logo=facebook\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://instagram.com/igg_indonesia\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@igg_indonesia-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/intent/follow?screen_name=igg_indonesia\"\u003e\u003cimg alt=\"Twitter\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@igg_indonesia-1D9BF0?logo=twitter\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://discord.gg/igg-indonesia\"\u003e\u003cimg alt=\"Discord\" loading=\"lazy\" src=\"https://img.shields.io/discord/930459320800399390?logo=discord\u0026style=flat-square\u0026label=discord.gg/igg-indonesia\u0026color=5865F2\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UCV7k0V1mNVLIiAvnqQUnCMQ\"\u003e\u003cimg alt=\"Youtube\" loading=\"lazy\" src=\"https://img.shields.io/youtube/channel/subscribers/UCV7k0V1mNVLIiAvnqQUnCMQ?logo=youtube\u0026style=flat-square\u0026label=@indiegamesgroupindonesia\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"igda-indonesia\"\u003eIGDA Indonesia\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe International Game Developers Association (IGDA) is the world’s largest nonprofit membership organization serving all individuals who create games.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://linktr.ee/IGDAIndonesia\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=linktr.ee/IGDAIndonesia\u0026style=flat-square\u0026url=https://linktr.ee/IGDAIndonesia\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://igda.org/chapters/indonesia/\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=igda.org/chapters/indonesia/\u0026style=flat-square\u0026url=https://igda.org/chapters/indonesia/\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://instagram.com/indonesiaigda\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@indonesiaigda-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://discord.gg/T6XqRSgrSy\"\u003e\u003cimg alt=\"Discord\" loading=\"lazy\" src=\"https://img.shields.io/discord/894575538071552032?logo=discord\u0026style=flat-square\u0026label=discord.gg/T6XqRSgrSy\u0026color=5865F2\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"general-community\"\u003eGeneral Community\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-id\"\u003eGame Developer ID\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eGameDeveloper.ID is an initiative to gather various resources related to game development information in Indonesia that have been scattered and separated on various social media platforms, especially after the disappearance of the gamedevid.org forum.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gamedeveloper.id\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=gamedeveloper.id\u0026style=flat-square\u0026url=https://gamedeveloper.id\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.facebook.com/groups/gamedevid/\"\u003e\u003cimg alt=\"Facebook\" loading=\"lazy\" src=\"https://img.shields.io/badge/join-gamedevid-1877F2?logo=facebook\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://discord.gg/fjBbJwS\u0026amp;\"\u003e\u003cimg alt=\"Discord\" loading=\"lazy\" src=\"https://img.shields.io/discord/226382376555511809?logo=discord\u0026style=flat-square\u0026label=discord.gg/fjBbJwS\u0026color=5865F2\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"selasar-game-design\"\u003eSelasar Game Design\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSelasar Game Design (SGD) is a community to gather and learn Game Design for anyone across Indonesia.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://instagram.com/selasargamedesign\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@selasargamedesign-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://discord.gg/84yDbnS5nn\"\u003e\u003cimg alt=\"Discord\" loading=\"lazy\" src=\"https://img.shields.io/discord/1096456366199160852?logo=discord\u0026style=flat-square\u0026label=discord.gg/84yDbnS5nn\u0026color=5865F2\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"candela-imagine\"\u003eCandela Imagine\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIndonesian Game Industry Agency co-publishing.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://candelaimagine.com\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=candelaimagine.com\u0026style=flat-square\u0026url=https://candelaimagine.com\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://instagram.com/candela.imagine_id\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@candela.imagine_id-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://discord.gg/hw7F8vG3t3\"\u003e\u003cimg alt=\"Discord\" loading=\"lazy\" src=\"https://img.shields.io/discord/649590305619705887?logo=discord\u0026style=flat-square\u0026label=discord.gg/hw7F8vG3t3\u0026color=5865F2\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"unity-3d-developers-indonesia\"\u003eUNITY 3D Developers Indonesia\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.facebook.com/groups/UNITY3D.INDONESIAN.GAME.DEVELOPERS/\"\u003e\u003cimg alt=\"Facebook\" loading=\"lazy\" src=\"https://img.shields.io/badge/join-UNITY3D.INDONESIAN.GAME.DEVELOPERS-1877F2?logo=facebook\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"godot-engine-indonesia\"\u003eGodot Engine Indonesia\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.facebook.com/groups/godotindonesia/\"\u003e\u003cimg alt=\"Facebook\" loading=\"lazy\" src=\"https://img.shields.io/badge/join-godotindonesia-1877F2?logo=facebook\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"unreal-developers-indonesia\"\u003eUnreal Developers Indonesia\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.facebook.com/groups/unrealdev.id/\"\u003e\u003cimg alt=\"Facebook\" loading=\"lazy\" src=\"https://img.shields.io/badge/join-unrealdev.id-1877F2?logo=facebook\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"rpg-maker-mv--vx--vx-ace--xp\"\u003eRPG Maker MV / VX / VX Ace / XP\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.facebook.com/groups/rpgmakervx.ace.xp/\"\u003e\u003cimg alt=\"Facebook\" loading=\"lazy\" src=\"https://img.shields.io/badge/join-rpgmakervx.ace.xp-1877F2?logo=facebook\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"construct-2--3---tutorial-indonesia\"\u003eConstruct 2 \u0026amp; 3 - Tutorial Indonesia\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.facebook.com/groups/constructindo/\"\u003e\u003cimg alt=\"Facebook\" loading=\"lazy\" src=\"https://img.shields.io/badge/join-constructindo-1877F2?logo=facebook\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"regional-community\"\u003eRegional Community\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=\"gamelan\"\u003eGameLan\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://instagram.com/gamelan.yk\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamelan.yk-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.facebook.com/GamelanYK\"\u003e\u003cimg alt=\"Facebook\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-GamelanYK-1877F2?logo=facebook\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-batam\"\u003eGame Developer Batam\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://linktr.ee/GameDeveloperBatam\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=linktr.ee/GameDeveloperBatam\u0026style=flat-square\u0026url=https://linktr.ee/GameDeveloperBatam\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://instagram.com/gdb.community\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gdb.community-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@gamedeveloperbatam2964\"\u003e\u003cimg alt=\"Youtube\" loading=\"lazy\" src=\"https://img.shields.io/youtube/channel/subscribers/UC8Tw5uio66JSGL6_5SbE5_g?logo=youtube\u0026style=flat-square\u0026label=@gamedeveloperbatam2964\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-bandung\"\u003eGame Developer Bandung\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevbandung/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevbandung-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-bogor\"\u003eGame Developer Bogor\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevbogor/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevbogor-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-tanggerang\"\u003eGame Developer Tanggerang\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevtangerang/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevtangerang-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-malang\"\u003eGame Developer Malang\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevmalang/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevmalang-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-palembang\"\u003eGame Developer Palembang\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevpalembang/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevpalembang-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-solo\"\u003eGame Developer Solo\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevsolo/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevsolo-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-surabaya\"\u003eGame Developer Surabaya\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevsby/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevsby-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-bekasi\"\u003eGame Developer Bekasi\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevbekasi/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevbekasi-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-bali\"\u003eGame Developer Bali\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevbali/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevbali-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-surabaya-1\"\u003eGame Developer Surabaya\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/gamedevsby/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@gamedevsby-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"media\"\u003eMedia\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=\"the-lazy-monday\"\u003eThe Lazy Monday\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/thelazymonday/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@thelazymonday-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@TheLazyMondayGaming\"\u003e\u003cimg alt=\"Youtube\" loading=\"lazy\" src=\"https://img.shields.io/youtube/channel/subscribers/UCbb5TgzYFaLw0_QYxMvxDdg?logo=youtube\u0026style=flat-square\u0026label=@TheLazyMondayGaming\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"game-developer-id-1\"\u003eGame Developer ID\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gimid.dev\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=gimid.dev\u0026style=flat-square\u0026url=https://gimid.dev\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"formal-academy\"\u003eFormal Academy\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=\"stmm-mmtc\"\u003eSTMM MMTC\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.mmtc.ac.id/index.php/menu/Menu/index/1085/Prodi%20Teknologi%20Permainan\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=mmtc.ac.id\u0026style=flat-square\u0026url=https://www.mmtc.ac.id\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"pens\"\u003ePENS\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gametech.pens.ac.id\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=gametech.pens.ac.id\u0026style=flat-square\u0026url=https://gametech.pens.ac.id\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"binus\"\u003eBINUS\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://socs.binus.ac.id/game-application-and-technology-fix-2/\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=socs.binus.ac.id\u0026style=flat-square\u0026url=https://socs.binus.ac.id\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"vocational-academy\"\u003eVocational Academy\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=\"igdx\"\u003eIGDX\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://igdx.id\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=igdx.id\u0026style=flat-square\u0026url=https://igdx.id\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/igdx.id/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@igdx.id-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"agate-academy\"\u003eAgate Academy\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://academy.agate.id\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=academy.agate.id\u0026style=flat-square\u0026url=https://academy.agate.id\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://linktr.ee/agate.academy.id\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=linktr.ee/agate.academy.id\u0026style=flat-square\u0026url=https://linktr.ee/agate.academy.id\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.instagram.com/agate.academy.id/\"\u003e\u003cimg alt=\"Instagram\" loading=\"lazy\" src=\"https://img.shields.io/badge/follow-@agate.academy.id-E4405F?logo=instagram\u0026style=flat-square\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"miracle-academy\"\u003eMiracle Academy\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://academy.miraclegates.com\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=academy.miraclegates.com\u0026style=flat-square\u0026url=https://academy.miraclegates.com\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"gamelab-academy\"\u003eGamelab Academy\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.gamelab.id\"\u003e\u003cimg alt=\"Website\" loading=\"lazy\" src=\"https://img.shields.io/website?label=gamelab.id\u0026style=flat-square\u0026url=https://www.gamelab.id\"\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"Indonesian Game Developer Forums"},{"content":"When presenting your game to publishers, the primary objective of your pitch is to effectively communicate your game and convince stakeholders of its grand vision. Understanding the types of game pitch decks and the key components that publishers expect can significantly enhance your chances of securing their interest and support.\nTypes of Game Pitch Decks: Presenting pitch deck: This type of pitch is used for direct presentations to individuals or groups and should be concise and straightforward. Sent-out pitch deck: This pitch is indirectly sent via email and should provide more extensive information to compensate for the absence of direct interaction. Key Components of a Game Pitch: Game Summary: This section should contain the game\u0026rsquo;s concept, game design elements, and sample artwork. It serves as a snapshot of what your game is all about. Cost, Opportunities, and Production Roadmap: This component outlines the potential profitability, marketing strategies, key milestones, and budget allocation for the game\u0026rsquo;s production. Team Profile: Highlight the achievements or relevant portfolio of your team members to showcase their expertise and experience. Pro Tips: Unique Game Concept and Market Potential: Publishers are more likely to engage with games that offer unique experiences, although they also bear higher risks. Publishers will be interested in your game if it has a market demand. Understand Player Motivation: Clearly explain the objectives and factors that will captivate players. What makes your game compelling and attractive? Showcase Engaging Game Art: Include the best key points of your game art to convey the vibe and visual appeal of your game. Know Your Market Position: Understand the competitive landscape and highlight how your game stands out within the market of similar games. Ensure it is advantageous. Committed Development Team: Demonstrate that you have a dedicated full-time development team committed to your game project. Basic Rule of Thumb: Grab Attention Early: Ensure the most captivating aspects of your game are presented within the first 1-2 minutes of your pitch to capture the publisher\u0026rsquo;s interest. Emphasize Fun and Appeal: Clearly explain why your game is fun and what makes it appealing to players. Appropriate Scope and Pricing: Convince publishers that your game has a suitable scope and reasonable pricing by explaining the costs and opportunities involved. Highlight Team Achievements: Introduce the track record and accomplishments of your team members to establish their capability to deliver the game. Conclusion: Crafting an effective game pitch requires careful attention to the expectations of publishers. By incorporating the suggested components and adhering to the provided tips, you can enhance your chances of successfully pitching your game and securing the support of a publisher. Remember, a compelling pitch can significantly impact the trajectory of your game\u0026rsquo;s development and success in the competitive gaming industry.\nSource: ","permalink":"https://wewnumam.github.io/articles/understanding-publisher-expectations-for-your-game-pitch/","summary":"\u003cp\u003eWhen presenting your game to publishers, the primary objective of your pitch is to effectively communicate your game and convince stakeholders of its grand vision. Understanding the types of game pitch decks and the key components that publishers expect can significantly enhance your chances of securing their interest and support.\u003c/p\u003e\n\u003ch2 id=\"types-of-game-pitch-decks\"\u003eTypes of Game Pitch Decks:\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ePresenting pitch deck:\u003c/strong\u003e This type of pitch is used for direct presentations to individuals or groups and should be concise and straightforward.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSent-out pitch deck\u003c/strong\u003e: This pitch is indirectly sent via email and should provide more extensive information to compensate for the absence of direct interaction.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"key-components-of-a-game-pitch\"\u003eKey Components of a Game Pitch:\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eGame Summary:\u003c/strong\u003e This section should contain the game\u0026rsquo;s concept, game design elements, and sample artwork. It serves as a snapshot of what your game is all about.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCost, Opportunities, and Production Roadmap:\u003c/strong\u003e This component outlines the potential profitability, marketing strategies, key milestones, and budget allocation for the game\u0026rsquo;s production.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTeam Profile:\u003c/strong\u003e Highlight the achievements or relevant portfolio of your team members to showcase their expertise and experience.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"pro-tips\"\u003ePro Tips:\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eUnique Game Concept and Market Potential:\u003c/strong\u003e Publishers are more likely to engage with games that offer unique experiences, although they also bear higher risks. Publishers will be interested in your game if it has a market demand.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUnderstand Player Motivation:\u003c/strong\u003e Clearly explain the objectives and factors that will captivate players. What makes your game compelling and attractive?\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eShowcase Engaging Game Art:\u003c/strong\u003e Include the best key points of your game art to convey the vibe and visual appeal of your game.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKnow Your Market Position:\u003c/strong\u003e Understand the competitive landscape and highlight how your game stands out within the market of similar games. Ensure it is advantageous.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommitted Development Team:\u003c/strong\u003e Demonstrate that you have a dedicated full-time development team committed to your game project.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"basic-rule-of-thumb\"\u003eBasic Rule of Thumb:\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eGrab Attention Early:\u003c/strong\u003e Ensure the most captivating aspects of your game are presented within the first 1-2 minutes of your pitch to capture the publisher\u0026rsquo;s interest.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEmphasize Fun and Appeal:\u003c/strong\u003e Clearly explain why your game is fun and what makes it appealing to players.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAppropriate Scope and Pricing:\u003c/strong\u003e Convince publishers that your game has a suitable scope and reasonable pricing by explaining the costs and opportunities involved.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHighlight Team Achievements:\u003c/strong\u003e Introduce the track record and accomplishments of your team members to establish their capability to deliver the game.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion:\u003c/h2\u003e\n\u003cp\u003eCrafting an effective game pitch requires careful attention to the expectations of publishers. By incorporating the suggested components and adhering to the provided tips, you can enhance your chances of successfully pitching your game and securing the support of a publisher. Remember, a compelling pitch can significantly impact the trajectory of your game\u0026rsquo;s development and success in the competitive gaming industry.\u003c/p\u003e","title":"Understanding Publisher Expectations for Your Game Pitch"},{"content":"The game industry is a challenging and complex field, and having the right mindset is crucial for survival and success. It\u0026rsquo;s important to have clear goals and start by giving our maximum effort, even if it seems small.\nHere are some key mindsets to cultivate in order to thrive in the game industry:\nTechnical skills are not enough While technical skills are important, they alone are not sufficient to make a living or build a career in the game industry. It requires a multidisciplinary approach and a combination of technical, artistic, and business skills.\nEmbrace a growth mindset The game industry is constantly evolving, and challenges such as failure and uncertainty are inevitable. Embracing a growth mindset means seeing failures as opportunities for learning and improvement. It\u0026rsquo;s about being open to new ideas, continuously acquiring knowledge, and adapting to change.\nFail fast, learn fast In the game industry, experiences are valuable assets. It\u0026rsquo;s important to iterate quickly and learn from failures. The more experience we gain, the better the quality of our work becomes.\nIdealism Balance idealism with practicality While it\u0026rsquo;s essential to have a vision and ideals, it\u0026rsquo;s equally important to consider the practical aspects of the business and the sustainability of the team. Being too idealistic without considering the business aspects can undermine what we build.\nDream with open eyes If the context is to make a living from games, it\u0026rsquo;s essential to be open to various opportunities and aspects beyond our idealism. Having a realistic view and being open to diverse possibilities can help us navigate the industry more effectively.\nClear goals Moving beyond personal projects Many people create games solely to express their personal desires and ideas, which is not wrong but may not be sufficient for survival in the industry. It\u0026rsquo;s important to expand our knowledge and skills to create games that resonate with the market and meet the demands of players.\nSet clear milestones Defining detailed and specific milestones is crucial for achieving our goals. It helps us understand the desired outcomes, allocate time effectively, and determine the necessary actions to reach those milestones. Lack of discipline and setting wrong priorities can be obstacles to achieving these milestones.\nThe biggest challenges in building a game business Financial costs Financial constraints are often a significant challenge when starting or growing a game business. It\u0026rsquo;s essential to carefully manage costs and explore creative ways to secure funding.\nHuman resources Building a skilled and dedicated team is crucial for producing high-quality games. Hiring and retaining talented individuals who share the same passion and vision can be a challenge but is essential for long-term success.\nTime management Efficient project management and timely delivery of games are crucial for the sustainability of a game business. Effectively managing time and resources, setting realistic deadlines, and prioritizing tasks are essential skills to cultivate.\nUnderstanding our capabilities Recognize our capabilities Knowing our limitations in terms of resources, market research, and available opportunities is key to developing successful game products or services. It\u0026rsquo;s important to have a clear understanding of what we can achieve with the resources at hand and make the most of them.\nGame business parallels other industries While the game industry has its unique characteristics, building a game business shares many similarities with other industries. Understanding common business principles and adapting them to the game industry context can be beneficial.\nAlternate revenue streams Diversify income sources Not all games have the opportunity to achieve massive success in the market. However, a career in the game industry doesn\u0026rsquo;t necessarily require creating a blockbuster IP. There are alternative ways to generate income and sustain a game business, such as selling games to new owners, developing games for clients, or selling game assets.\nKey takeaways Embrace failure as a learning opportunity In the game industry, failure is not the end but a stepping stone towards success. Each failure provides valuable lessons that can inform future decisions and improve our work. Embracing failure as a learning experience is essential for growth.\nThere is no substitute for hard work While working smart is important, it cannot replace hard work. Building games requires dedication, perseverance, and putting in the necessary hours to refine and polish our creations. Success in the game industry comes from a combination of talent, effort, and determination.\nBuilding a sustainable game studio is challenging Creating games is already a complex endeavor, but building a game studio that can sustain itself is an even greater challenge. It requires effective management, strong leadership, and a clear understanding of the business side of the industry.\nDiversify revenue streams Relying on a single source of income is risky in any business, including the game industry. To ensure long-term success, it\u0026rsquo;s important to diversify revenue streams. This can involve exploring various avenues such as game sales, licensing intellectual property, developing games for clients, or even creating and selling game-related merchandise.\nIn conclusion, having the right mindset is essential for surviving and thriving in the game industry. It requires a combination of technical skills, a growth mindset, a balanced approach between idealism and practicality, clear goals, and the ability to adapt to challenges. Building a game business comes with its own set of challenges, including financial constraints, human resource management, and effective time management. However, by recognizing our capabilities, embracing failure, and diversifying our revenue streams, we can increase our chances of success in this dynamic and competitive industry.\nSource:\n","permalink":"https://wewnumam.github.io/articles/having-the-right-mindset-to-survive-in-the-game-industry/","summary":"\u003cp\u003eThe game industry is a challenging and complex field, and having the right mindset is crucial for survival and success. It\u0026rsquo;s important to have clear goals and start by giving our maximum effort, even if it seems small.\u003c/p\u003e\n\u003cp\u003eHere are some key mindsets to cultivate in order to thrive in the game industry:\u003c/p\u003e\n\u003ch3 id=\"technical-skills-are-not-enough\"\u003eTechnical skills are not enough\u003c/h3\u003e\n\u003cp\u003eWhile technical skills are important, they alone are not sufficient to make a living or build a career in the game industry. It requires a multidisciplinary approach and a combination of technical, artistic, and business skills.\u003c/p\u003e","title":"Having the Right Mindset to Survive in the Game Industry"},{"content":"Adam Ardisasmita The gaming industry\u0026rsquo;s revenue and export numbers are much larger than other entertainment/content industries (music, movies, etc.). Mobile games account for 45% in 2021 and 53% in 2022 of the global gaming market. Indonesians spend 25 trillion rupiah a year on games, mostly to get items that increase social strata in games. Challenges of the gaming industry in Indonesia: the comparison between the spending of Indonesian gamers on games and the income of Indonesian game developers is still very far (1000:1). Obstacles in making games: lack of funds (66.7%), lack of human resources (44.4%), lack of skills (36.1%), others (26.4%). Why there are few successful local game developers in Indonesia: Business Model; Market Visibility; Access To Funding. Business model challenges: premium (sales conversion \u0026amp; product experience) and freemium (live ops \u0026amp; reading data) Market visibility challenge: pc gamers are more open to games with similar genres while mobile gamers tend to be enthusiastic about 1 game only. Longer life time and limited storage space make mobile gamers rarely look for other games in the same genre. Access to funding challenges: premium (market similar to publisher) and freemium (market validation before funding). Trends in mobile games: Game as a Service (live service and in-app purchase) revenue is greater than full game. Trends in game purchasing power in developing countries: very sensitive to price, micro-transactions are more suitable than one-time purchases. Pay attention to the development of cloud gaming and subscription based model. Other strategies that can be taken: capitalize on viral trends, local wisdom, niche markets. In terms of revenue, it makes more sense to target the global market, but in the local market, we know the market better, so competition is easier. Relatibility is a challenge when promoting local wisdom, the unique selling point must be generally accepted. Game trends are changing, all market segments need games, make sure to test games to the right target market.\nDave Fabrian General structure and responsibilities of a mobile game business: development team (core features \u0026amp; liveops) \u0026amp; publishing team (marketing strategy \u0026amp; community management). Capabilities required in addition to game development: data analysis, performance marketing, community management, customer support, market research, market validation. Key metrics: ARPPU, MAU, DAU, LTV, Paying Conversion, ROAS, CPI, D1/D7/D30 Retention, IPM, FTUE Funnel, CPM, Session Length, Stickiness, Organic Rate, etc. Unlike pc/console gamers whose market is mature (know the channels/sources of information available through media/KOL), the mobile market is still scattered, so to reach out they need to do user acquisition by advertising. Unlike pc/console gamers who spend time specifically for games, mobile games are made to match the behavior (5W+1H) of the market. How to estimate cost: operational cost (marketing cost, team payroll, general affairs) \u0026amp; cost of revenue (platform cost, server cost). Iterate fast, be mindful when to kill and move on. Sometimes developers are too attached to their product, understand the runway, limit, and opportunity cost. How to estimate revenue: revenue projection (new users \u0026amp; returning users/active users). \u0026ldquo;Proven\u0026rdquo; is better than \u0026ldquo;New\u0026rdquo;. Don\u0026rsquo;t have too many experimental aspects. Before making a game, find out the business end goal first. By understanding metrics we can iterate/solve issues as quickly as possible and precisely.\nFandry Indrayadi Fundamental differences between gaming platforms: mode of play, form factor, \u0026amp; session time. Mobile gamers are divided into several spectrum: casual (non-gamer, can be quite hardcore, unforgiving about time), midcore (knowledgeable in games, wants hardcore but doesn\u0026rsquo;t have time), hardcore (dedicated time to game). Core Experience: Taking experience from the real world is better than taking experience from other games. As designers, we can only take experience from other games if we know what experience the game is taking in the real world. Core Audience: To please everyone is to please no one. Target your game to a specific audience based on demographic (gender, location, age) \u0026amp; psychographic (motivation to play). Business model strategy: premium (direct sell), freemium (in-app purchase), free (ads). It\u0026rsquo;s hard to make a profit from premium games on mobile because premium games compete with thousands of new free games every day. Design focus for freemium games: retention (length of time players stay in the game) and conversion (percentage of players who buy in the game). 3 things that make players want to buy (choose maximum 2): content unlock (gatcha, skin, etc) for emotion, boosters (xp+) for optimization, skips (instant upgrade) for time. For free games with ads, don\u0026rsquo;t spam ads, you should make players want to watch ads with rewarded ads (extra life, double coin, etc). As a designer we have to create the needs first so that there is demand so that players want to pay. A design is said to be elegant if it can solve as many problems as possible with 1 feature. Fake ads can be used to test game ideas to the target audience. Trends change quickly, but behavior or culture rarely changes. A designer\u0026rsquo;s job is not to make games but to solve problems in a creative way, his responsibility is to craft experiences.\nYanu Ashari Low budget ≠ Low effort. The name of the business is capital, the bigger the capital is relatively the easier it is to do the steps that need to be done. Approach before making a game: Top Down (starting from market analysis) \u0026amp; Buttom Up (starting from SWOT analysis) Market Analysis: (1) target audience identification, (2) competitor research, (3) market trend analysis. Target audience identification: the goal is to empathize with the player (keywords: demographics, psychographics). Competitor research: (1) identify similar games, (2) identify UX and gameplay, (3) analyze player reviews, (4) research marketing strategies, (5) identify unique selling points. Market trend analysis: (1) industry publications/trends/news/developments, (2) industry conferences/exhibitions/meetings, (3) market reports. How to determine UVP: value proposition canvas (fit between the product and why people buy it). How to validate UVP: (1) prototyping \u0026amp; pseudo MVP, (2) qualitative (usability testing, interviews, FGD) \u0026amp; quantitative (survey, wishlist) research. Formulas to make a successful game: (1) DATA from industry standards and our game, (2) WORDS from user reviews, (3) our FEELINGS to believe in the product.\nPanelist Bandung Steps that beginners can take: observe-imitate-modify, focus on mature execution rather than experimental, because there will be many failures so make sure there are skills that are honed and knowledge that is carried over to the next project. Guidelines for building a team: be able to objectively assess team members from their contributions, be professional, spend a lot of time at the beginning to get to know each other, the team search process cannot be instantaneous, the team composition must be correct (development, business, operations). Make this indie project an opportunity to understand end-to-end business, even though we will eventually focus on one other area, the knowledge is still important. The logical consequence of having a fun life is not only doing what you like but also being trained to do things you don\u0026rsquo;t like (sacrifice). 1 skill required by founders: convincing people to join because the values are the same, even if the salary is small or unpaid. It is important to make a written agreement at the beginning to address unwanted scenarios in the future. Alternatives for those of us who fail to release a game and we need a budget to survive: outsourcing, gamification, or working as professionals for other companies. In business there is always a chance to fail, in fact all our efforts are to minimize risk. Johannes Nindyo You can consider the asset store first to help speed up the development process, except for 2D assets which are usually specialized for 1 project. Other factors besides UVP that can be considered: hockey (featured by media \u0026amp; platform), barriers to entry (optimization for low-spec devices), good execution (free games feel like premium games). We can learn business as we go, but make sure you can make a very good product first - within your capabilities. If not managed properly, remote work can hinder your project progress. Other marketing channels: android game reviewers/youtubers (via email), certain Facebook groups (impersonate a group member). Sometimes people who think too much about good games and good business may not be successful in both, because if we are lacking in one aspect we should look for partners who can cover our shortcomings, so we can focus on aspects that are our strength points.\nBoy Dozan Sometimes, we don\u0026rsquo;t have to innovate everything, why?: (1) experimentation carries a big risk that needs to be validated, (2) game development involves many complex processes that need to be considered, (3) lack of experience and there is still much to learn. What can be learned: (1) use successful games as solid references, (2) market research, (3) create player personas, (4) prototyping \u0026amp; AB testing themes and artstyle (5) early access. Not innovating everything can help us: by using something proven we can speed up the development process and focus on other things. proven \u0026gt; reduced validation process \u0026amp; higher chance for profitable \u0026gt; faster development \u0026gt; better execution \u0026amp; smaller production cost Making a game has to have a business element\u0026ndash;whether it\u0026rsquo;s a clone or not\u0026ndash;because at the end of the day, games have to make money. But, innovation is the best weapon if we use it properly: UVP (unique value proportion). When is the right time to innovate is relative depending on the needs of the market and the capabilities of the team for execution \u0026amp; validation. Game clone rule of thumb: it\u0026rsquo;s hard to be more successful than the game you clone, unless you have a very strong uvp, but the question is do we need to be that successful? in the end, the most important thing is that the results obtained can be sufficient for the company. Copyright needs to be considered when cloning: character designs, assets, parodies. Put idealism aside if it\u0026rsquo;s not financially viable, unless it brings in a large audience. Best practice in-app purchase: usually people who buy once in our game will have a higher chance to buy continuously (continuous buyer), so the hook at the beginning is important to attract the first purchase. Having a brilliant idea with poor execution is worthless, but even a common idea executed well is still better.\nShafiq Hussein It\u0026rsquo;s not just ads and in-app purchases that can make money from games, there are many other ways such as in-game branding (sponsorship) \u0026amp; IP licensing. One of the determining factors of a game\u0026rsquo;s success: luck. People will be more likely to try a game if their friends promote it. When we want to make something - in addition to knowing where our strength points are - we must know what our weaknesses are. If our weakness is in the marketing budget, we can try to approach people who have marketing power. How to become part of the market share in the industry: (1) market research, (2) catch up with social media trends in our target market, (3) incorporate relatable content into game design, (5) development \u0026amp; testing, (4) marketing \u0026amp; PR, (5) maintenance \u0026amp; bug-fixing. Marketing \u0026amp; PR: find a good angle for your target market, approach influencers, send press releases to media, ask your friends to share. The problem only starts when your game is in the store. Typical people are \u0026ldquo;good at staying quiet, not good at complaining.\u0026rdquo; Tips for getting sponsors in games: see on social media what brands are running campaigns and what their branding direction is. Having a business partner is not as easy as recruiting people for work, because the burden is different. The key to the relationship between business and development is to trust each other that the promised results are the best that can be given. Don\u0026rsquo;t let our game\u0026rsquo;s research \u0026amp; development take longer than the game\u0026rsquo;s lifespan. Content-able strategy: not necessarily people like the product, but at least people can create content from the product. When we work with other parties, we must have a legal team to read the terms \u0026amp; conditions of the contract. We must know our battlefield first, how far we can compete, where our capabilities are, and what the quality of our product is.\nBanu Andaru Local values are not only traditional, but all the customs around us, be it traditional or popular popular culture. Application of game experience in the real world: (1) transfer personal experience into relatable content (effect: increase retention, conversion rate \u0026amp; brand trust), (2) understand the mindset and habits of the target audience (effect: increase in revenue), (3) make other creators create content about your game (content baits, effect: traffic, conversion rate, organic growth rate), (5) build communication with players in the community (effect: loyalty, community support). Types of content baits: LOL (anything funny), Win (secret content, easter egg), OMG (dramatic scene/hyperbole), Cute (triggering cuteness), Trashy (hard to see people happy and happy to see people hard, positioning players to feel better than others), Fail (general unrest), WTF (weird). The cycle: game developer -\u0026gt; fan/content creator -\u0026gt; community -\u0026gt; more players -\u0026gt; game developer. If you want to promote local values for the global market, consider relatibilty (something that can be generally accepted). Surabaya Panelist When the market research is right but the execution fails, the game is still garbage. sometimes when the idea is mediocre but executed very well, the potential for success is greater. Not everything based on feeling is successful because the luck factor plays more, and if based on data we must be able to judge that we are not processing the wrong data. Sometimes we misdirect our game because we position ourselves as the target market which the market doesn\u0026rsquo;t necessarily like (biased validation). This is not about whose way is the most correct, but about you seeing your game development strategy from which angle and where is your strenght? product or commercial. Before we make a product, there is always a product-market fit (there is a demand from the market that we are trying to serve with the product). Unlike e-commerce and other tech products, games are not \u0026ldquo;winners take all\u0026rdquo; - because the value in games can still be tweaked a little and it can still be competitive because the market can consume many similar games at once (content-based). The 70-20-10 principle: 70% clone, 20% improve, 10% innovate. Nothing is 100% original. Why would we build from scratch something we don\u0026rsquo;t know yet, where we can perfect something that exists for a market that wants it. Whether we fail or succeed, if we don\u0026rsquo;t start, we don\u0026rsquo;t know where our limits are. Because the chances of us failing are greater, so we must be able to get up again and try again (growth mindset). Joseph Putra Games are hit or miss business (either succeed once or fail completely and die). So, what can we do? faster iteration (copy the successful formula then change the theme), beginners start from hypercasual, milestone knowledge \u0026amp; experience. How to copy or iterate fast: (1) find a game with compelling gameplay, (2) find a data, (3) analyze the core gameplay, (4) make a little innovation, (5) try to release it fast. In the end, the hypothesis from the data needs to be executed and validated as quickly as possible. Measuring a successful game depends on the context of each studio, it can be from the capital spent or from the size of the team. If we don\u0026rsquo;t have time to add content to the game, we can slow down the player\u0026rsquo;s progress by dividing the stage then complicating the final stage or limiting the amount of access (hearts, energy, etc.), these methods can also be used as opportunities for monetization. If your game is a competitive experience, don\u0026rsquo;t monetize skill boosters that ruin the balance of the competition. Lucky Putra Reskins of small games with nothing improved and poor monetization make your game unmarketable. Narrative game problems: (1) no hook in the first 5 minutes, (2) lack of in-game interaction, (3) not free player friendly, (4) players wait too long for new content. Things to consider: (1) prepare a clear monetization from the beginning, (2) pay attention to the matrix of the early game, (3) hook the first 5 minutes, (4) think about the live-ops plan, (5) optimize game performance. There\u0026rsquo;s no need to set grandiose targets, being able to pay employee salaries and create an okay portfolio is enough to open up new opportunities (business deals, benchmark the next project). Tips when sharing on social media: The caption must be personal and look for the right moment, tell the purpose of why making this game and tell our personal background. Tips for making survey questions: make directed questions according to the feedback we expect, don\u0026rsquo;t give open questions, start with generic questions then deepen them in the next question. Suyono Why make games for a niche audience? It\u0026rsquo;s more guaranteed and targeted (even though the pool is smaller, you can get more out of it), it\u0026rsquo;s more fun (what we make is what we understand), the fans are more hardcore (loyal). Don\u0026rsquo;t daydream too much, there are things that you will discover on your own as time goes by. Just make it, just make it. The negative thing about too many guides is that there are more gatekeepers (thoughts that make it difficult for you) to start something. Failure is part of the process and an inevitability, there is no need to be overly afraid. Tips for applying the principle of just making things: don\u0026rsquo;t look from a gamedev perspective, don\u0026rsquo;t start from what you want to make, but focus on making games that you and others want to play. New features are rough first, polish later, they don\u0026rsquo;t necessarily work and prevent you from burnout. Community can happen naturally as long as the game is good, you can also direct people to join your community or design the game to be suitable for the community. Data is important as long as you can read data, if you can\u0026rsquo;t read data, you don\u0026rsquo;t know which data is relevant. There is no one right way for all because people\u0026rsquo;s execution skills vary, and in the end, the market is the judge. The longer you\u0026rsquo;re in gamedev, the more you\u0026rsquo;ll feel your skill is the inhale skill :v\nJulio Andryanto No need to make tools/anything from scratch, our focus is to make a good game. Don\u0026rsquo;t spend a lot of time on things that require talent instead of time to learn. Mobile game business model is a live service, which needs content all the time. If the core mechanic is not proven in the market, it\u0026rsquo;s better to kill it. We can\u0026rsquo;t add people to an organization without a system where everyone doesn\u0026rsquo;t know what to do, we need project management and organizational structure. If you have an idea directly executed without project management it will be chaotic, the project cannot be managed and extended. Things that must be proven in the development stage: product risk (core loop, meta game), marketing risk (theme, artstyle). PBN Framework: proven (mechanics that have been tested in the market), better (improvements made), new (USP). Build games that can grow: higher LTV (string game mechanics) \u0026gt; lower CPI (approachable art) = positive ROI Artstyle has a big influence on FTUE (first time user experience), for that CTR (metric people want to click) must be high first. Test the game on the right target audience. Use Facebook ads, it is not recommended to share in your friends\u0026rsquo; social media circles, to avoid bias. Metrics \u0026amp; KPIs are the core of the free to play mobile game business. If you want to create a company, first focus on your team, then the product.\nBatam Panelist Although we use data, in the end we use feelings to make decisions, the data actually supports our feelings. Although we use feelings, in the end our decisions must be based on data, if during discussions everyone uses feelings, whose feelings do we want to believe? Don\u0026rsquo;t trust your feelings if 50% of your time is not spent forming those feelings, also use references that already work as support for feelings. In the end, the one who judges our product is the market, so don\u0026rsquo;t let our product judge us and never release the game. In the end, the effective way of the team varies depending on our strength points, some have the capability and time to grow the existing team skills (improve weaknesses), some choose to convince other people who have the capability to join the team (prioritize strengths). With a community, we can reduce development costs and accelerate validation to the market because core players gather there. Community is important for us to build, but before that, first find our identity as a game developer in which direction, don\u0026rsquo;t let us invest in things that we are not ready to harvest. For bigger projections, target audiences to countries with high purchase conversions first, then look for the same user base that exists locally, so when we test we can test locally. To start with low risk (low CPI), we can start from the local target audience because we are more reachable. If you succeed without failing, you don\u0026rsquo;t appreciate failure. If you fail, you are one step ahead of those who haven\u0026rsquo;t failed yet. Always have a plan B ready, so that you can totally stick to plan A without fear, in the end you have to be able to keep going. Tips for surviving in the gaming industry: (1) just make it, (2) networking, (3) invest in skills other than gamedev, (4) consistently finish the job, get the full lesson. Andi Taru In making a game, there are various considerations such as genre, location, and technical platform. Resource considerations include man power (number of workers), time (time and money), skill (level of complexity), and moment (trend). There are several ways to monetize games, such as through advertising (banner, interstitial, rewarded, etc), in-app (item purchase, subscription), or premium (paid games). What is your goal in making a game? Money, fun, or impact. To earn Rp 5 million per month, it can be done through in-app advertising (20k players per month), paid game sales (1500 buyers per month), or through projects (1 project worth 60 million, 10 projects worth 6 million, 100 projects worth 600k). Creating games with the goal of helping others can be done through educational games, social campaigns, or serious games (games for training). Sweet Spot: reaching the intersection of making money, mastering skills, and enjoying the process. Problem-solution Fit: the game must be truly entertaining and appealing to the right target audience. Scaling up the business can be done through increasing quantity (advertising and in-app purchases, increasing the number of games), quality (paid games, increasing purchase conversion), and market share (reaching a wider market). The game development industry has high risks, but also high profit potential. \u0026ldquo;Dreams are not what you see in your sleep, dreams are things that do not let you sleep\u0026rdquo; ~ Cristiano Ronaldo.\nAgung Subagiyo Combining the hobbies we love with the skills we have: when we are enthusiastic about a hobby, we will know what makes it fun, and from there we can find the potential in producing other products. The most difficult part of making a game is estimating cost, time, and quality. Effective marketing is when users themselves promote (through sharing content or social networks). Performance on low-spec mobile devices: build size will affect the number of users who can reach the game, and frame rate will affect playability on common devices. Make sure to use third-party tools that are consistently maintained by the developer. Basic app store rituals: select relevant keywords, use screenshots that clearly illustrate, use unique icons, implement important features of the platform (leaderboards, achievements, cloud storage, etc), respond to user reviews. Include important keywords for discoverability, and be specific in the description. Use A/B testing on marketing media such as icons, screenshots, campaign images, and so on. Don\u0026rsquo;t rely solely on reviews to identify issues, use feedback from other tools (consoles, analytics, etc), as only a small percentage of users leave reviews. Engagement and performance: D1-D30 retention rate and duration per session need to be improved, an important factor for Android is its vitality which affects the visibility of the game on Google Play. We can judge the extent to which people like our game by their facial expressions, not just by their words. Mobile game players don\u0026rsquo;t have a lot of time to play, so make sure the user experience/usability is simple and responsive in situations that distract the player. The health of games in a region is measured by the formula: (revenue / number of downloads) \u0026gt; (marketing budget / number of downloads) The success of a game is seen in financial terms, how well it converts.\nJessica Hartanto Use trends as a way to attract players, use tools like Google Trends. After knowing the trends, give our game a unique value so that it is not too common. CPI (Cost Per Install) on iOS is 3 times higher compared to Android. The global average CPI in 2023 is $2.24. Using content creator endorsers can help reduce the CPI cost. Lessons learned: game design greatly affects game retention, use tools commonly used in the industry to solve technical problems, and don\u0026rsquo;t rely on just one product or platform. If you want to make a game, it\u0026rsquo;s important to have people who can do marketing, or at least we should know how to market it. Work experience is essential to understand how the industry works, such as project management, team organization, and running a business. How to find the right endorser: find and make a list of content creators who are relevant to their content, their audience, and our product, then find out their level of engagement and fees professionally, and finally make an offer accordingly. Failure is part of the process to success, so don\u0026rsquo;t be afraid to face it.\nEldwin Viriya Even if we get lucky with one game, the question is whether we can repeat the success? Even if the revenue is not as big as the successful game, the game should be able to support the team and grow. While it\u0026rsquo;s not the ideal business decision, if what gets you going is the team, don\u0026rsquo;t sacrifice the team, adapt to new things to stay afloat, and try changing the business model. If there is an assumption that making games based on trends will quickly disappear, go back to the way of development and how to read data, because at that time we are not only making games, but also building a business. Find our strengths, re-value them, and find out if we can replicate the formula for success. Everyone has a different journey, some moments cannot be compared, this is our personal journey and process, choose our own path and be aware of the choices we make, in the end we are dealing with ourselves and asking ourselves. For specific user acquisition, the cost will be affected by the extent to which the trend exists in the market, the easier the keyword is searched and presented, the cheaper the acquisition cost. It is not advisable to use marketing budget other than revenue, figure out the lifetime value of our game, allocate revenue to marketing budget. If your game follows the trend, release it immediately to get organic traffic. Choose the right platform: (1) What is our game type? (2) How to find a suitable community for our game? (3) Use relevant social media. An important business relationship to understand is the exchange of value with clients, whether they are looking for a good fit or value for money, and clients only work with people they can trust. Don\u0026rsquo;t put all our eggs in one basket.\nSurakarta Panelist The way to recognize our strengths in the field of game development is to deeply discover what we enjoy about the things we love, and then turn them into a game that we can share with others. A practical way to recognize our strengths is to explore many games, pay attention to current trends, and hone relevant skills. For B2C, it requires market research and validation, for B2B, it requires pitches and portfolios, and for B2G, it requires understanding the bureaucracy. Focus on just one of these aspects for maximum results. There is no choice of work that is better or worse than the other. The most important thing is to have clear goals and a commitment to achieve them, and remain flexible in the process. There is no instant success in achieving perfect results. Every journey has a learning curve where we need to go through a lot of learning to achieve success. Our goal in making a game is not only for ourselves, but also for others who will play it. From a business perspective, a good game is a game that makes money, and a good team is a team that can create games that make money. Start with confidence and act, then seek validation and find ways to survive. Before deciding to enter the gaming industry, understand the risks and your current financial situation, and make sure to have a plan B if needed. Watch the Full Roadshow At https://www.youtube.com/playlist?list=PLVUyIfQWnm-EnPV53GdCtNhkhA7aA5ELv\n","permalink":"https://wewnumam.github.io/articles/gameseed-roadshow-key-points/","summary":"\u003ch2 id=\"adam-ardisasmita\"\u003eAdam Ardisasmita\u003c/h2\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/xoeit2NdiHA?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe gaming industry\u0026rsquo;s revenue and export numbers are much larger than other entertainment/content industries (music, movies, etc.).\u003c/li\u003e\n\u003cli\u003eMobile games account for 45% in 2021 and 53% in 2022 of the global gaming market.\u003c/li\u003e\n\u003cli\u003eIndonesians spend 25 trillion rupiah a year on games, mostly to get items that increase social strata in games.\u003c/li\u003e\n\u003cli\u003eChallenges of the gaming industry in Indonesia: the comparison between the spending of Indonesian gamers on games and the income of Indonesian game developers is still very far (1000:1).\u003c/li\u003e\n\u003cli\u003eObstacles in making games: lack of funds (66.7%), lack of human resources (44.4%), lack of skills (36.1%), others (26.4%).\u003c/li\u003e\n\u003cli\u003eWhy there are few successful local game developers in Indonesia: Business Model; Market Visibility; Access To Funding.\u003c/li\u003e\n\u003cli\u003eBusiness model challenges: premium (sales conversion \u0026amp; product experience) and freemium (live ops \u0026amp; reading data)\u003c/li\u003e\n\u003cli\u003eMarket visibility challenge: pc gamers are more open to games with similar genres while mobile gamers tend to be enthusiastic about 1 game only. Longer life time and limited storage space make mobile gamers rarely look for other games in the same genre.\u003c/li\u003e\n\u003cli\u003eAccess to funding challenges: premium (market similar to publisher) and freemium (market validation before funding).\u003c/li\u003e\n\u003cli\u003eTrends in mobile games: Game as a Service (live service and in-app purchase) revenue is greater than full game.\u003c/li\u003e\n\u003cli\u003eTrends in game purchasing power in developing countries: very sensitive to price, micro-transactions are more suitable than one-time purchases.\u003c/li\u003e\n\u003cli\u003ePay attention to the development of cloud gaming and subscription based model.\u003c/li\u003e\n\u003cli\u003eOther strategies that can be taken: capitalize on viral trends, local wisdom, niche markets.\u003c/li\u003e\n\u003cli\u003eIn terms of revenue, it makes more sense to target the global market, but in the local market, we know the market better, so competition is easier.\u003c/li\u003e\n\u003cli\u003eRelatibility is a challenge when promoting local wisdom, the unique selling point must be generally accepted.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eGame trends are changing, all market segments need games, make sure to test games to the right target market.\u003c/em\u003e\u003c/p\u003e","title":"Gameseed Roadshow Key Points"},{"content":"To run your first playtest, it\u0026rsquo;s important to have a clear understanding of your target audience and the type of game you\u0026rsquo;re creating. This will help you to choose the right group of playtesters and create a test scenario that closely simulates the final product.\nBefore the playtest, prepare a list of questions that you want to ask your playtesters, and set up a system for collecting feedback. This can be done through a survey or through verbal feedback during the playtest. Additionally, make sure you have all the necessary materials and equipment ready, such as game boards, cards, dice, and any other components that are needed for the game.\nDuring the playtest, make sure to observe your playtesters\u0026rsquo;s behavior and interactions with the game, and take notes on any issues that arise. It\u0026rsquo;s also important to remain neutral and avoid interrupting the playtest, as this can disrupt the natural flow of the game.\nAfter the playtest, be sure to thank your playtesters for their time and efforts. Use their feedback to identify areas of improvement and make adjustments to the game accordingly. Remember, playtesting is an iterative process, so don\u0026rsquo;t be afraid to run multiple playtests with different groups of players. Each playtest will bring new insights and help to improve the game further.\nIt\u0026rsquo;s also important to keep in mind that playtesting is not only about finding problems, but also about getting feedback on what\u0026rsquo;s working well. This can help you to identify the strengths of your game, and build on them to make it even better.\nRunning your first playtest can be a nerve-wracking experience, but it\u0026rsquo;s an essential step in the game design process. Playtesting allows you to gather valuable feedback and make necessary adjustments to your game before it\u0026rsquo;s released to the public. By following the 4 I\u0026rsquo;s Framework, you can ensure that your playtest is conducted effectively and that the feedback you receive is useful in improving your game.\nThe first step in the 4 I\u0026rsquo;s Framework is to INQUIRE through playtesting. This means setting up and running your playtest, and observing the results. It\u0026rsquo;s important to have a clear understanding of what you\u0026rsquo;re trying to test and what you\u0026rsquo;re hoping to learn from the playtest. This will help you to focus on the most important aspects of the game and gather the most useful feedback.\nThe next step is to IDENTIFY any problems by asking your playtesters for feedback. It\u0026rsquo;s important to be open-minded and willing to hear constructive criticism. Playtesters feedback can be invaluable in identifying areas of the game that need improvement.\nOnce you\u0026rsquo;ve identified potential problems, the third step is to ILLUMINATE them by brainstorming a number of ideas for solutions. This is a creative process and it\u0026rsquo;s important to be open to new ideas. It\u0026rsquo;s also important to consider the impact that any changes will have on the overall balance of the game.\nFinally, the fourth step is to ITERATE and revise your game. Select your best potential solution, make the necessary changes, and playtest again. This process of testing, feedback, and iteration should be repeated until the game is in the best possible state.\nIn summary, running your first playtest is a crucial step in the game design process. By following the 4 I\u0026rsquo;s Framework, you can ensure that your playtest is conducted effectively and that the feedback you receive is useful in improving your game. Remember, game design is an iterative process, so don\u0026rsquo;t be discouraged if the first playtest doesn\u0026rsquo;t go perfectly. Embrace the failure and learn from it to make your game better.\nIn conclusion, running your first playtest can seem daunting, but it\u0026rsquo;s an essential step in the game design process. By preparing properly, observing playtesters behavior, and gathering feedback, you can make valuable adjustments to your game and create a product that is enjoyable for players. Remember, game design is an iterative process, and playtesting is an essential part of that process.\nSource:\nSlack, J., \u0026amp; Stegmaier, J. (2017). The Board Game Designer\u0026rsquo;s Guide: The Easy 4 Step Process to Create Amazing Games that People Can\u0026rsquo;t Stop Playing. Crazy Like a Box.\n","permalink":"https://wewnumam.github.io/articles/how-to-run-your-first-playtest/","summary":"\u003cp\u003eTo run your first playtest, it\u0026rsquo;s important to have a clear understanding of your target audience and the type of game you\u0026rsquo;re creating. This will help you to choose the right group of playtesters and create a test scenario that closely simulates the final product.\u003c/p\u003e\n\u003cp\u003eBefore the playtest, prepare a list of questions that you want to ask your playtesters, and set up a system for collecting feedback. This can be done through a survey or through verbal feedback during the playtest. Additionally, make sure you have all the necessary materials and equipment ready, such as game boards, cards, dice, and any other components that are needed for the game.\u003c/p\u003e","title":"How to Run Your First Playtest"},{"content":"According to a study, people play games for a variety of reasons, including the opportunity to structure and change their internal experiences. Many adults enjoy the chance to fill their heads with thoughts and emotions unrelated to work or school, while others are drawn to the challenge and opportunity to test their abilities. Games offer a sense of efficiency and order that may be lacking in everyday life, and can provide a sense of excitement and relaxation.\nSome people are attracted to the sensations that games can provide, such as the thrill of dirt-bike racing or the feeling of flying. These experiences may be out of reach in real life, due to a lack of skills, resources, or social permission. Others may use games as a way to escape the real world or escape its social norms. Nearly all players enjoy the feeling of complete absorption and challenge that games can offer.\nObservation has shown that players experience a range of emotions while playing games. These emotions can be seen in players\u0026rsquo; visceral, behavioral, cognitive, and social responses to the games they play. Some players may crave the increased heart rate and excitement of a race, while others may experience the skin-prickling sensation of wonder. Tension and frustration may also be felt, followed by a sense of accomplishment and pride (known as \u0026ldquo;Fiero\u0026rdquo;).\nFor some players, the appeal of games lies in the opportunity to relax and escape from their worries and thoughts. Others may use games as a way to build self-esteem or to gain a sense of perspective on their own lives. In any case, it is clear that games can have a powerful impact on players\u0026rsquo; emotions and can offer a range of therapeutic benefits.\nThe Four Keys to emotion structure Player Experiences are four factors that can influence how players experience emotions while playing games. These factors are:\nPlayers\u0026rsquo; internal experiences Players may find enjoyment from their internal experiences in reaction to the visceral (physical sensations), behavioral (actions and movements), cognitive (thoughts and perceptions), and social (interactions with other players) properties of the game. These players play for internal sensations such as excitement or relief from their thoughts and feelings.\nChallenge, strategy, and problem solving Players may enjoy the opportunities for challenge, strategy, and problem solving that games offer. Their comments may focus on the game\u0026rsquo;s challenge and strategic thinking and problem solving. This \u0026ldquo;Hard Fun\u0026rdquo; frequently generates emotions and experiences of frustration and Fiero (a sense of accomplishment and pride).\nIntrigue and curiosity Players may become immersed in games when it absorbs their complete attention, or when it takes them on an exciting adventure. These immersive game aspects are \u0026ldquo;Easy Fun\u0026rdquo; and generate emotions and experiences of wonder, awe, and mystery.\nSocial experiences Some players use games as mechanisms for social experiences. These players may enjoy the emotions of amusement, schadenfreude (pleasure at the misfortune of others), and naches (pride in the achievements of others) that come from social experiences of competition, teamwork, and the opportunity for social bonding and personal recognition that comes from playing with others.\nThis research found that there is a dramatic contrast in emotional displays between players who are playing a game on their own versus those playing in a group. Players in groups tend to emote more frequently and with more intensity than those playing alone. This suggests that group play adds new behaviors, rituals, and emotions that can make games more exciting.\nThe researchers were also surprised by the usefulness of the concept of \u0026ldquo;Flow\u0026rdquo; in describing the challenge of games and the potential for games to improve the quality of life. Flow refers to a state of complete immersion in an activity, characterized by a feeling of effortless concentration and enjoyment.\nFor game designers, the Four Keys to unlocking emotion in moment-to-moment gameplay (internal experiences, challenge and strategy, intrigue and curiosity, and social experiences) offer new opportunities for generating emotion through player choice. This research suggests that by understanding and utilizing these keys, game designers can create games that effectively engage and evoke emotions in players.\nSource:\nGames, W. W. P. (2004). Four Keys to More Emotion Without Story.\n","permalink":"https://wewnumam.github.io/articles/why-do-people-play-games/","summary":"\u003cp\u003eAccording to a study, people play games for a variety of reasons, including the opportunity to structure and change their internal experiences. Many adults enjoy the chance to fill their heads with thoughts and emotions unrelated to work or school, while others are drawn to the challenge and opportunity to test their abilities. Games offer a sense of efficiency and order that may be lacking in everyday life, and can provide a sense of excitement and relaxation.\u003c/p\u003e","title":"Why Do People Play Games"},{"content":"There are many ways to make money from games, whether as a developer selling homemade games, a streamer entertaining an audience, or a player trading in-game items. In this article, we will explore five different ways to monetize the passion for gaming and turn it into a profitable venture. From developing and selling homemade games to offering gaming-related services, there are many opportunities to make money in the gaming industry.\nHowever, it\u0026rsquo;s important to remember that making money from gaming can be competitive and requires a lot of time and effort.\nDeveloping and selling homemade games This involves creating a game from scratch and then selling it to players. To sell games online, there are a few ways you can do this, namely publishing them through app stores such as the Apple App Store, Google Play Store, Steam, or Itch.io. You can also offer to publishers to market your game. To develop a successful game, you need to have a strong understanding of game design, programming, and marketing.\nMonetize free games Many games are free to download, but they can still be monetized through in-app purchases or microtransactions. These are small purchases that players can make within the game to unlock new content or features. You can also monetize free-to-play games by displaying ads or offering subscription services.\nStream game gameplay If you enjoy playing games and have an engaging personality, you can make money by streaming your gameplay on platforms like Twitch or YouTube. Viewers can subscribe to your channel, donate money, or watch ads to support you. To be successful as a game streamer, you need to have a strong understanding of the games you play and be able to entertain and engage your audience.\nSelling items or in-game currency Some games allow players to trade or sell in-game items or currency on online marketplaces such as eBay or PlayerAuctions. These items or currencies can be valuable to other players, and you can make money by buying and selling them.\nOffer game-related services If you have a deep understanding of a particular game, you can offer services such as opening up game-related skill training or consulting to clients who need your services in the gaming industry. You can create and sell game-related content, such as guides or tutorials. To succeed in this field, you need to have a strong understanding of games and be able to communicate effectively with your clients.\nIn conclusion, there are many ways to make money from games, whether you are a developer, streamer or player. From developing and selling your own games to offering services related to gaming, there are many opportunities to monetize your passion for games.\nHowever, it\u0026rsquo;s important to remember that monetizing games can be competitive and requires a lot of time and effort. It is also important to follow the terms of service and applicable laws when monetizing games. If you\u0026rsquo;re willing to commit and have a clear plan, you can turn your love for gaming into a profitable venture.\n","permalink":"https://wewnumam.github.io/articles/making-money-from-games/","summary":"\u003cp\u003eThere are many ways to make money from games, whether as a developer selling homemade games, a streamer entertaining an audience, or a player trading in-game items. In this article, we will explore five different ways to monetize the passion for gaming and turn it into a profitable venture. From developing and selling homemade games to offering gaming-related services, there are many opportunities to make money in the gaming industry.\u003c/p\u003e","title":"Making Money From Games"},{"content":"Writing good commit messages is an important practice that can help other people understand the changes that you have made and why. Here are some tips for writing better commit messages:\nUse a clear and descriptive subject line The first line of the commit message should be a short and concise summary of the changes that you have made. Keep it to around 50 characters or less. This will help other developers quickly understand the changes that you have made.\n\u0026amp;nbsp\nBad:\nUpdate\n\u0026amp;nbsp\nGood:\nFix typo in README file\nUse the imperative mood Use the imperative mood in the subject line, as if you are giving a command. For example, Fix bug or Add feature. This helps to make the commit message more direct and actionable.\n\u0026amp;nbsp\nBad:\nAdded feature to search bar\n\u0026amp;nbsp\nGood:\nAdd feature to search bar\nAdd more context in the body The body of the commit message should provide more detailed information about the changes that you have made. Explain why you made the changes and how they benefit the codebase. This will help other developers understand the reasoning behind your changes.\n\u0026amp;nbsp\nBad:\n(No body)\n\u0026amp;nbsp\nGood:\nI added a feature to the search bar that allows users to search for specific items by keyword. This will make it easier for users to find what they are looking for and should improve the overall user experience.\nKeep it concise Try to keep the commit message to around 72 characters per line. This makes it easier to read in the command line or in a git client.\n\u0026amp;nbsp\nBad:\nI fixed a bug that was causing the application to crash when a user tried to submit a form with an empty field. This was a really annoying bug and it took me a while to track it down, but I finally found it and was able to fix it. I hope this doesn't happen again.\n\u0026amp;nbsp\nGood:\nFix bug that caused application to crash when submitting form with empty field\nUse bullet points If you have made multiple changes, use bullet points to list them out. This helps to organize the information and make it easier to read.\n\u0026amp;nbsp\nBad:\nI made a bunch of changes to the codebase. I fixed some bugs, added some new features, and refactored some of the code to make it more readable. I also added some tests to make sure everything is working properly.\n\u0026amp;nbsp\nGood:\n- Fix bug that caused application to crash when submitting form with empty field\n- Add feature to search bar\n- Refactor code for improved readability\n- Add tests to ensure proper functionality\nMore Example Here are some examples of good git commit messages that use bullet points in the body to clearly and concisely describe the changes made:\n\u0026ldquo;Fix typo in README file\u0026rdquo;\nCorrected spelling error on line 5 \u0026ldquo;Add feature to search bar\u0026rdquo;\nAdded keyword search functionality Improved UI of search bar \u0026ldquo;Refactor code for improved readability\u0026rdquo;\nRenamed variables to be more descriptive Grouped related code into functions Added comments to clarify code logic \u0026ldquo;Improve performance of login page\u0026rdquo;\nOptimized database queries Reduced amount of data transferred between server and client Added caching to improve response time \u0026ldquo;Update dependencies to fix security vulnerabilities\u0026rdquo;\nUpgraded library \u0026ldquo;X\u0026rdquo; to version 2.0 Replaced deprecated function \u0026ldquo;Y\u0026rdquo; with recommended alternative \u0026ldquo;Fix bug that caused application to crash when submitting form with empty field\u0026rdquo;\nIdentified root cause of crash Implemented fix to handle empty field input Added tests to prevent similar issues in the future \u0026ldquo;Add tests to ensure proper functionality\u0026rdquo;\nWrote tests for new features Added coverage for edge cases Improved reliability of existing tests \u0026ldquo;Update documentation to reflect changes in API\u0026rdquo;\nAdded descriptions for new endpoints Updated examples to reflect changes in request and response formats Clarified usage of deprecated functions \u0026ldquo;Rename variables for improved readability\u0026rdquo;\nRenamed variables throughout codebase to be more descriptive Adjusted tests and documentation to reflect renames Improved code clarity and maintainability \u0026ldquo;Refactor code to use new library\u0026rdquo;\nReplaced old library with more feature-rich alternative Adjusted code to use new library\u0026rsquo;s API Improved code performance and reliability By following these tips, you can write commit messages that are clear, concise, and easy to understand. This will help other developers to more easily review and understand your code, which can lead to faster code review and deployment. So take some time to carefully craft your commit messages and you\u0026rsquo;ll be on your way to writing better git commit messages in no time!\n","permalink":"https://wewnumam.github.io/articles/5-tips-for-writing-clear-and-concise-git-commit-messages/","summary":"\u003cp\u003eWriting good commit messages is an important practice that can help other people understand the changes that you have made and why. Here are some tips for writing better commit messages:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003ch2 id=\"use-a-clear-and-descriptive-subject-line\"\u003eUse a clear and descriptive subject line\u003c/h2\u003e\n\u003cp\u003eThe first line of the commit message should be a short and concise summary of the changes that you have made. Keep it to around 50 characters or less. This will help other developers quickly understand the changes that you have made.\u003c/p\u003e","title":"5 Tips for Writing Clear and Concise Git Commit Messages"},{"content":"Clean code is code that is easy to read, understand, and maintain. It follows a set of coding standards and principles that aim to make the code as readable and maintainable as possible.\nClean code is important because it helps reduce the time and effort required to understand and modify the codebase, and it makes it easier to add new features or fix bugs. It also promotes collaboration and reduces the risk of introducing new issues when modifying the code.\nTo achieve clean code, it\u0026rsquo;s important to follow best practices for naming variables and functions, using clear and consistent formatting, keeping functions small and focused, avoiding unnecessary complexity, and writing self-documenting code. It\u0026rsquo;s also important to follow established coding standards and to consistently apply these principles throughout the codebase.\nHere are five important principles of clean code, along with some example code to illustrate each principle:\nUse Searchable Names Good names are easy to search for and make it easy to understand the purpose of the code. Use descriptive and meaningful names that accurately reflect the purpose of the variable or function.\nBad:\nint computeTotalCost(int quantity, int pricePerItem) { return quantity * pricePerItem + 5; } In this example, the additional cost of $5 is added directly to the computation, without any context or explanation. This makes it harder to understand the purpose of the code and to modify it if necessary.\nA better way to implement this code would be to use a descriptive constant to represent the additional cost:\nGood:\nint computeTotalCost(int quantity, int pricePerItem) { final int SHIPPING_COST = 5; return quantity * pricePerItem + SHIPPING_COST; } This version of the code is easier to understand and modify, because the purpose of the additional cost is clearly explained with the use of a descriptive constant.\nFunction Name Should Be Verb and Function Should Do One Thing in One Thing Only Functions should have descriptive names that reflect the action they perform, and they should do one thing only. A function that does more than one thing is harder to understand and maintain.\nBad:\nint calc(int x, int y) { int z = x + y; int w = x * y; return z - w; } Good:\nint add(int x, int y) { return x + y; } int multiply(int x, int y) { return x * y; } int subtract(int x, int y) { return add(x, y) - multiply(x, y); } Three or Less Arguments in a Function Functions with too many arguments are hard to understand and maintain. Aim to keep the number of arguments in a function to three or less. If a function requires more than three arguments, consider refactoring the code to use an object or a data structure to pass the arguments.\nBad:\nvoid printInvoice(int customerId, int invoiceNumber, int itemNumber, int quantity, int pricePerItem, int discountPercent, int taxPercent) { // code to print invoice } Good:\nclass Invoice { int customerId; int invoiceNumber; int itemNumber; int quantity; int pricePerItem; int discountPercent; int taxPercent; } void printInvoice(Invoice invoice) { // code to print invoice } Avoid Passing Boolean Value as Arguments in a Function Passing a boolean value as an argument to a function can make the code harder to understand, because it is not immediately clear what the boolean value represents. Instead, consider using a descriptive name for the argument or refactoring the code to use a function with a more descriptive name.\nBad:\nvoid printMessage(string message, bool isError) { if (isError) { Console.WriteLine(\u0026#34;ERROR: \u0026#34; + message); } else { Console.WriteLine(message); } } In this example, the boolean value isError is passed as an argument to the function, which requires an additional if statement to determine how to print the message.\nA better way to implement this code would be to use a function with a more descriptive name that reflects the purpose of the function:\nGood:\nvoid printErrorMessage(string message) { Console.WriteLine(\u0026#34;ERROR: \u0026#34; + message); } void printMessage(string message) { Console.WriteLine(message); } This version of the code is easier to understand, because the purpose of the functions is clear from their names, and there is no need for an additional if statement inside the function.\nAvoid Using Letter Names Using single-letter names for variables and functions can make the code hard to understand, because it is not immediately clear what the letters represent. Instead, use descriptive names that accurately reflect the purpose of the code.\nBad:\nint[][] data = new int[5][5]; for (int i = 0; i \u0026lt; 5; i++) { for (int j = 0; j \u0026lt; 5; j++) { data[i][j] = i + j; } } In this example, the variables i and j are used as indexes for the multidimensional array data, but it is not immediately clear what these letters represent.\nA better way to implement this code would be to use descriptive names for the indexes:\nGood:\nint[][] data = new int[5][5]; for (int row = 0; row \u0026lt; 5; row++) { for (int col = 0; col \u0026lt; 5; col++) { data[row][col] = row + col; } } This version of the code is easier to understand, because the purpose of the variables row and col is clear from their names.\nIn conclusion, clean code is code that is easy to read, understand, and maintain. It follows a set of coding standards and principles that aim to make the code as readable and maintainable as possible.\nSome important principles of clean code include using meaningful and descriptive names, using clear and consistent formatting, keeping functions small and focused, avoiding unnecessary complexity, and writing self-documenting code.\nBy following these principles, you can create code that is easier to understand and modify, and that promotes collaboration and reduces the risk of introducing new issues when modifying the code.\nSource:\n","permalink":"https://wewnumam.github.io/articles/5-tips-for-creating-clean-code/","summary":"\u003cp\u003eClean code is code that is easy to read, understand, and maintain. It follows a set of coding standards and principles that aim to make the code as readable and maintainable as possible.\u003c/p\u003e\n\u003cp\u003eClean code is important because it helps reduce the time and effort required to understand and modify the codebase, and it makes it easier to add new features or fix bugs. It also promotes collaboration and reduces the risk of introducing new issues when modifying the code.\u003c/p\u003e","title":"5 Tips for Creating Clean Code"},{"content":"As a game designer, it\u0026rsquo;s important to be aware of common pitfalls and mistakes that can hinder the success of your projects. By avoiding these mistakes, you can increase your chances of creating successful and enjoyable games that players will love. Here are the top 10 mistakes game designers should avoid:\nHuge Project without Portfolio Starting with a large, ambitious project without a portfolio of smaller, completed games can be risky. It\u0026rsquo;s important to build a portfolio of completed projects to showcase your skills and capabilities before tackling a larger project. A portfolio can also help you demonstrate your ability to complete projects and can be used to attract funding or partners for larger projects.\nHide the Idea It\u0026rsquo;s important to share your game ideas and get feedback from others, whether it\u0026rsquo;s through playtesting or seeking input from industry professionals. Hiding your ideas can limit the potential for improvement and growth. Sharing your ideas with others can help you get valuable feedback and insights, leading to a stronger and more successful game.\nNot Using the Cloud One mistake that game designers should avoid is not using the cloud for storage and collaboration. Local storage can be problematic because it is limited in capacity and can be prone to data loss or corruption due to hardware issues or other unexpected events. The cloud, on the other hand, provides virtually unlimited storage capacity and is more reliable and secure.\nCreate Unfinished Projects It\u0026rsquo;s important to see a game through to completion rather than abandoning it halfway through development. Players will be disappointed if they invest time and money into a game that is never fully finished. It\u0026rsquo;s better to set realistic goals and priorities and to focus on completing a smaller number of projects rather than taking on too much and leaving projects unfinished.\nOnly Make Games by Yourself Collaborating with others can bring fresh perspectives and ideas to the table and can lead to a better final product. It\u0026rsquo;s important to consider teaming up with others, whether it\u0026rsquo;s through hiring employees or partnering with other developers. Working alone can limit your creativity and the potential of your game.\nNot Saving Money for Advertisement Marketing and advertising are crucial for getting the word out about your game and attracting players. Failing to allocate sufficient resources for these efforts can hinder the success of your game. It\u0026rsquo;s important to budget for marketing and advertising from the outset and to allocate a sufficient portion of your budget to these efforts.\nFocus on Technology While technology is an important aspect of game development, it should not be the main focus. It\u0026rsquo;s important to strike a balance and ensure that the gameplay and overall experience are the primary focus. Focusing too much on technology can lead to a game that is impressive from a technical standpoint but lacking in terms of gameplay and enjoyment.\nQuit Your Job Without Guarantees Game design can be a risky and uncertain career path, and it\u0026rsquo;s important to have a solid plan in place before quitting your day job to pursue it full-time. This includes having some level of financial security and guarantees, such as contracts or funding, to ensure that you can sustain yourself while working on your game.\nDon\u0026rsquo;t Prototype Prototyping is an essential step in the game design process that allows you to test and iterate on your ideas before investing a lot of time and resources into development. Skipping this step can lead to costly mistakes and a less polished final product. Prototyping can also help you identify and address potential issues early on, saving time and effort in the long run.\nNo Meaningful Differential One common mistake game designers make is failing to ensure that their game has a unique selling point or differential. Without a meaningful differential, it will be difficult to stand out in a crowded market and attract players. It\u0026rsquo;s important to carefully consider what makes your game different and how you can use that to your advantage.\nAvoiding these common mistakes can help game designers create successful and enjoyable games.\nIt\u0026rsquo;s important to carefully consider the unique selling points of your game, to prototype and test your ideas, to plan for financial security and marketing efforts, to collaborate with others, to complete projects, to utilize the cloud, to seek feedback on your ideas, and to build a portfolio of completed projects.\nBy following these best practices, game designers can increase their chances of success and create games that players will love.\nSource:\nIntroduction to Game Design Theory by John Haste\n","permalink":"https://wewnumam.github.io/articles/top-10-game-designer-mistakes/","summary":"\u003cp\u003eAs a game designer, it\u0026rsquo;s important to be aware of common pitfalls and mistakes that can hinder the success of your projects. By avoiding these mistakes, you can increase your chances of creating successful and enjoyable games that players will love. Here are the top 10 mistakes game designers should avoid:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003ch2 id=\"huge-project-without-portfolio\"\u003eHuge Project without Portfolio\u003c/h2\u003e\n\u003cp\u003eStarting with a large, ambitious project without a portfolio of smaller, completed games can be risky. It\u0026rsquo;s important to build a portfolio of completed projects to showcase your skills and capabilities before tackling a larger project. A portfolio can also help you demonstrate your ability to complete projects and can be used to attract funding or partners for larger projects.\u003c/p\u003e","title":"Top 10 Game Designer Mistakes"},{"content":"Games serve many different purposes and can be enjoyed for a variety of reasons. Some people play games as a form of entertainment, to pass the time, or to socialize with friends and family. Others play games to challenge themselves or to improve their skills in a particular area. Still others play games as a way to relax and destress after a long day.\nPurposes for games in different contexts:\nEntertainment Games can be a source of entertainment, providing enjoyment and relaxation for players. They can be a fun way to pass the time and can be played alone or with others.\nEducation Games can be used as a tool for education, helping players learn new concepts or develop new skills. This can be done through educational games that are specifically designed for learning, or through games that incorporate educational elements in a more engaging and interactive way.\nAdvertising Games can be used as a way to advertise products or services. For example, a company might create a simple game that promotes their brand or product, which players can access and play for free.\nProductivity (Gamification) Gamification is the process of incorporating game-like elements into non-game activities in order to make them more engaging and motivating. This can be used to increase productivity and motivate people to complete tasks or achieve goals.\nBusiness Model Games can be developed as a business, with the goal of generating revenue through sales or in-game purchases. They can also be used as a way to promote a business or brand and gamification as a service, as mentioned above. Another business model is by licensing intelectual property and helding an event like tournament.\nArt Games can be considered a form of art, with designers and developers creating immersive and visually appealing worlds for players to explore. Games can also be used as a medium for artistic expression, allowing players to create and share their own creations.\nScience Games can be used in scientific research, such as in studies on human behavior or cognition. They can also be used to simulate real-world scenarios or test hypotheses in a controlled environment.\nTherapy Games can be used as a form of therapy, helping people to cope with stress, anxiety, or other mental health issues. They can also be used to help people with physical disabilities or injuries to improve their function and mobility.\nIn general, the purpose of a game is to provide enjoyment and engagement for the player. This can be achieved through competition, problem-solving, exploration, creativity, or a combination of these elements. Games can also serve educational purposes, helping players learn new concepts or develop new skills.\nUltimately, the purpose of a game depends on the individual player and their goals and motivations for playing. Some people may play games simply for fun, while others may be more focused on achieving specific goals or improving their performance.\nCredits:\nArticle quality improved by ChatGPT (2022).\n","permalink":"https://wewnumam.github.io/articles/the-purpose-of-games/","summary":"\u003cp\u003eGames serve many different purposes and can be enjoyed for a variety of reasons. Some people play games as a form of entertainment, to pass the time, or to socialize with friends and family. Others play games to challenge themselves or to improve their skills in a particular area. Still others play games as a way to relax and destress after a long day.\u003c/p\u003e\n\u003cp\u003ePurposes for games in different contexts:\u003c/p\u003e","title":"The Purpose of Games"},{"content":"Note:\nTo be able to use these features we need at least C# version 7 and above or Unity 2018 and above.\nTernary Operator In computer programming, the ternary conditional operator is a ternary operator that is part of the syntax for basic conditional expressions in several programming languages.It is commonly referred to as the conditional operator, ternary if, or inline if.\nAn expression a ? b : c evaluates to b if the value of a is true, and otherwise to c. One can read it aloud as \u0026ldquo;if a then b otherwise c\u0026rdquo;.\nNormal if statement:\nif (health \u0026gt; 0) { barColor = Color.red; } else { barColor = Color.black; } if statement using ternary operator:\nbarColor = health \u0026gt; 0 ? Color.red : Color.black; String Interpolation The special character $ identifies a string literal (unformatted string) as an interpolated string. An interpolated string is a literal string that may contain an interpolated expression.\nInterpolated strings provide a more readable and convenient syntax for formatting strings.\nstring name = \u0026#34;Groot\u0026#34;; float health = 100; float mana = 50; // operator \u0026#39;+\u0026#39; logMessage = \u0026#34;Unit \u0026#34; + name + \u0026#34;, health: \u0026#34; + health + \u0026#34;, mana: \u0026#34; + mana; // string.Format logMessage = string.Format(\u0026#34;Unit {0}, health: {1}, mana: {2}\u0026#34;, name, health, mana); // string interpolation logMessage = $\u0026#34;Unit {name}, health: {health}, mana: {mana}\u0026#34;; Expression Body Expression body definitions allow us to provide property implementations in a very concise and readable form.\nThe expression body definition has the following general syntax: member =\u0026gt; expression;\nNormal property:\nprivate float health, maxHealth; public float HealthPrencentage { get { return health / maxHealth; } set { health = value * maxHealth; } } Expression-body porperty:\nprivate float health, maxHealth; public float HealthPrencentage { get =\u0026gt; health / maxHealth; set =\u0026gt; health = value * maxHealth; } Expression-body read-only property:\npublic float HealthPrencentage =\u0026gt; health / maxHealth; \u0026amp;nbsp\nNormal method:\npublic float Percentage(float current, float max) { return current / max; } Expression-body method:\npublic float Percentage(float current, float max) =\u0026gt; current / max; Local Function Local functions are methods that are nested inside other methods. They can only be called from the method that contains them.\nLocal functions make the intent of our code clear. Anyone reading our code can see that this method cannot be called except by the method that contains it.\nNormal method:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); } private IEnumerator UpdateHealthBarCoroutine() { yield return null; } Local function:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); IEnumerator UpdateHealthBarCoroutine() { yield return null; } } Null Checking Simplifies a common coding pattern where a variable is assigned a value if it is null.\nCommon null checking:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { if (OnEnemyHit != null) OnEnemyHit.Invoke(other.gameObject); } Null checking operator:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { OnEnemyHit?.Invoke(other.gameObject); } Null Coalescing The null-coalescing operator ?? returns the value of its left-hand operand if it isn\u0026rsquo;t null; otherwise, it evaluates the right-hand operand and returns its result. The ?? operator doesn\u0026rsquo;t evaluate its right-hand operand if the left-hand operand evaluates to non-null.\npublic class GameManager : MonoBehaviour { private Player player; // using null comparison public Player GetPlayer() { if (player == null) return new Player(\u0026#34;Groot\u0026#34;); else return player; } // using null coalescing operator public Player GetPlayer() { return player ?? new Player(\u0026#34;Groot\u0026#34;); } } nameof Keyword A nameof expression produces the name of a variable, type, or member as the string constant. A nameof expression is evaluated at compile time and has no effect at run time.\npublic class Enemy { public string name; public flaot health; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.name}, health: {enemy.health}\u0026#34;); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;{nameof(Enemy.name)}: {enemy.name}, {nameof(Enemy.health)}: {enemy.health}\u0026#34;); In certain situations when we want to change the name of a variable, we don\u0026rsquo;t need to change the string we created manually.\npublic class Enemy { public string id; public flaot hp; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.id}, health: {enemy.hp}\u0026#34;); // will print -\u0026gt; id: Groot, hp: 100 Debug.Log($\u0026#34;{nameof(Enemy.id)}: {enemy.id}, {nameof(Enemy.hp)}: {enemy.hp}\u0026#34;); Source:\n","permalink":"https://wewnumam.github.io/articles/syntatic-sugars-csharp-hidden-features/","summary":"\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTo be able to use these features we need at least C# version 7 and above or Unity 2018 and above.\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"ternary-operator\"\u003eTernary Operator\u003c/h2\u003e\n\u003cp\u003eIn computer programming, the ternary conditional operator is a ternary operator that is part of the syntax for basic conditional expressions in several programming languages.It is commonly referred to as the conditional operator, ternary if, or inline if.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAn expression \u003ccode\u003ea ? b : c\u003c/code\u003e evaluates to \u003ccode\u003eb\u003c/code\u003e if the value of \u003ccode\u003ea\u003c/code\u003e is true, and otherwise to \u003ccode\u003ec\u003c/code\u003e. One can read it aloud as \u0026ldquo;\u003cem\u003eif a then b otherwise c\u003c/em\u003e\u0026rdquo;.\u003c/p\u003e","title":"Syntatic Sugars | C# Hidden Features"},{"content":"Think about Every Piece of the Picture When watching a video, we can only watch the direction of the camera. If the camera looks at the same thing for too long or is not looking at something the viewer wants to see, the viewer will get bored.\nSporting events on TV are usually captured with a dozen to dozens of different cameras-every few seconds moving to a different image. And each image focuses on new information. Each image has meaning, and the cuts between them provide a lot of information without boring the audience.\nEvery time you shoot a camera, think, who are we going to shoot? What are they doing? Is it interesting? If not, cut it out and find something else to shoot.\nDon\u0026rsquo;t keep the camera on non-stop. Even if you are going to edit it, this is a bad habit that will only waste your time because you will have to watch dozens of useless and unusable pieces of video.\nShoot When the Whites of the Subject\u0026rsquo;s Eyes Are Visible People communicate half of what they say with their mouths and the other half with their eyes. If we miss the eyes, we will miss half of the message.\nSubtle patterns on the face make up half the communication between people.\nOur videos instantly become 200 percent better if we stay close to the subject to clearly capture the whites of their eyes.\nAlways Take Pictures Under 10 Seconds in Length Short cuts are part of the modern movie language.\nA mix of different short videos has more information and feeling than if the video was shot continuously.\nZooming with Feet 10x zoom = 10x more shake.\nUse recording tools that help us overcome camera shake due to our hands. To prevent camera shake, we can attach a tripod or stabilizer-or make use of a flat plane around the location.\nTo get a good close-up, set the camera lens to a wide angle (aka no zoom at all). Physically walk up to the subject and take a picture.\nThings to remember about digital zoom:\nDon\u0026rsquo;t. Don\u0026rsquo;t ever use it.\nDon\u0026rsquo;t Move! Don\u0026rsquo;t Shake! And Don\u0026rsquo;t zoom During Shooting! Treat the video camera like a photographic camera.\nAim the lens. Keep your finger away from the zoom button. Look at the LCD screen to make sure the picture is good. And, press start.\nStop after getting the image, and repeat. The rhythm we follow is Move, Shoot, Record, Stop.\nArrange for Light to Come from Behind the Camera The camera gets confused when it has to deal with several different exposure levels in the same shot.\nMost video cameras will expose for the largest and brightest object in the frame.\nIf the light is in front of the camera, then the background of the subject will always be brighter. The subject we are filming will be dark.\nIf the light source stays behind the camera, the light will fall on the subjects. They will become the bright part of the frame. And we will be able to see them.\nDisable Camera Digital Effects If we take a nice, clean video, we can always add the effects we want later, using one of the many computer editing programs designed for that purpose.\nBut if we shoot a video directly with the camera\u0026rsquo;s built-in effects app, we can never get rid of them. Our video is stuck with that effect forever.\nFocus on What\u0026rsquo;s Really Interesting Every video gets better when we apply an organized principle, and it almost doesn\u0026rsquo;t matter what that principle is.\nShoot a concentration of the subject\u0026rsquo;s face, what they\u0026rsquo;re doing, the reaction of the audience, what the audience is seeing, and the mood of the location.\nFind something to focus on-a person or an interesting angle-and your video will instantly become more interesting.\nDon\u0026rsquo;t Use Amateurish Captions Don\u0026rsquo;t use captions unless it\u0026rsquo;s absolutely necessary.\nHere are some important tips to apply when using captions:\nKeep the text short and the words simple. Use a simple, easy-to-read font (sans-serif font category).\nDon\u0026rsquo;t let the text interfere with the important parts of the image and make sure it remains easy to read.\nPlace it at the top or bottom third of the screen.\nUse white letters on a black background or black on a light color-don\u0026rsquo;t add shadow, outline, underline, motion, or glow.\nDo not use vertical writing.\nUse white letters on a black background or black on a light color-do not add shadow, outline, underline, motion, or glow.\nDo not use vertical writing.\nIf the background of your image is half-bright so that the text is hard to read with black or white text colors, put a simple rectangular box behind the text.\nDisplay the text on the screen about one-tap longer than the time it takes you to read it out loud.\nLike everything else in the video, keep the text simple but elegant.\nKeep the Video Short Whatever is appropriate to say in a video should be said in a short way.\nTV commercials tell a complete story, entertain us, and sell us-all in 30 seconds.\nThe best way to make your video shorter is to intend for it to be short in the first place.\nWhen in doubt, cut it.\nUse an external microphone Most video cameras set their own sound levels. That means they take whatever they hear and amplify it to a constant, audible level.\nUnfortunately, if the camera hears noise around it, it will also turn it up. Traffic noise, sirens, and crowd noise-all are amplified.\nIf we get as close to the subject as possible, there will be fewer problems.\nTo make it no problem at all use a good clip on mic. Clip the clip on to the subject\u0026rsquo;s shirt, and this sound problem will be over.\nSource: Stockman, S. (2011). How to Shoot Video That Doesn’t Suck: Advice to Make Any Amateur Look Like a Pro. Workman Publishing.\n","permalink":"https://wewnumam.github.io/articles/12-easy-ways-to-make-videos-significantly-better/","summary":"\u003ch2 id=\"think-about-every-piece-of-the-picture\"\u003eThink about Every Piece of the Picture\u003c/h2\u003e\n\u003cp\u003eWhen watching a video, we can only watch the direction of the camera. If the camera looks at the same thing for too long or is not looking at something the viewer wants to see, the viewer will get bored.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSporting events on TV are usually captured with a dozen to dozens of different cameras-every few seconds moving to a different image. And each image focuses on new information. Each image has meaning, and the cuts between them provide a lot of information without boring the audience.\u003c/p\u003e","title":"12 Easy Ways to Make Videos Significantly Better"},{"content":"Opening Page The cover page contains information including:\nTitle. The title in the form of the words \u0026ldquo;Game Design Document\u0026rdquo; is needed to name the document so that at a glance people can imply what is meant in the document. Game Title. In the form of an attachment to the game name either in the form of a logo or any form that can be read. Genre and Game Mode. Contains information about the genre and game mode—such as online or offline mode, and single-player or multi-player mode—that will be used. Stakeholders. Includes the logo of the group, organization, and/or institution that oversees the game project. Copyright, Address, and Contact. Contains copyright information, year of production, name of the organization responsible, work address, and contact email address. Then the next page contains the table of contents of the document along with the page number.\nIntroduction The introduction contains a description of the problems that occurred and the reason why the game designer made this game. The background consists of three or more paragraphs.\nThe first paragraph contains a general description of the problem or phenomenon raised. Then the next paragraph contains a specific explanation of the problem that is still related to the description of the first paragraph. The last paragraph contains the reasons why this game needs to be made based on the existing problems.\nIdea of Creation (Problem Formulation) The problem formulation contains a list of questions that will be described in the design explanation. In general, the list of questions asks whether the parts or content in the game design will be able to solve the problem raised.\nObjectives and Benefits Objectives contain a statement about why the game designer is making this game. It generally summarizes the solution to the problem, or briefly offers this game as a solution to the problem.\nBenefits contain the expectations of the game designer to the player after playing the game created. Generally, it explains the impact or changes that want to be made with this game.\nPlatform Used This section describes the device that will be used to play this game. In general, this section describes the hardware and software specifications that players need to have.\nRequirements This section describes the production requirements for making this game. It generally contains a list of devices that will be used in production such as hardware specifications and applications used.\nGame References Game references contain reference sources or references from other games or other projects.\nThese references are categorized based on the existing content of the reference game. For example: story references, gameplay references, mechanic references, character design references, user interface references, font references, environment references, animation references, etc.\nExplanations accompanied by images and links will greatly help the team understand the desired intent.\nGame Design Process This section lists the details and explanations of all aspects of production, including:\nProduction Timeline. Contains a sequence of actions or activities that will be performed during production, organized by a defined schedule, and categorized by the responsibilities of each team member. Genre. Outlines details about the type of game and theme the game has. Also includes the reason why the game designer picked this genre. Storyline Tells the background of the events experienced by the character before the conflict in this game. Generally contains the introduction of the character and his environment as well as the challenges that need to be answered in the game. Gameplay. Describes the tactical aspects of the game, such as its plot and how to play it. Generally contains details of the patterns defined through the rules of the game, the relationship between the player and the game, the challenges and overcoming them, the plot and the player\u0026rsquo;s connection to it. Mechanics. Describes the system components that respond to the game to the player\u0026rsquo;s movements or actions. Generally described in the form of tables or diagrams. This section should be able to explain the purpose of the mechanic based on the mechanic name/type, interacting objects, active state, player input, and other descriptions. Level Design. Level design is also known as environment design or game mapping. Level design includes a sketch of the conceptual design of the level. It generally contains an attachment of the layout of objects in the game map along with a description of the events that will be triggered from player actions. User Interface (UI). User interface includes the design of UI pages and elements, space layout, typography usage, color selection, and style or theme selection. UI elements include input controls (button, text field, checkbox), navigation components (gamepad, slider, breadcrumb), information components (icon, message box, progress bar), and container (UI component wrapper). Character Design. Contains an attachment of the character along with a description of all the elements used. The character design should attach the character in various dimensions, states, and expressions. Game Assets. Contains a list of descriptions and attachments of visual assets or objects used in the game. Engine. Contains technical explanations related to the environment or configuration in the game engine. Generally contains a description of customized configurations, a list of modules used, methods and frameworks used, and other technical explanations that contain directions for game programmers. Sound Design. Contains a list of background music (BGM) and sound effects (SFX) along with a description of their type, type, or theme-and their condition in the game. Selling Point. Refers to the unique benefits of this game that allow it to stand out from competitors. Generally describes explicit claims of uniqueness that involve in game attributes and are objectively verifiable and have usability benefits. Credit Title This section lists the names of the team members and their duties in this project. Generally, each is responsible for one area including art, tech, or design.\n","permalink":"https://wewnumam.github.io/articles/game-design-document-format-for-academic-purposes/","summary":"\u003ch2 id=\"opening-page\"\u003eOpening Page\u003c/h2\u003e\n\u003cp\u003eThe cover page contains information including:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eTitle\u003c/strong\u003e. The title in the form of the words \u0026ldquo;\u003cem\u003eGame Design Document\u003c/em\u003e\u0026rdquo; is needed to name the document so that at a glance people can imply what is meant in the document.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGame Title\u003c/strong\u003e. In the form of an attachment to the game name either in the form of a logo or any form that can be read.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGenre and Game Mode\u003c/strong\u003e. Contains information about the genre and game mode—such as online or offline mode, and single-player or multi-player mode—that will be used.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStakeholders\u003c/strong\u003e. Includes the logo of the group, organization, and/or institution that oversees the game project.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCopyright, Address, and Contact\u003c/strong\u003e. Contains copyright information, year of production, name of the organization responsible, work address, and contact email address.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThen the next page contains the table of contents of the document along with the page number.\u003c/p\u003e","title":"Game Design Document Format for Academic Purposes"},{"content":"Meaningful Variable Names Choosing good names takes time but saves more than it takes.\nIntention-Revealing Names The name should answer all big questions. It should tell you why it exists, what it does, and how it is used. If the name requires a comment, the name does not reveal the intent.\nlet d; // elapsed time in days We should choose the name that specifies what is being measured and the unit of that measurement:\nlet elapsedTimeInDays; let daysSinceCreation; let daysSinceModification; let fileAgeInDays; Example of code that is hard to understand because of using bad names:\nfunction getThem() { let list1 = []; for (let x in theList) if (x[0] == 4) list1.add(x); return list1; } The problem isn\u0026rsquo;t the simplicity of the code but the implicity of the code. The code doesn\u0026rsquo;t tell what kinds of things are in theList and what is the value of 4. Just by giving concepts names, we can improve the code considerably:\nfunction getFlaggedCells() { let flaggedCells = []; for (let cell in gameBoard) { if (cell[STATUS_VALUE] == FLAGGED) flaggedCells.add(cell); } return flaggedCells; } or in a functional way:\nfunction getFlaggedCells(gameBoard) { return gameBoard.filter(cell =\u0026gt; cell[STATUS_VALUE] === FLAGGED) } Example of Good and Bad Variable Names\nPurpose of Variable Good Names Bad Names Running total of checks written to date runningTotal, checkTotal written, ct, checks, CHKTTL, x, x1, x2 Velocity of a bullet velocity, trainVelocity, velocityMph velt, v, tv, train,x, x1, x2 Current date currentDate, todaysDate cd, current, c, x, x1, x2, date Lines per page linesPerPage lpp, lines, l, x, x1, x2 Optimum Name Length\nToo long To short Just Right numberOfPeopleOnTheUsOlympicTeam n, np, ntm numTeamMembers, teamMemberCount numberOfSeatsInTheStadium n, ns, nsisd numSeatsInStadium, seatCount maximumNumberOfPointsInModernOlympics m, mp, max, points maxTeamPoints, maxPoints Meaningful Distinctions Because you can\u0026rsquo;t use the same name to refer to two different things in the same scope, you might be tempted to change one name arbitrarily. It is not sufficient to add number series or noise words (redundant), even though the compiler or interpreter is satisfied.\nfunction copyChars(a1, a2) { for (let i = 0; i \u0026lt; a1.length; i++) { a2[i] = a1[i]; } } If names must be different, then they should also mean something different. Number-series {a1, a2, ... aN} is the opposite of intentional naming. Such names are not disinformative\u0026ndash;they are noninformative; they provide no clue to the author\u0026rsquo;s intention. Consider:\nfunction copyChars(source, target) { for (let i = 0; i \u0026lt; source.length; i++) { target[i] = source[i]; } } Use opposites precisely. Using naming conventions for opposites helps consistency, which helps readability.\nCommon Opposites in Variable Names\nbegin/end first/last locked/unlocked min/max next/previous old/new opened/closed visible/invisible source/target up/down Pronounceable Names If you can\u0026rsquo;t pronounce it, you can\u0026rsquo;t discuss it without sounding like an idiot. This matters because programming is a social activity. Compare:\n// ymdhms (date, year, month, day, hour) let genymdhms; let modymdhms; let pszqint = \u0026#34;102\u0026#34;; to\nlet generationTimestamp; let modificationTimestamp; let recordId = \u0026#34;102\u0026#34;; Searchable Names Single-letter names and numeric constants have a particular problem in that they are not easy to locate across a body of text. Single-letter names can ONLY be used as local variables inside short methods. The length of the name should correspond to the size of its scope. If a variable or constant might be seen or used in multiple places in a body of code, it is imperative to give it a search-friendly name. Compare:\nfor (let j = 0; j \u0026lt; 34; j++) { s += (t[j] * 4) / 5; } to\nlet realDaysPerIdealDay = 4; const WORK_DAYS_PER_WEEK = 5; let sum = 0; for (let j = 0; j \u0026lt; NUMBER_OF_TASK; j++) { let realTaskDays = taskEstimate[j] * realDaysPerIdealDay; let realTaskWeeks = realTaskDays / WORK_DAYS_PER_WEEK; sum += realTaskWeeks; } Naming Specific Types of Data Naming Loop Indexes\nThe names i, j, and k are customary, simple loop variable names:\nfor (let i = firstItem; i \u0026lt; lastItem; i++) { data[i] = 0; } If a variable is to be used outside the loop, it should be given a more meaningful name than i, j, k. For example, if you are reading records from a file and need to remember how many records you\u0026rsquo;ve read, a more meaningful name like recordCount would be appropriate:\nlet recordCount = 0 while (moreScore()) { score[recordCount] = getNextScore(); recordCount++; } One common reason loops grow is that they\u0026rsquo;re nested. If you have several nested loops, assign longer names to the top variables to improve readability.\nfor (teamIndex = 0; teamIndex \u0026lt; teamCount; teamIndex++) { for (eventIndex = 0; eventIndex \u0026lt; eventCount[teamIndex]; eventIndex++) { score[teamIndex][eventIndex] = 0; } } Carefully chosen names for loop-index variables avoid the common problem of index cross-talk. The simplest way to avoid such problems is simply to think of more descriptive names than i, j, k. The score[teamIndex][eventIndex] is more informative than score[i][j]\nNaming Status Variables Status variables describe the state of your program. It\u0026rsquo;s better to think of flags as status variables. Flags should be assigned values and their values should be tested with enumerated types, named constants, or global variables that act as named constants. Here are some examples of flags with bad names:\nif (flag) ... if (statusFlag == 0x0F) ... if (printFlag == 16) ... if (computeFlag == 0) ... flag = 0x1; statusFlag = 0x80; printFlag = 16 computeFlag = 0; Here are equivalent code example that are clearer:\nif (dataReady) ... if (charType \u0026amp; PRINTABLE_CHAR) ... if (reportType == reportTypeEnum.annual) ... if (recalcNeeded == true) ... dataReady = true; charType = CONTROL_CHARACTER; reportType = reportTypeEnum.annual recalcNeeded = false; Naming Temporary Variables\nTemporary variables are used to hold intermediate results of calculations, as temporary placeholders, and to hold housekeeping values. They\u0026rsquo;re usually called temp, x, or some other vague and nondescriptive name. In general, temporary variables are a sign that the programmer does not yet fully understand the problem. Moreover, because the variables are officially given temporary status, programmers tend to treat them more casually than other variables, increasing the chance of errors.\nlet temp = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + temp) / (2 * a); root[1] = (-b - temp) / (2 * a); The name temp doesn\u0026rsquo;t tell you anything about what the variable does. A better approach is shown in this example:\nlet disciminant = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + disciminant) / (2 * a); root[1] = (-b - disciminant) / (2 * a); Naming Boolean Variables\nUseful boolean variable names:\ndone error found success Give boolean variables names that imply true or false\nNames like done and success are good boolean names because the state is either true or false. Names like status and sourceFile, on the other hand, are poor boolean names because they\u0026rsquo;re not obviously true or false.\nFor better results, replace status with the name like error or statusOK, and replace sourceFile with sourceFileAvailable or sourceFileFound, or whatever the variable represents.\nSome programmers like to put Is in front of their boolean names. Then the variable name becomes question: isDone? isError? isFound? isProcessingComplete? Answering the question with true or false provides the value of the variable.\nUse positive boolean variable names\nNegative names like notFound, notDone, and notSuccessful are difficult to read when they are negated.\nNaming Enumerated Types\nconst daysEnum = Object.freeze({ monday: 0, tuesday: 1, wednesday: 2, thursday: 3, friday: 4, saturday: 5, sunday: 6 }); Taking this one step further, one could extract the logic into a function with a variable number of arguments and produce a frozen object. There is very little benefit to this technique, so a better alternative would be to create a simple class. After all, enums are more common in object-oriented programming languages, so this sounds like a great fit.\nNaming Constants When naming constants, name the abstract entity constant represents rather than the number the constant refers to. FIVE is a bad name for constant. FIVE = 6 would be ridiculous. CYCLES_NEEDED is a good name. By the same token, BAKERS_DOZEN is also a poor constant name; DONUT_MAX is a good constant name.\nGeneral Issues in Using Variable Disinformation Programmers must avoid leaving false clues that obscure the meaning of code. We should avoid words whose entrenched meanings vary from our intended meaning. Abbreviations could be disinformative.\nDo not refer to grouping accounts as an accountList unless it\u0026rsquo;s a List. The word list means something specific to programmers. If the container holding the accounts is not a List, it may lead to false conclusions. So accountGroup or just plain accounts would be better.\nA truly awful example of disinformative names would be the use of lower-case L and upper-case O as variable names, especially in combination. The problem, of course, is that they look almost entirely like constants one and zero, respectively.\nlet a = l; if (O == l) a = O1; else l = 01; Problem-Orientation\nA good name mnemonic name generally speaks to the problem rather than the solution. A good name is the what more than how. In general, if a name refers to some aspect of computing rather than to the problem, it\u0026rsquo;s a how rather than a what. Avoid such a name in favor of a name that refers to the problem itself.\nA record of employee data could be called inputRec or employeeData. inputRec is a computer term that refers to computing ideas\u0026ndash;input and record. employeeData refers to the problem domain rather than the computing universe. Similarly, for a bit field indicating printer status, bitFlag is a more computerish name than printerReady. In accounting application, calcVal is more computerish.\nEncodings We have enough encodings to deal with without adding more to our burden. Encoding type or scope information into names simply adds an extra burden of deciphering. It is an unnecessary mental burden when trying to solve a problem. Encoded names are seldom pronounceable and are easy to miss-type. An encoding system will mislead the reader.\nAdvice Avoid misleading names or abbreviations Avoid names with similar meanings Avoid variables with different meanings but similar names Avoid numerals in names Avoid misspelled words in names Don\u0026rsquo;t differentiate variable names solely by capitalization Avoid multiple natural languages Avoid the names of standard types, variables, and routines Don\u0026rsquo;t use a name that is unrelated to what the variable represents Avoid names containing hard-to-read characters Naming Conventions Why Have Convention?\nThey let you take more for granted. By making one global decision rather than many local ones, you can concentrate on the more important characteristics of code. They help you transfer knowledge across projects. Similarities names give you an easier and more confident understanding of what unfamiliar variables are supposed to do. They help you learn to code more quickly on a new project. They reduce name proliferation. Without naming conventions, you can easily call the same thing by two different names. For example, you might call total points both pointTotal and totalPoints. They compensate for language weaknesses. The convention can differentiate between local, class, and global data. They emphasize relationships among related items. When You Should Have a Naming Convention?\nWhen multiple programmers are working on a project When you plan to turn the program over to another programmer for modification and maintenance When your programs are reviewed by other programmers in your organization When your program is so large that you can\u0026rsquo;t hold the whole thing in your brain at once and must think about it in pieces When your program will be long-lived enough that you might put it aside for a few weeks or months before working on it again When you have a lot of unusual terms that are common on a project and want to have standard terms or abbreviations to use in coding You always benefit from having some kind of naming convention. The considerations above should help you determine the extent of the convention to be on the particular project.\nThe most important consideration in naming a variable is that the name fully and accurately describes the entity the variable represents.\nGood variable names are a key element of program readability.\nBibliography: Martin, R. C. (2009). Clean code: a handbook of agile software craftsmanship. Pearson Education. McConnell, S. (2004). Code complete. Pearson Education. Thanks to Julien Dephix, Ben Sinclair, and other advisors who have helped improve this article.\n","permalink":"https://wewnumam.github.io/articles/the-power-of-variable-names/","summary":"\u003ch2 id=\"meaningful-variable-names\"\u003eMeaningful Variable Names\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eChoosing good names takes time but saves more than it takes.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch3 id=\"intention-revealing-names\"\u003eIntention-Revealing Names\u003c/h3\u003e\n\u003cp\u003eThe name should answer all big questions. It should tell you why it exists, what it does, and how it is used. If the name requires a comment, the name does not reveal the intent.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// elapsed time in days\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe should choose the name that specifies what is being measured and the unit of that measurement:\u003c/p\u003e","title":"The Power of Variable Names"},{"content":"Why is a game said to be a game?\nThe answer is because it fulfills the key qualities of a game.\nThere are at least 10 important quality keys in a game, according to Jesse Schell in his book The Art of Game Design.\nGames are played voluntarily (volunteer) There is no compulsion in playing a game. This means that the player has the control to freely join the game and leave the game.\nGame has goals (goals) A game should have a mission that is offered to the player. These missions are intended to give the player a purpose for playing.\nOn the other hand, there are also personal goals of the player, such as curiosity, social recognition, honing skills, and other forms of motivation.\nTherefore, we as designers need to facilitate the personal goals of the player. This can take the form of puzzles, scores, levels, special items, etc.\nGames have conflict (conflict) The measure of strength is judged by the conflict that the player can overcome in the game. This is the measure that distinguishes a player as a beginner or an expert. Conflicts can come from external or internal sources.\nThe form of conflict can be in the form of limitations designed in the game. Such as enemies or obstacles that hinder the player\u0026rsquo;s goal, or shortcomings that must be carried and faced by the player.\nGames have rules (rules) Rules are one of the defining aspects of a game. Rules shape the world created in the game. Rules help players to think, learn, and create strategies, finding their own steps to achieve goals.\nGames have winning and losing conditions (circumstance) Winning or losing conditions are a form of feedback or result of the player\u0026rsquo;s effort. It is intended to assess the ability demonstrated by the player in the game. This condition is used to create the effect of reality in the game.\nGames are interactive (interactive) Entities in the game interact with each other and provide feedback. Starting from the interaction between objects in the game, to the player interacting through the controller.\nIn a game, each object has a relationship with each other and has different behaviors when interacting. This cause-and-effect effect is what the player wants to explore, an experience that the player wants and seeks.\nGame has a challenge (challenge) Challenge is an advanced stage of conflict. Conflicts are structured to galvanize the player\u0026rsquo;s determination to achieve the game\u0026rsquo;s goals.\nA bad game has either too little challenge or too much challenge. Balance is a major concern in measuring and designing challenges. Designers need to design a game that is not boring while not overwhelming the player.\nGames create their own internal value (value) Everything in the game has value to the player. This value is created within the game and is valuable or useful in the game\u0026rsquo;s reality. Such as points, coins, ranks, and anything that a player or many other players want.\nGame engages the player (motivation) A game must mentally trigger the player\u0026rsquo;s engagement to play.\nMotivation comes from many aspects of the game but there are at least two important aspects that create player motivation. First, players are driven by curiosity. This is followed by the player\u0026rsquo;s desire to demonstrate and improve their abilities (skill).\nMotivation from other aspects can be analyzed based on player demographics and psychographics.\nGames are formal and closed systems (constraints) Simply put, games need to have clear boundaries and definitions in order for a game to have a comprehensible value and form. This is intended to set the balance in the game and maintain the feel of the game.\nInformation such as symbols, signs, maps, messages, feedback, and other conceptual models emphasize boundaries that help maintain game balance and form.\nThe most common principle used in the context of form and balance is to make games that are easy to learn but difficult to master.\nThe above quality keys define the meaning of a game.\nUse them as considerations in game design and as a checklist for playtesting.\nConclusion A game is a voluntary experience that contains at least the elements: goals, interactions, obstacles, and rules.\nSource:\nSchell, J. (2008). The Art of Game Design: A book of lenses. CRC press.\n","permalink":"https://wewnumam.github.io/articles/10-key-quality-of-games/","summary":"\u003cp\u003eWhy is a game said to be a game?\u003c/p\u003e\n\u003cp\u003eThe answer is because it fulfills the key qualities of a game.\u003c/p\u003e\n\u003cp\u003eThere are at least 10 important quality keys in a game, according to Jesse Schell in his book \u003cem\u003eThe Art of Game Design\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id=\"games-are-played-voluntarily-volunteer\"\u003eGames are played voluntarily (\u003cem\u003evolunteer\u003c/em\u003e)\u003c/h3\u003e\n\u003cp\u003eThere is no compulsion in playing a game. This means that the player has the control to freely join the game and leave the game.\u003c/p\u003e","title":"The Basic Requirements of a Game"},{"content":" 📚 I love phylosophy.\n🧑‍💻 I\u0026rsquo;m presistent in software development.\n🏷 I create value from content and design.\n💻 People come to me for tech support.\n\u0026hellip;\nStill figuring out the intersection.\nCheck out my Linktree to know me more!\nNo bullshit quote. Just be clear about what we want need. ✌️\n","permalink":"https://wewnumam.github.io/about/","summary":"\u003chr\u003e\n\u003cp\u003e📚 I love phylosophy.\u003c/p\u003e\n\u003cp\u003e🧑‍💻 I\u0026rsquo;m presistent in \u003ca href=\"/ahmad-adillaumam-software-developer-resume/\"\u003esoftware development\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e🏷 I create value from content and \u003ca href=\"/ahmad-adillaumam-designer-resume/\"\u003edesign\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e💻 People come to me for tech support.\u003c/p\u003e\n\u003cp\u003e\u0026hellip;\u003c/p\u003e\n\u003cp\u003eStill figuring out the intersection.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eCheck out my \u003ca href=\"https://linktr.ee/adillaumam\"\u003eLinktree\u003c/a\u003e to know me more!\u003c/p\u003e\n\u003cp\u003eNo bullshit quote. Just be clear about what we \u003cdel\u003ewant\u003c/del\u003e need. ✌️\u003c/p\u003e","title":"About Me"},{"content":" 🛠 Skills Board game and video game design. Graphic design: Logo. Print media: board game, poster, book cover, business card, packaging. Social media kit. Digital painting. Video production director. Video editor. 🕓 Experience Freelance Graphic Designer 🗓️ 2019 - PRESENT\nDesigned poster, book cover, packaging design, and social media kit. Participated in logo design contest at sribu.com. Tools used: Inkscape, GIMP. Results obtained: People liked the minimalist design that I made. Minimalist design is considered to give an elegant and modern impression. Messages that are packaged in a minimalist style are more easily captured by the audience. Fiverr - Logo Designer 🗓️ APRIL 2020 - SEPTEMBER 2021\nDesign minimalist logos for personal clients and startups. Provide logo design improvements according to client requests. Tools used: Inkscape. While the project was running, I gave advice and information about design principles to the client, so that the design used can match the needs and purpose of its use. Results obtained: I received positive feedback and 5-point reviews from all clients. 📚 Education STMM MMTC Yogyakarta (Game Technology) 🗓️ 2021 - PRESENT\nDesign board game print \u0026amp; play on itch.io. Building case study project: Group board game design: guidebook, cards, and tokens. Localized character design: Kebo Bule, Domba Priangan, Kodok Darah. Game Technology program mascot. Story book cover. SMKN 2 Surakarta (Software Engineering) 🗓️ 2018 - 2021\nCase study project: Designing business card. Director and editor of bakmie toprak cooking tutorial video. Director and editor video of statistics material for median sub-matter. Production director and editor scoutmaster profile video of SMKN 2 Surakarta. Results obtained: The video I designed helped deliver the scoutmaster of SMKN 2 Surakarta to become the outstanding scoutmaster of Prov. Central Java in 2020. 🔍 More icon platform description LinkedIn My LinkedIn profile. Fiverr My logo design service. Dribbble A collection of logos I made. ArtStation A collection of my artwork. Sarbini Damai YouTube channel that I design and operate. Ahmad Adillaumam A fully managed personal YouTube channel. 💬 Contact ✉️ Ngemplak, Boyolali, Central Java, Indonesia 57375 ✉️ Gamping, Sleman, Special Region of Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/ahmad-adillaumam-designer-resume/","summary":"\u003chr\u003e\n\u003ch2 id=\"-skills\"\u003e🛠 Skills\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBoard game and video game design.\u003c/li\u003e\n\u003cli\u003eGraphic design:\n\u003cul\u003e\n\u003cli\u003eLogo.\u003c/li\u003e\n\u003cli\u003ePrint media: board game, poster, book cover, business card, packaging.\u003c/li\u003e\n\u003cli\u003eSocial media kit.\u003c/li\u003e\n\u003cli\u003eDigital painting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eVideo production director.\u003c/li\u003e\n\u003cli\u003eVideo editor.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-experience\"\u003e🕓 Experience\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=\"freelance-graphic-designer\"\u003eFreelance Graphic Designer\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003e🗓️ 2019 - PRESENT\u003c/em\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003eDesigned \u003ca href=\"https://drive.google.com/drive/u/0/folders/12HNioqXGOC_0z7zbgbBa_hKSznKMcFya\"\u003eposter, book cover, packaging design, and social media kit\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eParticipated in \u003ca href=\"https://www.sribu.com/en/members/wvwnumam\"\u003elogo design contest at sribu.com\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eTools used: Inkscape, GIMP.\u003c/li\u003e\n\u003cli\u003eResults obtained:\n\u003cul\u003e\n\u003cli\u003ePeople liked the minimalist design that I made. Minimalist design is considered to give an elegant and modern impression. Messages that are packaged in a minimalist style are more easily captured by the audience.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"fiverr---logo-designer\"\u003e\u003ca href=\"https://www.fiverr.com/ahmadadillaumam\"\u003eFiverr\u003c/a\u003e - Logo Designer\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003e🗓️ APRIL 2020 - SEPTEMBER 2021\u003c/em\u003e\u003c/p\u003e","title":"Ahmad Adillaumam - Designer Resume"},{"content":" 🛠 Skills Video game development: Video game design. Game programming (Unity \u0026amp; HTML5). Web development: Front-End (HTML, CSS, Javascript) Back-End (Codeigniter, Laravel, NodeJS, Django). Database (MySQL, PostgreSQL). CMS (Wordpress, Hugo). Software modeling: Database design. API design and documentation. UI design. Management: Source code management. Program documentation. Project management. 🕓 Experience LKS Web Technology Prov. Central Java 🗓️ MARCH 2021\nSpeed test, building web features: CSS (responsive layout) Javascript (rgb color slider) PHP (captcha) Customizing Wordpress themes using CSS. Build a voting system using Laravel. Screen record video of the competition process here.\nSurakarta City Web Design LKS 🗓️ JANUARY 2021\nBuild a blog. Built using HTML, CSS, Javascript, Laravel, and MySQL. Defining the data schema is documented using the Laravel migration feature. This makes it easier for me to present my source code. 📚 Education STMM MMTC Yogyakarta (Game Technology) 🗓️ 2021 - PRESENT\nHIMA Gametech Research \u0026amp; Development Division: Building organization website landing page. Developing roadmap and learning resources for game developers. Building case study projects: Collection of college game projects. Voting system. SMKN 2 Surakarta (Software Engineering) 🗓️ 2018 - 2021\nBuilding case study project: Attendance system using QR code. Hospital information system. Covid-19 information service. Digital library service. 🔍 More icon platform description LinkedIn My LinkedIn profile. Github My source code repository and project activity. Itch.io A collection of games made by me. YouTube My content related to software and game development. 💬 Contact ✉️ Ngemplak, Boyolali, Central Java, Indonesia 57375 ✉️ Gamping, Sleman, Special Region of Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/ahmad-adillaumam-software-developer-resume/","summary":"\u003chr\u003e\n\u003ch2 id=\"-skills\"\u003e🛠 Skills\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eVideo game development:\n\u003cul\u003e\n\u003cli\u003eVideo game design.\u003c/li\u003e\n\u003cli\u003eGame programming (Unity \u0026amp; HTML5).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWeb development:\n\u003cul\u003e\n\u003cli\u003eFront-End (HTML, CSS, Javascript)\u003c/li\u003e\n\u003cli\u003eBack-End (Codeigniter, Laravel, NodeJS, Django).\u003c/li\u003e\n\u003cli\u003eDatabase (MySQL, PostgreSQL).\u003c/li\u003e\n\u003cli\u003eCMS (Wordpress, Hugo).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSoftware modeling:\n\u003cul\u003e\n\u003cli\u003eDatabase design.\u003c/li\u003e\n\u003cli\u003eAPI design and documentation.\u003c/li\u003e\n\u003cli\u003eUI design.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eManagement:\n\u003cul\u003e\n\u003cli\u003eSource code management.\u003c/li\u003e\n\u003cli\u003eProgram documentation.\u003c/li\u003e\n\u003cli\u003eProject management.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-experience\"\u003e🕓 Experience\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=\"lks-web-technology-prov-central-java\"\u003eLKS Web Technology Prov. Central Java\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003e🗓️ MARCH 2021\u003c/em\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003eSpeed test, building web features:\n\u003cul\u003e\n\u003cli\u003eCSS (responsive layout)\u003c/li\u003e\n\u003cli\u003eJavascript (rgb color slider)\u003c/li\u003e\n\u003cli\u003ePHP (captcha)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCustomizing Wordpress themes using CSS.\u003c/li\u003e\n\u003cli\u003eBuild a voting system using Laravel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eScreen record video of the competition process \u003ca href=\"https://youtu.be/xQ-B3tiuptg\"\u003ehere\u003c/a\u003e.\u003c/p\u003e","title":"Ahmad Adillaumam - Software Developer Resume"}]