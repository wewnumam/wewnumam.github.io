[{"content":"Game memiliki banyak tujuan yang berbeda dan dapat dinikmati karena berbagai alasan. Beberapa orang bermain game sebagai bentuk hiburan, untuk menghabiskan waktu, atau untuk bersosialisasi dengan teman dan keluarga. Yang lain bermain game untuk menantang diri mereka sendiri atau untuk meningkatkan keterampilan mereka di bidang tertentu. Yang lainnya lagi bermain game sebagai cara untuk bersantai dan menghilangkan stres setelah hari yang panjang.\nTujuan permainan dalam konteks yang berbeda:\nHiburan Game bisa menjadi sumber hiburan, memberikan kenikmatan dan relaksasi bagi para pemainnya. Game bisa menjadi cara yang menyenangkan untuk menghabiskan waktu dan bisa dimainkan sendiri atau bersama orang lain.\nPendidikan Game dapat digunakan sebagai alat untuk pendidikan, membantu pemain mempelajari konsep baru atau mengembangkan keterampilan baru. Hal ini dapat dilakukan melalui game edukasi yang secara khusus dirancang untuk belajar, atau melalui game yang menggabungkan elemen-elemen edukasi dengan cara yang lebih menarik dan interaktif.\nIklan Game dapat digunakan sebagai cara untuk mengiklankan produk atau layanan. Misalnya, sebuah perusahaan dapat membuat game sederhana yang mempromosikan merek atau produk mereka, yang dapat diakses dan dimainkan oleh pemain secara gratis.\nProduktivitas (Gamifikasi) Gamifikasi adalah proses memasukkan elemen seperti permainan ke dalam aktivitas non-game untuk membuatnya lebih menarik dan memotivasi. Ini dapat digunakan untuk meningkatkan produktivitas dan memotivasi orang untuk menyelesaikan tugas atau mencapai tujuan.\nModel Bisnis Game dapat dikembangkan sebagai bisnis, dengan tujuan menghasilkan pendapatan melalui penjualan atau pembelian dalam game. Mereka juga dapat digunakan sebagai cara untuk mempromosikan bisnis atau merek dan gamifikasi sebagai layanan, seperti yang disebutkan di atas. Model bisnis lainnya adalah dengan melisensikan properti intelektual dan mengadakan acara seperti turnamen.\nSeni Game dapat dianggap sebagai bentuk seni, dengan desainer dan pengembang menciptakan dunia yang imersif dan menarik secara visual untuk dijelajahi pemain. Game juga dapat digunakan sebagai media untuk ekspresi artistik, memungkinkan pemain untuk membuat dan berbagi kreasi mereka sendiri.\nSains Game dapat digunakan dalam penelitian ilmiah, seperti dalam studi tentang perilaku atau kognisi manusia. Game juga dapat digunakan untuk mensimulasikan skenario dunia nyata atau menguji hipotesis dalam lingkungan yang terkendali.\nTerapi Game dapat digunakan sebagai bentuk terapi, membantu orang untuk mengatasi stres, kecemasan, atau masalah kesehatan mental lainnya. Permainan ini juga dapat digunakan untuk membantu orang-orang dengan cacat fisik atau cedera untuk meningkatkan fungsi dan mobilitas mereka.\nSecara umum, tujuan permainan adalah untuk memberikan kesenangan dan keterlibatan bagi pemain. Hal ini dapat dicapai melalui kompetisi, pemecahan masalah, eksplorasi, kreativitas, atau kombinasi dari elemen-elemen ini. Game juga dapat melayani tujuan pendidikan, membantu pemain mempelajari konsep baru atau mengembangkan keterampilan baru.\nPada akhirnya, tujuan dari sebuah game tergantung pada masing-masing pemain dan tujuan serta motivasi mereka untuk bermain. Beberapa orang mungkin bermain game hanya untuk bersenang-senang, sementara yang lain mungkin lebih fokus untuk mencapai tujuan tertentu atau meningkatkan kinerja mereka.\nKredit:\nKualitas artikel ditingkatkan oleh ChatGPT (2022).\n","permalink":"https://wewnumam.github.io/id/articles/the-purpose-of-games/","summary":"Game memiliki banyak tujuan yang berbeda dan dapat dinikmati karena berbagai alasan. Beberapa orang bermain game sebagai bentuk hiburan, untuk menghabiskan waktu, atau untuk bersosialisasi dengan teman dan keluarga. Yang lain bermain game untuk menantang diri mereka sendiri atau untuk meningkatkan keterampilan mereka di bidang tertentu. Yang lainnya lagi bermain game sebagai cara untuk bersantai dan menghilangkan stres setelah hari yang panjang.\nTujuan permainan dalam konteks yang berbeda:\nHiburan Game bisa menjadi sumber hiburan, memberikan kenikmatan dan relaksasi bagi para pemainnya.","title":"Tujuan dari Game"},{"content":"Catatan:\nUntuk dapat menggunakan fitur-fitur ini, kita membutuhkan setidaknya C# versi 7 ke atas atau Unity 2018 ke atas.\nTernary Operator Dalam pemrograman komputer, ternary operator adalah merupakan bagian dari sintaks untuk ekspresi kondisional dasar dalam beberapa bahasa pemrograman, biasanya disebut sebagai operator kondisional, ternary if, atau inline if.\nSebuah ekspresi a ? b : c dievaluasi ke b jika nilai a benar, dan sebaliknya ke c. Atau secara singkat: \u0026ldquo;jika a maka b jika tidak maka c\u0026rdquo;.\nEkspresi kondisional menggunakan if:\nif (health \u0026gt; 0) { barColor = Color.red; } else { barColor = Color.black; } Ekspresi kondisional menggunakan ternary operator:\nbarColor = health \u0026gt; 0 ? Color.red : Color.black; String Interpolation Karakter khusus $ mengidentifikasi string literal (string tanpa format) sebagai string interpolasi. String interpolasi adalah string literal yang mungkin berisi ekspresi interpolasi.\nInterpolasi string menyediakan sintaks yang lebih mudah dibaca dan nyaman untuk memformat string.\nstring name = \u0026#34;Groot\u0026#34;; float health = 100; float mana = 50; // operator \u0026#39;+\u0026#39; logMessage = \u0026#34;Unit \u0026#34; + name + \u0026#34;, health: \u0026#34; + health + \u0026#34;, mana: \u0026#34; + mana; // string.Format logMessage = string.Format(\u0026#34;Unit {0}, health: {1}, mana: {2}\u0026#34;, name, health, mana); // string interpolation logMessage = $\u0026#34;Unit {name}, health: {health}, mana: {mana}\u0026#34;; Expression Body Definisi expression body memungkinkan kita menyediakan implementasi property dalam bentuk yang sangat ringkas dan mudah dibaca.\nDefinisi expression body memiliki sintaks umum berikut ini: anggota =\u0026gt; ekspresi;\nProperti normal:\nprivate float health, maxHealth; public float HealthPrencentage { get { return health / maxHealth; } set { health = value * maxHealth; } } Properti expression-body:\nprivate float health, maxHealth; public float HealthPrencentage { get =\u0026gt; health / maxHealth; set =\u0026gt; health = value * maxHealth; } read-only properti expression-body:\npublic float HealthPrencentage =\u0026gt; health / maxHealth; \u0026amp;nbsp\nMethod normal:\npublic float Percentage(float current, float max) { return current / max; } Method expression-body:\npublic float Percentage(float current, float max) =\u0026gt; current / max; Local Function Local functions adalah method-method yang bersarang di dalam method yang lain. Mereka hanya bisa dipanggil dari method yang mengandungnya.\nLocal functions membuat maksud dari kode kita menjadi jelas. Siapa pun yang membaca kode kita dapat melihat bahwa method ini tidak dapat dipanggil kecuali oleh method yang mengandungnya.\nMethod normal:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); } private IEnumerator UpdateHealthBarCoroutine() { yield return null; } Local function:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); IEnumerator UpdateHealthBarCoroutine() { yield return null; } } Null Checking Menyederhanakan pola pengkodean umum di mana variabel diberi nilai jika null.\nPengecekan null yang umum:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { if (OnEnemyHit != null) OnEnemyHit.Invoke(other.gameObject); } Operator null checking:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { OnEnemyHit?.Invoke(other.gameObject); } Null Coalescing Operator null-coalescing ?? mengembalikan nilai dari operasi kiri jika operasi kiri tidak null; jika tidak, operator ini mengevaluasi operasi kanan dan mengembalikan hasilnya. Operator ?? tidak mengevaluasi bagian kanan operasi kanannya jika operasi kiri bernilai non-null.\npublic class GameManager : MonoBehaviour { private Player player; // using null comparison public Player GetPlayer() { if (player == null) return new Player(\u0026#34;Groot\u0026#34;); else return player; } // using null coalescing operator public Player GetPlayer() { return player ?? new Player(\u0026#34;Groot\u0026#34;); } } nameof Keyword Ekspresi nameof menghasilkan nama variabel, tipe, atau member sebagai konstanta string. Ekspresi nameof dievaluasi pada waktu kompilasi dan tidak berpengaruh pada waktu berjalan.\npublic class Enemy { public string name; public flaot health; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.name}, health: {enemy.health}\u0026#34;); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;{nameof(Enemy.name)}: {enemy.name}, {nameof(Enemy.health)}: {enemy.health}\u0026#34;); Dalam situasi tertentu ketika kita ingin mengubah nama variabel, kita tidak perlu mengubah string yang kita buat secara manual.\npublic class Enemy { public string id; public flaot hp; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.id}, health: {enemy.hp}\u0026#34;); // will print -\u0026gt; id: Groot, hp: 100 Debug.Log($\u0026#34;{nameof(Enemy.id)}: {enemy.id}, {nameof(Enemy.hp)}: {enemy.hp}\u0026#34;); Source:\n","permalink":"https://wewnumam.github.io/id/articles/syntatic-sugars-csharp-hidden-features/","summary":"Catatan:\nUntuk dapat menggunakan fitur-fitur ini, kita membutuhkan setidaknya C# versi 7 ke atas atau Unity 2018 ke atas.\nTernary Operator Dalam pemrograman komputer, ternary operator adalah merupakan bagian dari sintaks untuk ekspresi kondisional dasar dalam beberapa bahasa pemrograman, biasanya disebut sebagai operator kondisional, ternary if, atau inline if.\nSebuah ekspresi a ? b : c dievaluasi ke b jika nilai a benar, dan sebaliknya ke c. Atau secara singkat: \u0026ldquo;jika a maka b jika tidak maka c\u0026rdquo;.","title":"Syntatic Sugars | Fitur Tersembunyi C#"},{"content":"Pikirkanlah Setiap Potongan Gambar Saat menonton video, kita hanya bisa melihat ke arah kamera membidik. Kalau kamera melihat hal yang sama terlalu lama atau tidak melihat sesuatu yang ingin penonton lihat, penonton akan bosan.\nPertandingan olahraga di TV biasa diliput dengan belasan hingga puluhan kamera yang berbeda—setiap beberapa detik pindah ke gambar yang berbeda. Dan setiap gambar berfokus pada informasi yang baru. Setiap gambar memiliki arti, dan pemotongan antar gambar tersebut memberikan banyak informasi tanpa membuat penonton bosan.\nSetiap kali membidikkan kamera, pikirkanlah, siapa yang akan kita bidik? Apa yang sedang mereka lakukan? Apakah itu menarik? Jika tidak, potong saja dan carilah sesuatu yang lain untuk direkam.\nJangan menyalakan kamera secara nonstop. Sekalipun kita akan mengeditnya, tapi ini adalah kebiasaan buruk yang hanya akan membuang-buang waktu, karena kita harus menonton puluhan potongan video yang tak berguna dan tak bisa dipakai.\nRekam Ketika Bagian Putih Mata Subjek Terlihat Orang-orang mengkomunikasikan setengah dari apa yang mereka ungkapkan dari mulut mereka dan setengah lainnya dengan mata mereka. Jika kita melewatkan matanya, kita akan melewatkan setengah dari pesannya.\nPola-pola halus pada wajah membentuk setengah komunikasi antarmanusia.\nVideo kita langsung jadi 200 persen lebih baik jika kita tetap berada dekat dengan subjek untuk menangkap dengan jelas bagian putih mata mereka.\nSelalu Ambil Gambar dengan Durasi di Bawah 10 Detik Potongan-potongan gambar yang pendek adalah bagian dari bahasa film modern.\nGabungan video yang pendek yang berbeda memiliki lebih banyak informasi dan perasaan, dibandingkan jika videonya merekam secara terus-menerus.\nMenge-zoom dengan Kaki 10x zoom = 10x lebih bergoyang.\nGunakanlah alat-alat perekaman yang membantu kita mengatasi kamera goyang karena tangan kita. Untuk mencegah kamera goyang, kita bisa memasangkan tripod atau stabilizer—atau memanfaatkan bidang datar di sekitar lokasi.\nUntuk mendapatkan close-up yang bagus, atur lensa kamera sampai mentok di sudut lebar (alias tidak di-zoom sama sekali). Berjalanlah secara fisik untuk mendekati subjek, kemudian ambillah gambar.\nHal yang perlu diingat mengenai zoom digital:\nJangan. Jangan pernah enggunakannya.\nJangan Bergerak! Jangan Goyang! Dan Jangan Menge-zoom Selama Pengambilan Gambar! Perlakukan kamera video seperti kamera foto.\nBidikkan lensa. Jauhkan jari kita dari tombol zoom. Lihat ke layar LCD untuk memastikan gambarnya bagus. Dan, tekan start.\nBerhentilah setelah mendapatkan gambar, dan ulangi. Ritme yang kita ikuti adalah Pindah, Bidik, Rekam, Berhenti.\nAturlah Agar Cahaya Datang dari Arah Belakang Kamera Kamera akan bingung saat dia harus berurusan dengan beberapa tingkat pencahayaan berbeda dalam pengambilan gambar yang sama.\nSebagian besar kamera video akan mengekspos objek yang paling besar dan paling terang di dalam frame.\nJika cahaya berada di depan kamera, maka latar belakang subjek akan selalu lebih terang. Subjek yang kita rekam akan jadi gelap.\nJika sumber cahaya tetap berada di belakang kamera, cahayanya akan jatuh menerpa subjek. Mereka akan menjadi bagian yang terang di dalam frame. Dan kita akan bisa melihatnya.\nNonaktifkan Efek Digital Kamera Kalau kita mengambil video yang bagus dan bersih, kita bisa selalu menambahkan efek-efek yang kita inginkan nanti, menggunakan salah satu dari banyak program pengeditan komputer yang dirancang untuk hal itu.\nTapi kalau kita langsung merekam video dengan aplikasi efek bawaan kamera, kita tidak akan pernah bisa menghilangkannya. Video kita terjebak dengan efek itu selamanya.\nBerfokuslah Pada Hal yang Benar-benar Menarik Setiap video akan jadi lebih baik saat kita mengaplikasikan prinsip yang terorganisasi, dan prinsip apa pun itu, hampir tak masalah.\nBidik konsentrasi wajah subjek, apa yang dilakukanya, reaksi penonton, apa yang penonton lihat, dan bagaimana suasana lokasi.\nCarilah sesuatu untuk difokuskan—seseorang atau sudut yang menarik—dan video kita akan langsung jadi lebih menarik.\nJangan Menggunakan Teks yang Amatir Jangan pakai teks, kecuali itu memang benar-benar penting.\nBerikut beberapa tips yang penting untuk diterapkan jika hendak menggunakan teks:\nBuatlah teksnya pendek dan kata-katanya sederhana. Gunakan font yang sederhana dan mudah dibaca (font kategori sans-serif).\nJangan biarkan teks mengganggu bagian penting dalam gambar dan pastikan teksnya tetap mudah dibaca.\nTaruhlah di atas atau di sepertiga bawah layar.\nGunakan huruf berwarna putih di atas latar belakang hitam atau hitam di atas warna terang—jangan tambahkan shadow, outline, underline, motion, maupun glow.\nJangan menggunakan penulisan secara vertikal.\nKalau latar belakang gambar kita setengah-terang sehingga teks sulit dibaca dengan warna teks hitam maupun putih, taruhlah kotak persegi panjang sederhana di belakang teks.\nTampilkan teks pada layar sekitar satu-ketuk lebih panjang dari waktu yang kita butuhkan untuk membacanya dengan lantang.\nSeperti segala sesuatu di dalam video, usahakan teks tetap sederhana tapi elegan.\nBuatlah Video yang Singkat Apa pun yang pantas yang pantas diucapkan di dalam video, sepantasnya diucapkan dengan singkat.\nIklan TV menceritakan kisah yang lengkap, menghibur kita, dan menjual kepada kita—semuanya dalam 30 detik.\nCara terbaik untuk membuat video kita jadi lebih pendek adalah dengan meniatkannya untuk menjadi pendek sejak awal.\nKalau kita ragu, potong saja.\nGunakanlah mikrofon eksternal Sebagian besar kamera video mengatur tingkat suaranya sendiri. Itu berarti mereka mengambil apa pun yang mereka dengar dan memperkerasnya ke tingkat yang konstan dan bisa di dengar.\nSayangnya, jika kamera mendengar suara berisik di sekitarnya, mereka juga akan memperkerasnya. Bunyi berisik lalu lintas, sirine, dan suara kerumunan—semuanya diperkeras.\nKalau kita berada sedekat mungkin dengan subjek, masalahnya akan lebih sedikit.\nUntuk membuatnya tak ada masalah sama sekali gunakan mic clip on yang bagus. Jepitkan ujung mic ke baju subjek, dan masalah suara ini pun akan berakhir.\nSumber: Stockman, S. (2011). How to Shoot Video That Doesn’t Suck: Advice to Make Any Amateur Look Like a Pro. Workman Publishing.\n","permalink":"https://wewnumam.github.io/id/articles/12-easy-ways-to-make-videos-significantly-better/","summary":"Pikirkanlah Setiap Potongan Gambar Saat menonton video, kita hanya bisa melihat ke arah kamera membidik. Kalau kamera melihat hal yang sama terlalu lama atau tidak melihat sesuatu yang ingin penonton lihat, penonton akan bosan.\nPertandingan olahraga di TV biasa diliput dengan belasan hingga puluhan kamera yang berbeda—setiap beberapa detik pindah ke gambar yang berbeda. Dan setiap gambar berfokus pada informasi yang baru. Setiap gambar memiliki arti, dan pemotongan antar gambar tersebut memberikan banyak informasi tanpa membuat penonton bosan.","title":"12 Cara Mudah untuk Membuat Video Menjadi Lebih Baik Secara Signifikan"},{"content":"Halaman Pembuka Pada cover halaman berisi informasi diantaranya:\nJudul. Judul berupa tulisan “Game Design Document” diperlukan untuk memberi nama dokumen sehingga secara sekilas orang dapat menyiratkan apa yang dimaksud dalam dokumen tersebut. Judul Game. Berupa lampiran nama game baik dalam bentuk logo atau bentuk apapun yang dapat dibaca. Genre dan Mode Permainan. Berisi keterangan mengenai genre dan mode permainan—seperti mode online atau offline, dan mode single-player atau multi-player—yang akan dipakai. Pemangku Kepentingan. Berupa lampiran logo kelompok, organisasi, dan/atau institusi yang menaungi proyek game ini. Hak Cipta, Alamat, dan Kontak. Berisi keterangan hak cipta, tahun produksi, nama organisasi yang bertanggung jawab, alamat tempat kerja, dan alamat email yang dapat dihubungi. Kemudian pada halaman berikutnya berisi daftar isi dokumen beserta nomor halamannya.\nLatar Belakang Latar belakang berisi uraian permasalahan yang terjadi dan alasan game desainer membuat game ini. Latar belakang terdiri dari tiga paragraf atau lebih.\nParagraf pertama berisi uraian secara umum tentang masalah atau fenomena yang diangkat. Kemudian paragraf selanjutnya berisi penjelasan khusus tentang permasalahan yang masih terkait dengan uraian paragraf pertama. Paragraf terakhir berisi alasan mengapa game ini perlu dibuat berdasarkan permasalahan yang ada.\nRumusan Ide Penciptaan (Rumusan Masalah) Rumusan masalah berisi daftar pertanyaan yang akan diuraikan dalam penjelasan desain. Secara umum, daftar pertanyaan tersebut menanyakan apakah bagian-bagian atau konten dalam desain game nanti dinilai mampu memecahkan masalah yang diangkat.\nTujuan dan Manfaat Tujuan berisi pernyataan mengenai alasan game designer membuat game ini. Umumnya menyimpulkan solusi dari masalah yang diangkat, atau secara singkat menawarkan game ini sebagai solusi dari masalah tersebut.\nManfaat berisi harapan game designer kepada pemain setelah memainkan game yang dibuat. Umumnya menjelaskan dampak atau perubahan yang ingin dibuat dengan adanya game ini.\nPlatform yang Digunakan Bagian ini menjabarkan perangkat yang akan digunakan untuk memainkan game ini. Secara umum, bagian ini mendeskripsikan spesifikasi perangkat keras maupun lunak yang perlu dimiliki pemain.\nKebutuhan Bagian ini menjelaskan kebutuhan produksi untuk membuat game ini. Umumnya berisi daftar perangkat yang akan dipakai dalam produksi seperti spesifikasi perangkat keras dan aplikasi yang digunakan.\nReferensi Game Referensi game berisi sumber acuan atau rujukan dari game lain atau proyek lain.\nReferensi ini dikategorikan berdasarkan konten yang ada dari game rujukan. Misal: referensi cerita, referensi gameplay, referensi mekanik, referensi desain karakter, referensi user interface, referensi font, referensi environment, referensi animasi, dll.\nPenjelasan yang sertai gambar dan tautan akan sangat membantu tim memahami maksud yang diinginkan.\nProses Perancangan Game Bagian ini berisi daftar perincian dan penjelasan segala aspek dalam produksi, antara lain:\nTimeline Produksi. Berisi urutan tindakan atau kegiatan yang akan dilakukan selama produksi, disusun berdasarkan jadwal yang ditentukan, dan dikategorikan berdasarkan tanggung jawab masing-masing anggota tim. Genre. Menguraikan perincian tentang jenis atau tipe game dan tema yang dimiliki game ini. Disertai juga alasan mengapa game designer mengangkat genre ini. Alur Cerita. Menceritakan latar belakang dari kejadian yang dialami tokoh sebelum terjadinya konflik dalam game ini. Secara umum berisi pengenalan tokoh dan lingkungannya serta tantangan yang perlu dijawab dalam game. Gameplay. Menjelaskan aspek taktis dari game, seperti plotnya dan cara memainkannya. Secara umum berisi perincian pola yang ditentukan melalui aturan permainan, hubungan antara pemain dan permainan, tantangan dan mengatasinya, plot dan koneksi pemain dengannya. Mekanik. Menjelaskan komponen sistem yang merespon permainan terhadap gerakan atau tindakan pemain. Umumnya diuraikan dalam bentuk tabel atau diagram. Bagian ini harus mampu menjelaskan maksud mekanik berdasarkan nama/jenis mekanik, objek yang berinteraksi, kondisi aktif, input pemain, dan keterangan lain. Desain Level. Desain level juga dikenal sebagai desain lingkungan atau pemetaan game. Desain level mencakup sketsa desain konseptual level. Umumnya berisi lampiran tata letak objek dalam peta game beserta keterangan event yang akan dipicu dari tindakan pemain. Antarmuka Pengguna (UI). User interface meliputi desain halaman dan elemen UI, tata letak ruang, penggunaan tipografi, pemilihan warna, dan pemilihan gaya atau tema. Elemen UI meliputi kontrol input (button, text field, checkbox), komponen navigasi (gamepad, slider, breadcrumb), komponen informasi (icon, message box, progress bar), dan container (pembungkus komponen UI). Desain Karakter. Berisi lampiran karakter beserta keterangan keseluruhan unsur yang dipakai. Desain karakter harus melampirkan karakter dalam berbagai dimensi, kondisi, dan ekspresi. Aset Game. Berisi daftar keterangan dan lampiran aset-aset visual atau objek-objek yang dipakai dalam game. Engine. Berisi penjelasan teknis terkait environment atau konfigurasi dalam game engine. Umumnya berisi deskripsi konfigurasi yang dicustom, daftar modul yang dipakai, metode dan kerangka kerja dipakai, dan penjelasan teknis lain yang berisi arahan untuk game programmer. Desain Suara. Berisi daftar musik latar (BGM) dan efek suara (SFX) beserta keterangan—jenis, tipe, atau tema—dan kondisinya dalam game. Nilai Jual. Mengacu pada manfaat unik dari game ini yang memungkinkannya menonjol dari pesaing. Secara umum menjelaskan klaim eksplisit tentang keunikan yang melibatkan atribut dalam game dan dapat diverifikasi secara objektif dan memiliki manfaat kegunaan. Credit Title Bagian ini berisi daftar nama anggota tim beserta tugasnya dalam proyek ini. Secara umum masing-masing bertanggung jawab atas satu bidang mencakup art, tech, atau design.\n","permalink":"https://wewnumam.github.io/id/articles/game-design-document-format-for-academic-purposes/","summary":"Halaman Pembuka Pada cover halaman berisi informasi diantaranya:\nJudul. Judul berupa tulisan “Game Design Document” diperlukan untuk memberi nama dokumen sehingga secara sekilas orang dapat menyiratkan apa yang dimaksud dalam dokumen tersebut. Judul Game. Berupa lampiran nama game baik dalam bentuk logo atau bentuk apapun yang dapat dibaca. Genre dan Mode Permainan. Berisi keterangan mengenai genre dan mode permainan—seperti mode online atau offline, dan mode single-player atau multi-player—yang akan dipakai. Pemangku Kepentingan.","title":"Format Game Design Document untuk Keperluan Akademik"},{"content":"Nama Variabel yang Bermakna Memilih nama yang baik membutuhkan waktu tetapi menghemat lebih banyak daripada yang dibutuhkan.\nNama yang Mengungkapkan Niat Nama harus menjawab semua pertanyaan besar. Nama harus memberitahu kita mengapa variabel itu ada, apa yang dilakukannya, dan bagaimana penggunaannya. Jika nama tersebut membutuhkan komentar, maka nama tersebut tidak mengungkapkan maksudnya.\nlet d; // waktu yang berlalu dalam hari Kita harus memilih nama yang menentukan apa yang sedang diukur dan unit pengukuran itu:\nlet elapsedTimeInDays; let daysSinceCreation; let daysSinceModification; let fileAgeInDays; Contoh kode yang sulit dimengerti karena menggunakan nama yang buruk:\nfunction getThem() { let list1 = []; for (let x in theList) if (x[0] == 4) list1.add(x); return list1; } Masalahnya bukan pada kesederhanaan kodenya, tetapi penyederhanaan kodenya. Kode tersebut tidak memberitahukan benda apa saja yang ada di dalam theList dan apa nilai dari 4. Hanya dengan memberikan nama-nama konseptual, kita dapat memperbaiki kode secara signifikan:\nfunction getFlaggedCells() { let flaggedCells = []; for (let cell in gameBoard) { if (cell[STATUS_VALUE] == FLAGGED) flaggedCells.add(cell); } return flaggedCells; } atau secara fungsional:\nfunction getFlaggedCells(gameBoard) { return gameBoard.filter(cell =\u0026gt; cell[STATUS_VALUE] === FLAGGED) } Contoh Nama Variabel yang Baik dan Buruk\nTujuan Variabel Nama Baik Nama Buruk Jumlah total pemeriksaan yang ditulis hingga saat ini runningTotal, checkTotal written, ct, checks, CHKTTL, x, x1, x2 Kecepatan peluru velocity, trainVelocity, velocityMph velt, v, tv, train,x, x1, x2 Tanggal saat ini currentDate, todaysDate cd, current, c, x, x1, x2, date Baris per halaman linesPerPage lpp, lines, l, x, x1, x2 Panjang Nama Optimum\nTerlalu panjang Pendek Tepat numberOfPeopleOnTheUsOlympicTeam n, np, ntm numTeamMembers, teamMemberCount numberOfSeatsInTheStadium n, ns, nsisd numSeatsInStadium, seatCount maximumNumberOfPointsInModernOlympics m, mp, max, points maxTeamPoints, maxPoints Perbedaan yang Bermakna Karena kita tidak dapat menggunakan nama yang sama untuk merujuk ke dua hal yang berbeda dalam lingkup yang sama, kita mungkin tergoda untuk mengubah satu nama secara sembarangan. Tidak cukup hanya dengan menambahkan deret angka atau kata-kata mengganggu (mubazir), walaupun compiler atau interpreter sudah puas.\nfunction copyChars(a1, a2) { for (let i = 0; i \u0026lt; a1.length; i++) { a2[i] = a1[i]; } } Jika nama harus berbeda, maka mereka juga harus berarti sesuatu yang berbeda. Deret angka {a1, a2, ... aN} adalah kebalikan dari penamaan yang disengaja. Nama-nama seperti itu tidak disinformatif (mereka noninformatif); mereka tidak memberikan petunjuk tentang maksud penulis. Pertimbangkan:\nfunction copyChars(source, target) { for (let i = 0; i \u0026lt; source.length; i++) { target[i] = source[i]; } } Gunakan lawan kata secara tepat. Menggunakan konvensi penamaan untuk lawan kata membantu konsistensi, dimana hal ini membantu keterbacaan.\nKebalikan Umum dalam Nama Variabel\nbegin/end first/last locked/unlocked min/max next/previous old/new opened/closed visible/invisible source/target up/down Nama yang Dapat Diucapkan Jika kita tidak dapat mengucapkannya, kita tidak dapat mendiskusikannya tanpa terdengar seperti orang bodoh. Hal ini penting karena pemrograman adalah aktivitas sosial. Bandingkan:\n// ymdhms (date, year, month, day, hour) let genymdhms; let modymdhms; let pszqint = \u0026#34;102\u0026#34;; menjadi\nlet generationTimestamp; let modificationTimestamp; let recordId = \u0026#34;102\u0026#34;; Nama yang dapat dicari Nama dengan huruf tunggal dan konstanta numerik memiliki masalah khusus karena tidak mudah ditemukan di seluruh badan teks. Nama huruf tunggal HANYA dapat digunakan sebagai variabel lokal di dalam metode pendek. Panjang nama harus sesuai dengan ukuran ruang lingkupnya. Jika sebuah variabel atau konstanta mungkin terlihat atau digunakan di banyak tempat dalam sebuah badan kode, sangat penting untuk memberikan nama yang mudah dicari. Bandingkan:\nfor (let j = 0; j \u0026lt; 34; j++) { s += (t[j] * 4) / 5; } menjadi\nlet realDaysPerIdealDay = 4; const WORK_DAYS_PER_WEEK = 5; let sum = 0; for (let j = 0; j \u0026lt; NUMBER_OF_TASK; j++) { let realTaskDays = taskEstimate[j] * realDaysPerIdealDay; let realTaskWeeks = realTaskDays / WORK_DAYS_PER_WEEK; sum += realTaskWeeks; } Penamaan Jenis Data Tertentu Penamaan Indeks Loop\nNama i, j, dan k adalah nama-nama variabel loop sederhana yang lazim:\nfor (let i = firstItem; i \u0026lt; lastItem; i++) { data[i] = 0; } Jika sebuah variabel akan digunakan di luar perulangan, variabel tersebut harus diberi nama yang lebih bermakna daripada i, j, k. Misalnya, jika kita membaca record dari file dan perlu mengingat berapa banyak record yang telah kita baca, nama yang lebih bermakna seperti recordCount akan sesuai:\nlet recordCount = 0 while (moreScore()) { score[recordCount] = getNextScore(); recordCount++; } Satu alasan umum mengapa loop berkembang adalah karena mereka bersarang. Jika kita memiliki beberapa loop bersarang, berikan nama yang lebih panjang untuk variabel teratas untuk meningkatkan keterbacaan.\nfor (teamIndex = 0; teamIndex \u0026lt; teamCount; teamIndex++) { for (eventIndex = 0; eventIndex \u0026lt; eventCount[teamIndex]; eventIndex++) { score[teamIndex][eventIndex] = 0; } } Nama-nama yang dipilih dengan hati-hati untuk variabel indeks-lingkaran menghindari masalah umum dari cross-talk indeks. Cara paling sederhana untuk menghindari masalah tersebut adalah dengan memikirkan nama-nama yang lebih deskriptif daripada i, j, k. score[teamIndex][eventIndex] lebih informatif daripada score[i][j]\nPenamaan Variabel Status Variabel status menggambarkan keadaan program kita. Lebih baik menganggap flag sebagai variabel status. Flag harus diberi nilai dan nilainya harus diuji dengan tipe enumerasi, konstanta, atau variabel global yang bertindak sebagai konstanta. Berikut adalah beberapa contoh flag dengan nama yang buruk:\nif (flag) ... if (statusFlag == 0x0F) ... if (printFlag == 16) ... if (computeFlag == 0) ... flag = 0x1; statusFlag = 0x80; printFlag = 16 computeFlag = 0; Berikut adalah contoh kode serupa yang lebih jelas:\nif (dataReady) ... if (charType \u0026amp; PRINTABLE_CHAR) ... if (reportType == reportTypeEnum.annual) ... if (recalcNeeded == true) ... dataReady = true; charType = CONTROL_CHARACTER; reportType = reportTypeEnum.annual recalcNeeded = false; Penamaan Variabel Sementara\nVariabel sementara digunakan untuk menampung hasil antara dari perhitungan, sebagai placeholder sementara, dan untuk menampung nilai housekeeping. Mereka biasanya disebut temp, x, atau nama lain yang tidak jelas dan tidak deskriptif. Secara umum, variabel sementara adalah tanda bahwa programmer belum sepenuhnya memahami masalah. Selain itu, karena variabel-variabel tersebut secara resmi diberi status temporary, programmer cenderung memperlakukan mereka lebih santai daripada variabel lain. Hal ini meningkatkan kemungkinan terjadinya kesalahan.\nlet temp = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + temp) / (2 * a); root[1] = (-b - temp) / (2 * a); Nama temp tidak memberitahukan apapun tentang apa yang dilakukan oleh variabel tersebut. Pendekatan yang lebih baik ditunjukkan dalam contoh ini:\nlet disciminant = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + disciminant) / (2 * a); root[1] = (-b - disciminant) / (2 * a); Penamaan Variabel Boolean\nNama-nama variabel boolean yang berguna:\ndone error found success Berikan nama variabel boolean yang menyiratkan true atau false\nNama-nama seperti done dan success adalah nama boolean yang tepat karena statusnya adalah true atau false. Nama-nama seperti status dan sourceFile, di sisi lain, adalah nama-nama boolean yang buruk karena mereka tidak jelas true atau false.\nUntuk hasil yang lebih baik, ganti status dengan nama seperti error atau statusOK, dan ganti sourceFile dengan sourceFileAvailable atau sourceFileFound, atau apapun yang diwakili oleh variabel tersebut.\nBeberapa programmer suka meletakkan Is di depan nama boolean mereka. Kemudian nama variabel menjadi pertanyaan: isDone? isError? isFound? isProcessingComplete? Menjawab pertanyaan dengan true atau false akan memberikan nilai variabel.\nGunakan nama variabel boolean positif\nNama-nama negatif seperti notFound, notDone, dan notSuccessful sulit dibaca ketika mereka dinegasikan.\nPenamaan Tipe Enumerasi\nconst daysEnum = Object.freeze({ monday: 0, tuesday: 1, wednesday: 2, thursday: 3, friday: 4, saturday: 5, sunday: 6 }); Mengambil satu langkah lebih jauh, seseorang dapat mengekstrak logika ke dalam fungsi dengan jumlah argumen yang bervariasi dan menghasilkan objek yang dibekukan. Hanya ada sedikit manfaat dari teknik ini, jadi alternatif yang lebih baik adalah membuat kelas sederhana. Lagipula, enum lebih umum dalam bahasa pemrograman berorientasi objek, jadi ini terdengar sangat cocok.\nPenamaan Konstanta Ketika menamai konstanta, beri nama entitas abstrak yang diwakili oleh konstanta tersebut daripada angka yang dirujuk oleh konstanta tersebut. FIVE adalah nama yang buruk untuk konstanta. FIVE = 6 akan menjadi konyol. CYCLES_NEEDED adalah nama yang baik. Dengan cara yang sama, BAKERS_DOZEN juga merupakan nama konstanta yang buruk; DONUT_MAX adalah nama konstanta yang baik.\nMasalah Umum dalam Menggunakan Variabel Disinformasi Programmer harus menghindari meninggalkan petunjuk palsu yang mengaburkan arti kode. Kita harus menghindari kata-kata yang maknanya berbeda dari makna yang kita maksudkan. Singkatan bisa menjadi disinformatif.\nJangan merujuk pada pengelompokan akun sebagai accountList kecuali jika itu adalah List. Kata daftar berarti sesuatu yang spesifik untuk programmer. Jika wadah yang menampung akun-akun tersebut bukan sebuah List, hal ini dapat menyebabkan kesimpulan yang salah. Jadi accountGroup atau hanya accounts akan lebih baik.\nContoh yang benar-benar parah dari nama yang tidak informatif adalah penggunaan huruf kecil L dan huruf besar O sebagai nama variabel, terutama dalam kombinasi. Masalahnya, tentu saja, adalah bahwa mereka terlihat hampir seluruhnya seperti konstanta satu dan nol, masing-masing.\nlet a = l; if (O == l) a = O1; else l = 01; Orientasi-Masalah\nNama mnemonik nama yang baik umumnya berbicara tentang masalah daripada solusi. Nama yang baik adalah apa lebih dari bagaimana. Secara umum, jika sebuah nama mengacu pada beberapa aspek komputasi daripada masalah, itu adalah bagaimana daripada apa. Hindari nama seperti itu dan pilihlah nama yang mengacu pada masalah itu sendiri.\nSebuah catatan data karyawan bisa disebut inputRec atau employeeData. inputRec adalah istilah komputer yang mengacu pada ide komputasi - input dan record. employeeData mengacu pada domain masalah daripada dunia komputasi. Demikian pula, untuk bidang bit yang menunjukkan status printer, bitFlag adalah nama yang lebih komputeris daripada printerReady. Dalam aplikasi akuntansi, calcVal lebih komputeris.\nPengkodean Kita sudah cukup banyak encoding untuk ditangani tanpa menambah beban kita. Pengkodean tipe atau informasi ruang lingkup ke dalam nama-nama hanya menambah beban ekstra untuk menguraikannya. Ini adalah beban mental yang tidak perlu ketika mencoba untuk memecahkan masalah. Nama-nama yang dikodekan jarang diucapkan dan mudah salah ketik. Sistem pengkodean akan menyesatkan pembaca.\nSaran Hindari nama atau singkatan yang menyesatkan Hindari nama-nama dengan arti yang mirip Hindari variabel dengan arti yang berbeda tetapi nama yang mirip Hindari angka dalam nama Hindari kata-kata yang salah eja dalam nama Jangan membedakan nama variabel hanya dengan kapitalisasi Hindari beberapa bahasa alamiah Hindari nama-nama tipe standar, variabel, dan rutinitas Jangan gunakan nama yang tidak berhubungan dengan apa yang diwakili oleh variabel tersebut Hindari nama yang mengandung karakter yang sulit dibaca Konvensi Penamaan Mengapa Perlu Ada Konvensi?\nKonvensi memungkinkan kita mengambil lebih banyak hal untuk diberikan. Dengan membuat satu keputusan global daripada banyak keputusan lokal, kita dapat berkonsentrasi pada karakteristik kode yang lebih penting. Konvensi membantu kita mentransfer pengetahuan lintas proyek. Kesamaan nama memberi kita pemahaman yang lebih mudah dan lebih percaya diri tentang apa yang seharusnya dilakukan oleh variabel yang tidak dikenal. Mereka membantu kita belajar kode lebih cepat pada proyek baru. Mereka mengurangi proliferasi nama. Tanpa konvensi penamaan, kita dapat dengan mudah menyebut hal yang sama dengan dua nama yang berbeda. Sebagai contoh, kita mungkin menyebut total poin dengan pointTotal dan totalPoints. Konvensi ini mengkompensasi kelemahan bahasa. Konvensi dapat membedakan antara data lokal, kelas, dan global. Mereka menekankan hubungan di antara item-item yang terkait. Kapan Kita Harus Memiliki Konvensi Penamaan?\nKetika beberapa programmer sedang mengerjakan sebuah proyek Ketika kita berencana untuk menyerahkan program kepada programmer lain untuk modifikasi dan pemeliharaan Ketika program kita ditinjau oleh programmer lain dalam organisasi kita Ketika program kita begitu besar sehingga kita tidak dapat menyimpan semuanya di otak kita sekaligus dan harus memikirkannya secara terpisah-pisah Ketika program kita akan berumur cukup panjang sehingga kita mungkin mengesampingkannya selama beberapa minggu atau bulan sebelum mengerjakannya lagi Ketika kita memiliki banyak istilah yang tidak biasa yang umum pada suatu proyek dan ingin memiliki istilah atau singkatan standar untuk digunakan dalam pengkodean Kita selalu mendapat manfaat dari memiliki semacam konvensi penamaan. Pertimbangan-pertimbangan di atas akan membantu kita menentukan sejauh mana konvensi yang akan digunakan pada proyek tertentu.\nPertimbangan yang paling penting dalam penamaan variabel adalah bahwa nama tersebut sepenuhnya dan secara akurat menggambarkan entitas yang diwakili oleh variabel tersebut.\nNama variabel yang baik adalah elemen kunci dari keterbacaan program.\nDaftar Pustaka: Martin, R. C. (2009). Clean code: a handbook of agile software craftsmanship. Pearson Education. McConnell, S. (2004). Code complete. Pearson Education. Terima kasih kepada Julien Dephix, Ben Sinclair, dan penasihat lainnya yang telah membantu memperbaiki artikel ini.\n","permalink":"https://wewnumam.github.io/id/articles/the-power-of-variable-names/","summary":"Nama Variabel yang Bermakna Memilih nama yang baik membutuhkan waktu tetapi menghemat lebih banyak daripada yang dibutuhkan.\nNama yang Mengungkapkan Niat Nama harus menjawab semua pertanyaan besar. Nama harus memberitahu kita mengapa variabel itu ada, apa yang dilakukannya, dan bagaimana penggunaannya. Jika nama tersebut membutuhkan komentar, maka nama tersebut tidak mengungkapkan maksudnya.\nlet d; // waktu yang berlalu dalam hari Kita harus memilih nama yang menentukan apa yang sedang diukur dan unit pengukuran itu:","title":"Dahsyatnya Fungsi Nama Variabel"},{"content":"Kenapa sebuah game bisa dikatakan game?\nJawabannya adalah karena game memenuhi kunci-kunci kualitas sebuah game.\nSetidaknya, terdapat 10 kunci kualitas penting dalam sebuah permainan, menurut Jesse Schell dalam bukunya The Art of Game Design.\nGame dimainkan secara sukarela (volunteer) Tidak ada paksaan dalam bermain game. Artinya, pemain memiliki kendali untuk bebas mengikuti permainan dan keluar dari permainan.\nGame memiliki tujuan (goals) Sebuah game harus memiliki misi yang ditawarkan kepada pemain. Misi ini ditujukan untuk memberikan pemain tujuan bermain.\nDi sisi lain terdapat juga tujuan pribadi dari pemain, seperti rasa ingin tahu, pengakuan sosial, mengasah kemampuan, dan bentuk motivasi lainnya.\nOleh karena itu, kita sebagai desainer perlu memfasilitasi tujuan-tujuan pribadi dari pemain. Bentuk fasilitas tersebut dapat berupa puzzle, skor, level, item khusus, dsb.\nGame memiliki konflik (conflict) Ukuran sebuah kekuatan dinilai dari konflik yang bisa atasi oleh pemain dalam game. Ukuran inilah yang membedakan seorang pemain bisa dikatakan pemula atau ahli. Konflik bisa datang dari eksternal maupun internal.\nBentuk dari konflik bisa berupa batasan-batasan yang didesain dalam game. Seperti musuh atau obstacle yang menghalangi tujuan pemain, atau kekurangan yang harus dibawa dan dihadapi oleh pemain.\nGame memiliki aturan (rules) Aturan adalah salah satu aspek yang mendefinisikan sebuah game. Aturan membentuk dunia yang diciptakan dalam game. Aturan membantu pemain untuk berpikir, belajar, dan menciptakan strategi, menemukan langkah mereka sendiri untuk mencapai tujuan.\nGame memiliki kondisi menang dan kalah (circumstance) Keadaan menang atau kalah merupakan bentuk umpan balik atau hasil dari usaha pemain. Hal ini ditujukan untuk menilai kemampuan yang ditunjukkan oleh pemain dalam game. Kondisi ini digunakan untuk menciptakan efek realita dalam game.\nGame itu interaktif (interactive) Entitas-entitas dalam game berinteraksi satu sama lain dan saling memberikan feedback. Mulai dari interaksi antar objek dalam game, hingga pemain yang berinteraksi melalui controller.\nDalam sebuah game, setiap objek memiliki relasi satu sama lain dan memiliki perilaku yang berbeda-beda ketika berinteraksi. Efek sebab-akibat inilah yang ingin dijelajahi oleh pemain, sebuah pengalaman yang diinginkan dan dicari oleh pemain.\nGame memiliki tantangan (challenge) Tantangan merupakan tahap lanjut dari konflik. Konflik-konflik yang ada disusun untuk menggugah tekad pemain dalam mencapai tujuan permainan.\nSebuah game yang buruk memiliki terlalu sedikit tantangan atau terlalu banyak tantangan. Keseimbangan menjadi perhatian utama dalam mengukur dan mendesain tatangan. Desainer perlu merancang permainan yang tidak membosankan sekaligus tidak membuat pemain kewalahan.\nGame menciptakan nilai internalnya sendiri (value) Segala sesuatu yang ada di dalam game memiliki nilai yang berharga bagi pemain. Nliai ini diciptakan dari dalam game dan bernilai atau berguna dalam realitas game tersebut. Seperti poin, koin, pangkat, dan apapun yang diinginkan seorang pemain maupun banyak pemain lain.\nGame mengikutsertakan pemain (motivation) Sebuah game secara mental harus mampu memicu keketerlibatan pemain untuk bermain.\nMotivasi datang dari banyak aspek dalam game tapi setidaknya ada dua aspek penting yang menciptakan motivasi pemain. Pertama, pemain didorong oleh keingintahuan (curiosity). Kemudian diikuti dengan keinginan pemain untuk menunjukkan dan meningkatkan kemampuan (skill).\nMotivasi dari aspek lain dapat dianalisis berdasarkan demografi dan psikografi pemain.\nGame adalah sistem formal dan tertutup (constraint) Sederhanya, game perlu memiliki batasan dan definisi yang jelas agar sebuah game memiliki nilai dan bentuk yang dapat dipahami. Ini ditujukan untuk mengatur keseimbangan dalam game dan menjaga rasa (feel) dalam permainan.\nInformasi seperti simbol, tanda, peta, pesan, feedback, dan model konseptual lainnya menekankan batasan yang membantu menjaga keseimbangan dan bentuk permainan.\nPrinsip paling umum yang dipakai dalam konteks bentuk dan keseimbangan adalah membuat game yang easy to learn but difficult to master (mudah dipelajari namun sulit dikuasai).\nKunci-kunci kualitas di atas mendefinisikan arti dari sebuah game.\nGunakanlah kunci-kunci kualitas tersebut sebagai bahan pertimbangan dalam mendesain game dan sebagai checklist untuk playtesting.\nKesimpulan Game merupakan pengalaman sukarela yang mengandung setidaknya elemen: tujuan, interaksi, hambatan, dan aturan.\nSumber:\nSchell, J. (2008). The Art of Game Design: A book of lenses. CRC press.\n","permalink":"https://wewnumam.github.io/id/articles/10-key-quality-of-games/","summary":"Kenapa sebuah game bisa dikatakan game?\nJawabannya adalah karena game memenuhi kunci-kunci kualitas sebuah game.\nSetidaknya, terdapat 10 kunci kualitas penting dalam sebuah permainan, menurut Jesse Schell dalam bukunya The Art of Game Design.\nGame dimainkan secara sukarela (volunteer) Tidak ada paksaan dalam bermain game. Artinya, pemain memiliki kendali untuk bebas mengikuti permainan dan keluar dari permainan.\nGame memiliki tujuan (goals) Sebuah game harus memiliki misi yang ditawarkan kepada pemain. Misi ini ditujukan untuk memberikan pemain tujuan bermain.","title":"Syarat Dasar Sebuah Game"},{"content":" 🛠 Kemampuan Perancangan board game dan video game. Desain grafis: Logo. Media cetak: board game, poster, cover buku, kartu nama, packaging. Social media kit. Digital painting. Pengarah produksi video. Editor video. 🕓 Pengalaman Freelance Graphic Designer 🗓️ 2019 - SEKARANG\nMendesain poster, cover buku, desain packaging, dan social media kit. Mengikuti kontes desain logo di sribu.com. Tools yang dipakai: Inkscape, GIMP. Hasil yang di dapat: Orang-orang menyukai desain minimalis yang saya buat. Desain minimalis dinilai memberikan kesan elegan dan modern. Pesan yang dikemas dengan gaya minimalis lebih mudah ditangkap oleh audiens. Fiverr - Logo Designer 🗓️ APRIL 2020 - SEPTEMBER 2021\nMendesain logo minimalis untuk klien personal dan perusahaan rintisan. Melayani perbaikan desain logo sesuai permintaan klien. Tools yang dipakai: Inkscape. Selagi projek berjalan, saya memberi saran dan informasi mengenai prinsip-prinsip desain kepada klien, agar desain yang dipakai dapat menyesuaikan kebutuhan dan tujuan pemakaiannya. Hasil yang di dapat: Saya mendapatkan feedback positif dan ulasan bintang 5 dari seluruh klien. 📚 Pendidikan STMM MMTC Yogyakarta (Teknologi Permainan) 🗓️ 2021 - SEKARANG\nDesain board game print \u0026amp; play di itch.io. Membangun project studi kasus: Desain board game kelompok: buku panduan, kartu, dan token. Desain karakter bermuatan lokal: Kebo Bule, Domba Priangan, Kodok Darah. Maskot prodi Teknologi Permainan. Cover buku cerita bergambar. SMKN 2 Surakarta (Rekayasa Perangkat Lunak) 🗓️ 2018 - 2021\nProject studi kasus: Mendesain kartu nama. Pengarah dan editor video tutorial memasak bakmie toprak. Pengarah dan editor video materi statistika sub-materi median. Pengarah produksi dan editor video profil pembina pramuka SMKN 2 Surakarta. Hasil yang didapat: Video rancangan saya membantu menghantarkan pembina pramuka SMKN 2 Surakarta menjadi pembina berprestasi tingkat Prov. Jawa Tengah Th. 2020. 🔍 Lebih Lanjut icon platform deskripsi LinkedIn Profil LinkedIn saya. Fiverr Layanan desain logo saya. Dribbble Kumpulan logo buatan saya. ArtStation Kumpulan karya seni buatan saya. Sarbini Damai Channel youtube yang saya desain dan operasikan. Ahmad Adillaumam Channel youtube pribadi yang kelola secara penuh. 💬 Kontak ✉️ Ngemplak, Boyolali, Jawa Tengah, Indonesia 57375 ✉️ Gamping, Sleman, Daerah Istimewa Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/id/ahmad-adillaumam-designer-resume/","summary":"🛠 Kemampuan Perancangan board game dan video game. Desain grafis: Logo. Media cetak: board game, poster, cover buku, kartu nama, packaging. Social media kit. Digital painting. Pengarah produksi video. Editor video. 🕓 Pengalaman Freelance Graphic Designer 🗓️ 2019 - SEKARANG\nMendesain poster, cover buku, desain packaging, dan social media kit. Mengikuti kontes desain logo di sribu.com. Tools yang dipakai: Inkscape, GIMP. Hasil yang di dapat: Orang-orang menyukai desain minimalis yang saya buat.","title":"Ahmad Adillaumam - Designer Resume"},{"content":" 🛠 Kemampuan Pengembangan video game: Perancangan video game. Pemrograman game (Unity \u0026amp; HTML5). Pengembangan web: Front-End (HTML, CSS, Javascript) Back-End (Codeigniter, Laravel, NodeJS, Django) Database (MySQL, PostgreSQL). CMS (Wordpress, Hugo). Pemodelan perangkat lunak: Perancangan database. Perancangan dan dokumentasi API. Desain UI. Manajemen: Pengelolaan source code. Dokumentasi program. Manajemen project. 🕓 Pengalaman LKS Web Technology Prov. Jawa Tengah 🗓️ MARET 2021\nSpeed test, membangun fitur-fitur web: CSS (responsive layout) Javascript (rgb color slider) PHP (captcha) Melakukan kustomisasi Wordpress themes menggunakan CSS. Membangun sistem pemungutan suara menggunakan Laravel. Video rekam layar proses lomba di sini.\nLKS Web Design Kota Surakarta 🗓️ JANUARI 2021\nMembangun blog. Dibangun menggunakan HTML, CSS, Javascript, Laravel, dan MySQL. Pendefinisian skema data didokumentasikan menggunakan fitur migration Laravel. Hal ini memudahkan saya untuk mempresentasikan source code saya. 📚 Pendidikan STMM MMTC Yogyakarta (Teknologi Permainan) 🗓️ 2021 - SEKARANG\nHIMA Gametech Divisi Research \u0026amp; Development: Membangun landing page website organisasi. Menyusun roadmap dan sumber belajar game developer. Membangun project studi kasus: Kumpulan project game kuliah. Sistem pemungutan suara. SMKN 2 Surakarta (Rekayasa Perangkat Lunak) 🗓️ 2018 - 2021\nMembangun project studi kasus: Sistem presensi menggunakan kode QR. Sistem informasi rumah sakit. Layanan informasi Covid-19. Layanan perpustakaan digital. 🔍 Lebih Lanjut icon platform deskripsi LinkedIn Profil LinkedIn saya. Github Repository source code dan aktivitas project saya. Itch.io Kumpulan game buatan saya. YouTube Konten saya terkait pengembangan perangkat lunak dan game. 💬 Kontak ✉️ Ngemplak, Boyolali, Jawa Tengah, Indonesia 57375 ✉️ Gamping, Sleman, Daerah Istimewa Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/id/ahmad-adillaumam-software-developer-resume/","summary":"🛠 Kemampuan Pengembangan video game: Perancangan video game. Pemrograman game (Unity \u0026amp; HTML5). Pengembangan web: Front-End (HTML, CSS, Javascript) Back-End (Codeigniter, Laravel, NodeJS, Django) Database (MySQL, PostgreSQL). CMS (Wordpress, Hugo). Pemodelan perangkat lunak: Perancangan database. Perancangan dan dokumentasi API. Desain UI. Manajemen: Pengelolaan source code. Dokumentasi program. Manajemen project. 🕓 Pengalaman LKS Web Technology Prov. Jawa Tengah 🗓️ MARET 2021\nSpeed test, membangun fitur-fitur web: CSS (responsive layout) Javascript (rgb color slider) PHP (captcha) Melakukan kustomisasi Wordpress themes menggunakan CSS.","title":"Ahmad Adillaumam - Software Developer Resume"},{"content":" 📚 Pecinta filosofi.\n🧑‍💻 Memiliki dedikasi dalam pengembangan perangkat lunak.\n🏷 Berkarya melalui konten dan desain.\n💻 Orang-orang datang ke saya untuk mendapatkan bantuan terkait teknologi.\n\u0026hellip;\nMasih mencari tahu irisannya.\nKunjungi Linktree saya untuk mengenal saya lebih lanjut!\nStop kutipan glorifikasi. Sadari saja apa yang kita inginkan butuhkan. ✌️\n","permalink":"https://wewnumam.github.io/id/about/","summary":"📚 Pecinta filosofi.\n🧑‍💻 Memiliki dedikasi dalam pengembangan perangkat lunak.\n🏷 Berkarya melalui konten dan desain.\n💻 Orang-orang datang ke saya untuk mendapatkan bantuan terkait teknologi.\n\u0026hellip;\nMasih mencari tahu irisannya.\nKunjungi Linktree saya untuk mengenal saya lebih lanjut!\nStop kutipan glorifikasi. Sadari saja apa yang kita inginkan butuhkan. ✌️","title":"Tentang Saya"}]