[{"content":"Asosiasi Asosiasi Game Indonesia (AGI) Asosiasi Game Indonesia (AGI) adalah sebuah organisasi yang bertujuan untuk mempercepat pertumbuhan industri video game di Indonesia. Indie Games Group Indonesia (IGGI) Sebuah komunitas virtual untuk para Game Developer di Indonesia yang bertujuan untuk menghubungkan para GameDev di semua level. IGDA Indonesia International Game Developers Association (IGDA) adalah organisasi keanggotaan nirlaba terbesar di dunia yang melayani semua individu yang membuat game. Komunitas Umum Game Developer ID GameDeveloper.ID merupakan sebuah inisiatif untuk mengumpulkan berbagai sumber daya terkait informasi pengembangan game di Indonesia yang selama ini tersebar dan terpisah-pisah di berbagai platform media sosial, terutama setelah hilangnya forum gamedevid.org. Selasar Game Design Selasar Game Design (SGD) adalah sebuah komunitas untuk berkumpul dan belajar Game Design bagi siapa saja di seluruh Indonesia. Candela Imagine Penerbitan bersama industri game Indonesia. UNITY 3D Developers Indonesia Godot Engine Indonesia Unreal Developers Indonesia RPG Maker MV / VX / VX Ace / XP Construct 2 \u0026amp; 3 - Tutorial Indonesia Komunitas Daerah GameLan Game Developer Batam Game Developer Bandung Game Developer Bogor Game Developer Tanggerang Game Developer Malang Game Developer Palembang Game Developer Solo Game Developer Surabaya Game Developer Bekasi Game Developer Bali Game Developer Surabaya Media The Lazy Monday Game Developer ID Akademi Formal STMM MMTC PENS BINUS Akademi Vokasional IGDX Agate Academy Miracle Academy Gamelab Academy ","permalink":"https://wewnumam.github.io/id/articles/indonesian-game-developer-forums/","summary":"Asosiasi Asosiasi Game Indonesia (AGI) Asosiasi Game Indonesia (AGI) adalah sebuah organisasi yang bertujuan untuk mempercepat pertumbuhan industri video game di Indonesia. Indie Games Group Indonesia (IGGI) Sebuah komunitas virtual untuk para Game Developer di Indonesia yang bertujuan untuk menghubungkan para GameDev di semua level. IGDA Indonesia International Game Developers Association (IGDA) adalah organisasi keanggotaan nirlaba terbesar di dunia yang melayani semua individu yang membuat game. Komunitas Umum Game Developer ID GameDeveloper.","title":"Forum Game Developer Indonesia"},{"content":"Saat mempresentasikan game kalian ke publisher, tujuan utama presentasi kalian adalah untuk mengkomunikasikan game kalian secara efektif dan meyakinkan para stakeholder tentang visi besarnya. Memahami jenis-jenis pitch deck game dan komponen-komponen utama yang diharapkan oleh publisher dapat secara signifikan meningkatkan peluang kalian untuk mendapatkan minat dan dukungan mereka.\nJenis-jenis Pitch Deck Game: Presenting pitch deck: Jenis presentasi ini digunakan untuk presentasi langsung kepada individu atau kelompok dan harus ringkas dan lugas. ** Sent-out pitch deck**: Presentasi ini dikirim secara tidak langsung melalui email dan harus memberikan informasi yang lebih luas untuk mengimbangi kurangnya interaksi secara langsung. Komponen Utama dari sebuah Pitch Game: Ringkasan Game: Bagian ini harus berisi konsep game, elemen desain game, dan contoh art. Bagian ini berfungsi sebagai gambaran umum tentang game kalian. Biaya, Peluang, dan Peta Jalan Produksi: Komponen ini menguraikan potensi keuntungan, strategi pemasaran, milestone utama, dan alokasi anggaran untuk produksi. Profil Tim: Menyoroti pencapaian atau portofolio yang relevan dari anggota tim kalian untuk menunjukkan keahlian dan pengalaman mereka. Tips Pro: Konsep Game yang Unik dan Potensi Pasar: Penerbit lebih cenderung terlibat dengan game yang menawarkan experience yang unik, meskipun mereka juga menanggung risiko yang lebih tinggi. Penerbit akan tertarik dengan game kalian jika game tersebut memiliki permintaan pasar. Pahami Motivasi Pemain: Jelaskan dengan gamblang tujuan dan faktor-faktor yang akan memikat pemain. Apa yang membuat game kalian menarik dan menarik? Tampilkan Art Game yang Menarik: Sertakan poin-poin penting terbaik dari art game kalian untuk menyampaikan suasana dan daya tarik visual game kalian. Ketahui Posisi Pasar Kalian: Pahami lanskap persaingan dan soroti bagaimana game kalian menonjol di pasar game serupa. Pastikan hal itu menguntungkan. Tim Pengembangan yang Berkomitmen: Tunjukkan bahwa kalian memiliki tim pengembangan penuh waktu yang berdedikasi dan berkomitmen untuk proyek game kalian. Pedoman Dasar: Tarik Perhatian Lebih Awal: Pastikan aspek yang paling menarik dari game kalian disajikan dalam 1-2 menit pertama presentasi kalian untuk menarik minat publisher. Tekankan Fun dan Daya Tarik: Jelaskan dengan jelas mengapa game kalian fun dan apa yang membuatnya menarik bagi para pemain. Cakupan dan Harga yang Sesuai: Yakinkan publisher bahwa game kalian memiliki cakupan yang sesuai dan harga yang masuk akal dengan menjelaskan biaya dan peluang yang ada. Sorot Prestasi Tim: Perkenalkan rekam jejak dan prestasi anggota tim kalian untuk membangun kemampuan mereka dalam membuat game. Kesimpulan: Membuat presentasi game yang efektif membutuhkan perhatian yang cermat terhadap ekspektasi publisher. Dengan menggabungkan komponen yang disarankan dan mengikuti tips yang diberikan, kalian dapat meningkatkan peluang kalian untuk berhasil mempresentasikan game kalian dan mendapatkan dukungan dari publisher. Ingat, presentasi yang menarik dapat secara signifikan memengaruhi lintasan pengembangan dan kesuksesan game kalian di industri game kompetitif.\nSumber: ","permalink":"https://wewnumam.github.io/id/articles/understanding-publisher-expectations-for-your-game-pitch/","summary":"Saat mempresentasikan game kalian ke publisher, tujuan utama presentasi kalian adalah untuk mengkomunikasikan game kalian secara efektif dan meyakinkan para stakeholder tentang visi besarnya. Memahami jenis-jenis pitch deck game dan komponen-komponen utama yang diharapkan oleh publisher dapat secara signifikan meningkatkan peluang kalian untuk mendapatkan minat dan dukungan mereka.\nJenis-jenis Pitch Deck Game: Presenting pitch deck: Jenis presentasi ini digunakan untuk presentasi langsung kepada individu atau kelompok dan harus ringkas dan lugas.","title":"Memahami Ekspektasi Publisher untuk Pitch Game Kalian"},{"content":"Industri game adalah bidang yang sulit dan kompleks, dan memiliki pola pikir yang tepat sangat penting untuk bertahan dan mencapai kesuksesan. Penting untuk memiliki tujuan yang jelas dan memulai dengan memberikan upaya maksimal, meskipun itu terlihat kecil.\nBerikut adalah beberapa pola pikir utama yang harus dikembangkan untuk berkembang di industri game:\nKeterampilan teknis saja tidak cukup Meskipun keterampilan teknis itu penting, itu saja tidak cukup untuk mencari nafkah atau membangun karier di industri game. Dibutuhkan pendekatan multidisiplin dan kombinasi keterampilan teknis, artistik, dan bisnis.\nMenerapkan mindset untuk terus berkembang Industri game terus berkembang, dan tantangan seperti kegagalan dan ketidakpastian tidak dapat dihindari. Menerapkan pola pikir pertumbuhan berarti melihat kegagalan sebagai peluang untuk belajar dan berkembang. Ini adalah tentang bersikap terbuka terhadap ide-ide baru, terus memperoleh pengetahuan, dan beradaptasi dengan perubahan.\nGagal dengan cepat, belajar dengan cepat Dalam industri game, pengalaman adalah aset yang sangat berharga. Sangat penting untuk iterasi dengan cepat dan belajar dari kegagalan. Semakin banyak pengalaman yang kita dapatkan, semakin baik kualitas pekerjaan kita.\nIdealisme Seimbangkan idealisme dengan kepraktisan Meskipun memiliki visi dan cita-cita adalah hal yang penting, namun sama pentingnya untuk mempertimbangkan aspek praktis dari bisnis dan keberlangsungan tim. Terlalu idealis tanpa mempertimbangkan aspek bisnis dapat merusak apa yang kita bangun.\nBermimpilah dengan mata terbuka Jika konteksnya adalah mencari nafkah dari game, sangat penting untuk terbuka pada berbagai peluang dan aspek di luar idealisme kita. Memiliki pandangan yang realistis dan terbuka terhadap berbagai kemungkinan dapat membantu kita bertahan di industri ini dengan lebih efektif.\nTujuan yang jelas Bergerak melampaui proyek pribadi Banyak orang membuat game semata-mata untuk mengekspresikan keinginan dan ide pribadi mereka, yang tidak salah, tetapi mungkin tidak cukup untuk bertahan di industri ini. Penting untuk memperluas pengetahuan dan keterampilan kita untuk membuat game yang sesuai dengan pasar dan memenuhi permintaan para pemain.\nTetapkan milestone yang jelas Menentukan milestone yang rinci dan spesifik sangat penting untuk mencapai tujuan kita. Hal ini membantu kita memahami hasil yang diinginkan, mengalokasikan waktu secara efektif, dan menentukan tindakan yang diperlukan untuk mencapai pencapaian tersebut. Kurangnya disiplin dan menetapkan prioritas yang salah dapat menjadi penghalang untuk mencapai milestone ini.\nTantangan terbesar dalam membangun bisnis game Biaya keuangan Kendala keuangan sering kali menjadi tantangan yang signifikan ketika memulai atau mengembangkan bisnis game. Sangat penting untuk mengelola biaya dengan hati-hati dan mencari cara-cara kreatif untuk mendapatkan pendanaan.\nSumber daya manusia Membangun tim yang terampil dan berdedikasi sangat penting untuk menghasilkan game berkualitas tinggi. Merekrut dan mempertahankan individu-individu berbakat yang memiliki semangat dan visi yang sama dapat menjadi tantangan tersendiri, tetapi sangat penting untuk kesuksesan jangka panjang.\nManajemen waktu Manajemen proyek yang efisien dan distribusi game yang tepat waktu sangat penting untuk keberlangsungan bisnis game. Mengelola waktu dan sumber daya secara efektif, menetapkan tenggat waktu yang realistis, dan memprioritaskan tugas adalah keterampilan yang penting untuk dikembangkan.\nMemahami kemampuan kita Mengenali kemampuan kita Mengetahui keterbatasan kita dalam hal sumber daya, riset pasar, dan peluang yang tersedia adalah kunci untuk mengembangkan produk atau layanan game yang sukses. Penting untuk memiliki pemahaman yang jelas tentang apa yang dapat kita capai dengan sumber daya yang ada dan memanfaatkannya sebaik mungkin.\nBisnis game sejajar dengan industri lain Meskipun industri game memiliki karakteristik yang unik, membangun bisnis game memiliki banyak kesamaan dengan industri lain. Memahami prinsip-prinsip bisnis yang umum dan mengadaptasinya ke dalam konteks industri game dapat bermanfaat.\nAliran pendapatan alternatif Diversifikasi sumber pendapatan Tidak semua game memiliki kesempatan untuk meraih kesuksesan besar di pasar. Namun, berkarir di industri game tidak harus membuat IP terkenal. Ada beberapa cara alternatif untuk menghasilkan pendapatan dan mempertahankan bisnis game, seperti menjual game ke pemilik baru, mengembangkan game untuk klien, atau menjual aset game.\nHal-hal penting yang bisa diambil Rangkullah kegagalan sebagai kesempatan belajar Dalam industri game, kegagalan bukanlah akhir dari segalanya, melainkan batu loncatan menuju kesuksesan. Setiap kegagalan memberikan pelajaran berharga yang dapat menginformasikan keputusan di masa depan dan meningkatkan pekerjaan kita. Merangkul kegagalan sebagai pengalaman belajar sangat penting untuk pertumbuhan.\nTidak ada yang bisa menggantikan kerja keras Meskipun bekerja dengan cerdas itu penting, namun hal tersebut tidak dapat menggantikan kerja keras. Membuat game membutuhkan dedikasi, ketekunan, dan meluangkan waktu untuk menyempurnakan dan memoles kreasi kita. Kesuksesan dalam industri game berasal dari kombinasi bakat, usaha, dan tekad.\nMembangun studio game yang berkelanjutan itu penuh tantangan Membuat game sudah merupakan usaha yang kompleks, tetapi membangun studio game yang dapat mempertahankan dirinya sendiri adalah tantangan yang lebih besar. Hal ini membutuhkan manajemen yang efektif, kepemimpinan yang kuat, dan pemahaman yang jelas tentang sisi bisnis dari industri ini.\nDiversifikasi aliran pendapatan Mengandalkan satu sumber pendapatan adalah hal yang berisiko dalam bisnis apa pun, termasuk industri game. Untuk memastikan kesuksesan jangka panjang, penting untuk mendiversifikasi aliran pendapatan. Hal ini dapat dilakukan dengan mengeksplorasi berbagai cara seperti penjualan game, melisensikan kekayaan intelektual, mengembangkan game untuk klien, atau bahkan membuat dan menjual barang dagangan yang berhubungan dengan game.\nKesimpulannya, memiliki pola pikir yang tepat sangat penting untuk bertahan dan berkembang di industri game. Hal ini membutuhkan kombinasi keterampilan teknis, pola pikir yang berkembang, pendekatan yang seimbang antara idealisme dan kepraktisan, tujuan yang jelas, dan kemampuan untuk beradaptasi dengan tantangan. Membangun bisnis game memiliki tantangannya sendiri, termasuk kendala keuangan, manajemen sumber daya manusia, dan manajemen waktu yang efektif. Namun, dengan mengenali kemampuan kita, menerima kegagalan, dan mendiversifikasi aliran pendapatan, kita dapat meningkatkan peluang sukses dalam industri yang dinamis dan kompetitif ini.\nSumber:\n","permalink":"https://wewnumam.github.io/id/articles/having-the-right-mindset-to-survive-in-the-game-industry/","summary":"Industri game adalah bidang yang sulit dan kompleks, dan memiliki pola pikir yang tepat sangat penting untuk bertahan dan mencapai kesuksesan. Penting untuk memiliki tujuan yang jelas dan memulai dengan memberikan upaya maksimal, meskipun itu terlihat kecil.\nBerikut adalah beberapa pola pikir utama yang harus dikembangkan untuk berkembang di industri game:\nKeterampilan teknis saja tidak cukup Meskipun keterampilan teknis itu penting, itu saja tidak cukup untuk mencari nafkah atau membangun karier di industri game.","title":"Memiliki Pola Pikir yang Tepat untuk Bertahan di Industri Game"},{"content":"Adam Ardisasmita Pendapatan dan jumlah ekspor industri game jauh lebih besar dari industri hiburan/konten lainnya (musik, film, dll). Mobile games menguasai 45% di tahun 2021 dan 53% di tahun 2022 pasar game global. Orang indonesia belanja game 25 triliun rupiah setahun, sebagian besar untuk mendapatkan item yang meningkatkan strata sosial di game. Tantangan industri game di Indonesia: komparasi antara pengeluaran gamer indonesia untuk game dengan pendapatan game developer indonesia masih sangat jauh (1000:1). Kendala dalam pembuatan game: kekurangan dana (66,7%), kekurangan jumlah SDM (44,4%), kekurangan kemampuan skill (36,1%), lainnya (26,4%). Kenapa sedikit game developer lokal yang sukses di Indonesia?: Bisnis Model; Market Visibility; Access To Funding. Tantangan bisnis model: premium (konversi penjualan \u0026amp; produk experience) dan freemium (live ops \u0026amp; membaca data) Tantangan market visibility: pc gamer lebih terbuka dengan game dengan genre serupa sedangkan mobile gamer cenderung antusias pada 1 game saja. Life time yang lebih lama dan keterbatasan ruang penyimpanan membuat mobile gamer jarang mencari game lain di genre yang sama. Tantangan access to funding: premium (market serupa dengan publisher) dan freemium (validasi pasar sebelum pendanaan). Tren di mobile game: pendapatan Game as a Service (live service dan in-app purchase) lebih besar daripada full game. Tren daya beli game di negara berkembang: sangat sensitif terhadap harga, micro-transaction lebih cocok dibanding one time purchase. Perhatikan perkembangan cloud gaming dan subscription based model. Strategi lain yang bisa diambil: memanfaatkan tren viral, kearifan lokal, niche market. Secara revenue akan lebih masuk akal mengincar pasar global, namun di pasar lokal kita lebih paham pasarnya jadi secara persaingan dipermudah. Relatibility menjadi tantangan ketika mengangkat kearifan lokal, unique selling pointnya harus diterima secara umum. Tren game berubah, semua segmen market butuh game, pastikan test game ke target market yang tepat.\nDave Fabrian Struktur umum dan tanggung jawab bisnis mobile game: development team (core feature \u0026amp; liveops) \u0026amp; publishing team (marketing strategy \u0026amp; community management). Kapabilitas yang dibutuhkan disamping pengembangan game: data analysis, performance marketing, cummunity management, customer support, market research, market validation. Key metrics: ARPPU, MAU, DAU, LTV, Paying Conversion, ROAS, CPI, D1/D7/D30 Retention, IPM, FTUE Funnel, CPM, Session Length, Stickiness, Organic Rate, etc. Berbeda dengan gamer pc/console yang marketnya mature (tahu channel/sumber informasi tersedia melalui media/KOL), market mobile masih scattered, jadi untuk reach out mereka perlu melakukan user acquisition dengan memasang iklan. Berbeda dengan gamer pc/console yang meluangkan waktu khusus untuk game, mobile game dibuat untuk menyesuaikan behavior (5W+1H) market. Cara estimasi biaya (cost): operational cost (marketing cost, team payroll, general affairs) \u0026amp; cost of revenue (platform cost, server cost). Iterate fast, be mindful when to kill and move on. Terkadang developer terlalu attached dengan produknya, pahami runway, limit, dan opportunity cost. Cara estimasi pendapatan (revenue): revenue projection (new users \u0026amp; returning users/active users). \u0026ldquo;Proven\u0026rdquo; better than \u0026ldquo;New\u0026rdquo;. Jangan terlalu banyak aspek eksperimental. Sebelum bikin game, cari tahu end goal bisnisnya lebih dulu. Dengan memahami metrics kita bisa melakukan iterasi/solve issue secepat mungkin dan tepat.\nFandry Indrayadi Perbedaan mendasar antar platform game: mode of play, form factor, \u0026amp; session time. Mobile gamer terbagi menjadi beberapa spectrum: casual (non-gamer, can be quite hardcore, unforgiving about time), midcore (knowledgeable in games, wants hardcore but doesn\u0026rsquo;t have time), hardcore (dedicated time to game). Core Experience: Mengambil experience dari dunia nyata itu lebih bagus daripada mengambil experience dari game lain. Sebagai designer kita baru boleh mengambil experience dari game lain kalau kita tahu experience apa yang diambil game itu di dunia nyata. Core Audience: To please everyone is please no one. Targetkan game kalian audiens spesifik berdasarkan demographic (gender, lokasi, usia) \u0026amp; psychographic (motivasi bermain). Strategi model bisnis: premium (direct sell), freemium (in-app purchase), free (ads). Sulit buat untung dari game premium di mobile karena game premium bersaing dengan ribuan game gratis baru setiap harinya. Fokus desain untuk game freemium: retention (lama waktu pemain mempertahankan game) dan conversion (presentase pemain yang membeli di game). 3 hal yang membuat pemain ingin membeli (pilih maksimal 2): content unlock (gatcha, skin, etc) untuk emosi, boosters (xp+) untuk optimisasi, skips (instant upgrade) untuk waktu. Untuk game free dengan ads jangan spam ads, sebaiknya buat pemain ingin menonton ads dengan rewarded ads (extra life, double coin, etc) Sebagai designer kita harus bikin needsnya dulu supaya ada demand sehingga pemain mau bayar. Sebuah desain dikatakan elegan kalau dia bisa memecahkan sebanyak mungkin masalah dengan 1 fitur. Fake ads bisa dimanfaatkan untuk melakukan test ide game ke terget audiens. Tren itu cepat berubah, tapi behavior atau culture jarang berubah. Pekerjaan seorang designer bukan membuat game tapi memecahkan masalah dengan cara kreatif, tanggungjawabnya adalah craft experiences.\nYanu Ashari Low budget ≠ Low effort. Yang namanya bisnis itu ada modal, semakin besar modal relatif semakin mudah melakukan step-step yang perlu dilakukan. Pendekatan sebelum membuat game: Top Down (mulai dari market analysis) \u0026amp; Buttom Up (mulai dari SWOT analysis) Market Analysis: (1) identifikasi target audiens, (2) riset kompetitor, (3) analisis tren market. Identifikasi target audiens: tujuannya untuk berempati dengan player (keyword: demographics, psychographics). Riset kompetitor: (1) identifikasi game serupa, (2) identifikasi UX dan gameplay, (3) analisis review pemain, (4) riset strategi marketing, (5) identifikasi unique selling point. Analisis tren market: (1) publikasi/tren/berita/perkembangan industri, (2) konferensi/pameran/pertemuan industri, (3) laporan market. Cara menentukan UVP: value proposition canvas (kesesuaian [fit] antara produk yang dibuat dan kenapa orang membelinya). Cara memvalidasi UVP: (1) prototyping \u0026amp; pseudo MVP, (2) riset kualitatif (usability testing, interview, FGD) \u0026amp; kuantitatif (survey, wishlist). Rumus untuk bikin game yang sukses: (1) DATA dari standar industri dan game kita, (2) KATA dari user review, (3) RASA kita untuk yakin terhadap produknya.\nPanelis Bandung Langkah yang bisa dilakukan pemula: amati-tiru-modifikasi, fokus di eksekusi yang matang dibanding eksperimental, karena nantinya bakal banyak kegagalan jadi pastikan ada yang skill yang diasah dan knowledge yang dibawa untuk project selanjutnya. Panduan untuk membangun team: bisa objektif menilai anggota team dari kontribusinya, bersikap profesional, luangkan banyak waktu di awal untuk mengenal satu sama lain, proses pencarian tim tidak bisa instan, komposisi team harus benar (development, bisnis, operasional). Jadikan projek indie ini kesempatan untuk memahami bisnis end-to-end, walaupun kita pada akhirnya bakal fokus di satu bidang lain, ilmunya tetap penting. Konsekuensi logis dari mempunyai hidup yang menyenangkan adalah bukan hanya melakukan apa yang disukai tapi juga terlatih melakukan hal-hal yang tidak disukai (pengorbanan). 1 skill yang diperlukan oleh founders: meyakinkan orang untuk bergabung karena valuenya sama, walaupun gajinya kecil atau belum digaji. Penting untuk membuat perjanjian tertulis di awal untuk menyikapi skenario yang tidak diinginkan kedepannya. Alternatif untuk kita yang gagal merilis game dan kita butuh budget untuk survive: outsourcing, gamification, atau bekerja jadi profesional untuk perusahaan lain. Dalam bisnis selalu ada peluang untuk gagal, sebenarnya semua usaha kita adalah untuk meminimalkan resiko. Johannes Nindyo Kalian bisa mempertimbangkan asset store terlebih dahulu untuk membantu mempercepat proses development, kecuali asset 2D yang biasanya dikhususkan untuk 1 project. Faktor lain selain UVP yang bisa dipertimbangkan: hoki (difeature oleh media \u0026amp; platform), barriers to entry (optimasi untuk device low-spec), eksekusi yang baik (game gratis berasa game premium). Kita bisa belajar bisnis selagi jalan, tapi pastikan kalian bisa membuat produk yang sangat baik dulu\u0026ndash;sesuai kapabilitas kalian. Jika tidak kelola dengan baik, pekerjaan remote bisa menghambat progres project kalian. Channel marketing lain: reviwer/youtuber game android (melalui email), grup facebook tertentu (menyamar jadi anggota grup). Terkadang orang yang terlalu memikirkan game bagus sekaligus bisnis bagus kemungkinan dia tidak sukses dikeduanya, karena kalau kita kurang di satu aspek kita sebaiknya mencari partner bisa mencover kekurangan kita, jadi kita bisa fokus ke aspek yang menjadi strength point kita.\nBoy Dozan Terkadang, kita tidak harus menginovasi semua hal, kenapa?: (1) ekperimentasi membawa resiko besar yang perlu divalidasi, (2) pengembangan game melibatkan banyak proses kompleks yang perlu dipertimbangkan, (3) kurangnya pengalaman dan masih banyak yang perlu dipelajari. Yang bisa dipelajari: (1) gunakan game yang sukses sebagai solid references, (2) market research, (3) membuat player persona, (4) prototyping \u0026amp; AB testing tema dan artstyle (5) secepatnya early access. Tidak menginovasi semua hal bisa membantu kita: dengan menggunakan sesuatu yang proven kita bisa mempercepat proses pengembangan dan fokus ke hal-hal lain. proven \u0026gt; reduce validation process \u0026amp; higher chance for profitable \u0026gt; faster development \u0026gt; better execution \u0026amp; smaller production cost Bikin game harus ada unsur bisnisnya\u0026ndash;entah itu gamenya clone atau tidak\u0026ndash;karena pada akhirnya game harus bisa jadi duit. Tapi, inovasi merupakan senjata terbaik kalau kita menggunakannya dengan tepat: UVP (unique value proportion). Kapan waktu yang tepat untuk berinovasi itu relatif tergantung pada kebutuhan market dan kapabilitas yang dimiliki tim untuk eksekusi \u0026amp; validasi. Rule of thumb game clone: sulit untuk lebih sukses dari game yang kalian clone, kecuali kalian punya uvp yang sangat kuat, tapi pertanyaannya apakah kita butuh sesukses itu? pada akhirnya yang terpenting hasil yang didapat bisa mencukupi perusahaan. Hak cipta perlu dipertimbangkan ketika melakukan clone: desain karakter, assets, parodi. Kesampingkan idealisme kalau secara finansial masih belum tercukupi, kecuali idealisme ini mendatangkan banyak audiens. Best practice in-app purchase: biasanya orang beli sekali di game kita akan lebih tinggi chance untuk beli terus (continuous buyer), jadi hook di awal itu penting untuk menarik pembelian pertama. Having a brilliant idea with poor execution is worthless, but even a common idea executed well is still better.\nShafiq Husein Tidak hanya dari ads dan in-app purchase untuk bisa menghasilkan uang dari game, banyak cara-cara lain seperti in-game branding (sponsor) \u0026amp; IP license. Salah satu faktor penentu dari keberhasilan sebuah game: luck (keberuntungan). Orang akan lebih percaya untuk mencoba sebuah game kalau temannya sendiri yang mempromosikan gamenya. Saat kita mau bikin sesuatu\u0026ndash;selain kita harus tahu strength point kita dimana\u0026ndash;kita harus tahu weakness kita apa. Jika weakness kita ada di budget marketing, kita bisa coba approach orang yang punya marketing power. Cara menjadi bagian dari market share di industri: (1) market research, (2) catch up dengan tren di media sosial target market kita, (3) memasukan relatable content ke dalam design game, (5) development \u0026amp; testing, (4) marketing \u0026amp; PR, (5) maintainance \u0026amp; bug-fixing. Marketing \u0026amp; PR: find a good angle for your target market, approach influencer, send press realease to media, ask your friend to share. Masalah baru dimulai ketika game kalian ada di store. Tipikal orang itu \u0026ldquo;bagus diem, gak bagus komplain.\u0026rdquo; Tips mendapatkan sponsor di game: lihat di sosial media brand-brand sedang menjalankan campaign apa dan arah branding mereka seperti apa. Punya partner bisnis tidak segampang merekrut orang untuk kerja, karena bebannya berbeda. Kunci relasi antara bisnis dan development adalah percaya satu sama lain bahwa hasil yang dijanjikan adalah yang terbaik yang bisa berikan. Jangan sampai research \u0026amp; development game kita lebih lama dari umur gamenya. Strategi konten-able: belum tentu orang suka produknya, tapi setidaknya orang bisa bikin konten dari produknya. Saat kita bekerja sama dengan pihak lain, kita harus punya team legal untuk membaca terms \u0026amp; condition dari kontraknya. Kita harus tahu medan tempur kita dulu, sampai mana kita bisa compete, dimana ability kita, dan bagaimana kualitas produk kita.\nBanu Andaru Local values bukan hanya tradisional, tapi seluruh kebiasaan di sekitar kita baik itu tradisional maupun popular popular culture. Pengaplikasian game dari experience di dunia nyata: (1) mentransfer personal experience menjadi relatable content (efek: increase retention, conversion rate \u0026amp; brand trust), (2) pahami cara pikir dan kebiasaan target audiens (efek: increase in revenue), (3) membuat kreator lain membuat konten tentang game kalian (content baits, efek: traffic, conversion rate, organic growth rate), (5) membangun komunikasi dengan player di komunitas (efek: loyalty, community support). Tipe-tipe content baits: LOL (apa pun yang lucu), Win (secret content, easter egg), OMG (scene dramatis/hiperbola), Cute (triggering cuteness), Trashy (susah lihat orang senang dan senang lihat orang susah, memposisikan player jadi merasa lebih baik dari yang lain), Fail (keresahan umum), WTF (aneh). The cycle: game developer -\u0026gt; fan/content creator -\u0026gt; community -\u0026gt; more player -\u0026gt; game developer. Jika ingin mengangkat local values untuk market global pertimbangkan relatibilty (sesuatu yang bisa diterima secara umum). Panelis Surabaya Saat market researchnya benar tapi eksekusinya gagal, gamenya tetap sampah. terkadang saat idenya biasa saja tapi dieksekusi dengan sangat baik, potensi untuk suksesnya lebih besar. Tidak semua yang berdasarkan feeling itu berhasil karena faktor luck-nya yang lebih banyak bermain, dan jika berdasarkan data kita harus mampu menilai bahwa kita tidak mengolah data yang salah. Terkadang kita salah mengarahkan game kita karena kita memposisikan diri kita sebagai target marketnya dimana belum tentu market suka (validasi yang bias). Ini bukan tentang caranya siapa yang paling benar, tapi tentang kalian melihat strategi pengembangan game kalian dari angle mana dan strenght kalian dimana? product atau commercial. Sebelum kita membuat product selalu ada yang namanya product-market fit (ada demand dari market yang coba kita serve dengan product). Berbeda dengan e-commerce dan product tech lain, game itu tidak \u0026ldquo;winners take all\u0026rdquo;\u0026ndash;karena value di game masih bisa kita tweak sedikit dan itu masih bisa bersaing karena market bisa mengonsumsi banyak game serupa sekaligus (content-based). Prinsip 70-20-10: 70% clone, 20% improve, 10% innovate. Tidak ada sesuatu yang 100% original. Ngapain kita build from scratch lagi sesuatu yang belum kita tahu, dimana kita bisa menyempurnakan sesuatu yang ada untuk market yang mau. Mau gagal atau berhasil kalau kita tidak mulai kita tidak tahu batas kita dimana. Karena kemungkinan kita gagal lebih besar, jadi harus mampu bangkit lagi dan coba lagi (growth mindset). Joseph Putra Game is hit or miss business (antara sukses sekali atau gagal sepenuhnya dan mati). Jadi, apa yang bisa kita lakukan? faster iteration (tiru formula suksesnya kemudian ganti tema), pemula mulai dari hypercasual, milestone knowledge \u0026amp; experience. How to copy or iterate fast: (1) find a game with compelling gameplay, (2) find a data, (3) analyze the core gameplay, (4) make a little innovation, (5) try to release it fast. Pada akhirnya hipotesis dari data perlu dieksekusi dan divalidasi secepat mungkin. Mengukur game sukses itu tergantung konteks masing-masing studio, bisa dari modal yang dikeluarkan atau dari ukuran team. Jika kita tidak punya waktu untuk menambah konten dalam game, kita bisa memperlambat progres pemain dengan membagi stage kemudian mempersulit stage akhir atau membatasi jumlah akses (hearts, energy, etc), metode-metode itu ini bisa juga dijadikan opportunity untuk monetisasi. Jika game kalian itu experience-nya kompetitif jangan memonetisasi skill booster yang merusak balance dari kompetisinya. Lucky Putra Reskin dari game-game kecil dan tanpa ada yang di-improve ditambah monetisasi yang buruk membuat game kalian tidak punya nilai jual. Problem game naratif: (1) tidak ada hook di 5 menit pertama, (2) kurang ada interaksi dalam game, (3) tidak ramah free player, (4) player menunggu konten baru terlalu lama. Hal-hal yang perlu diperhatikan: (1) menyiapkan monetisasi yang jelas dari awal, (2) perhatikan matrix dari early game, (3) hook 5 menit pertama, (4) pikirkan plan live-ops, (5) optimisasi game performance. Tidak perlu muluk-muluk menargetkan sesuatu, bisa membayar gaji karyawan dan membuat portofolio yang oke cukup untuk membuka peluang-peluang baru (deal bisnis, benchmark project selanjutnya). Tips ketika share di media sosial: caption-nya harus personal dan cari momen yang tepat, ceritakan tujuan kenapa bikin game ini dan ceritakan background personal kita. Tips membuat pertanyaan survey: buat pertanyaan yang terarah sesuai feedback yang kita harapkan, jangan kasih open question, awali dengan pertanyaan generic kemudian perdalam di pertanyaan selanjutnya. Suyono Kenapa membuat game untuk niche audience? lebih terjamin dan tertarget (walaupun kolamnya lebih kecil, apa yang kalian ambil bisa lebih banyak), lebih fun (yang kita bikin adalah yang kita pahami), fansnya lebih hardcore (setia). Jangan terlalu berangan-angan terlalu panjang, ada hal-hal yang akan kalian temukan dengan sedirinya seiring berjalannya waktu. Bikin ya, bikin aja. Hal negatif dari terlalu banyak guide adalah semakin banyak gatekeeper (pikiran yang mempersulit kalian) untuk mulai sesuatu. Gagal itu bagian dari proses dan suatu keniscayaan, tidak perlu berlebihan untuk takut. Tips menerapkan prinsip bikin yang bikin aja: jangan melihat dari prespektif gamedev, jangan mulai dari apa yang pingin kalian bikin, tapi fokus bikin game yang kalian dan orang lain mau main. Fitur baru bikin kasar aja dulu, polish belakangan, fitur itu belum tentu works dan mencegah kalian burnout. Komunitas bisa terjadi secara natural selama gamenya bagus, kalian bisa juga arahkan orang untuk join komunitas kalian atau desain gamenya agar cocok untuk komunitas. Data itu penting salama kalian bisa baca data, kalau kalian tidak bisa baca data, kalian tidak tahu data mana yang relevan. Tidak ada cara yang benar untuk semua karena kemampuan eksekusi orang berbeda-beda, dan pada akhirnya yang menilai adalah market. Semakin lama kalian di gamedev, skill kalian yang paling terasa adalah skill tarik napas :v\nJulio Andryanto Tidak perlu bikin tools/apapun from scratch, fokus kita adalah bikin game yang bagus. Jangan spend banyak waktu di hal yang butuh talent bukan butuh waktu untuk belajar. Bisnis model mobile game adalah live service, dimana butuh konten setiap saat. Jika core mechanic tidak proven di market, lebih baik di-kill. Kita tidak bisa menambah orang di sebuah organisasi tanpa sistem dimana semua orang tidak tahu apa yang harus dikerjakan, kita perlu project management dan struktur organisasi. Jika kalian punya ide langsung dieksekusi tanpa project management itu bakal kacau, projeknya tidak bisa kelola dan diperpanjang. Hal yang harus proven di tahap pengembangan: product risk (core loop, meta game), marketing risk (theme, artstyle). PBN Framework: proven (mekanik yang sudah teruji di market), better (improvement yang dibuat), new (USP). Build games that can grow: higher LTV (string game mechanics) \u0026gt; lower CPI (approachable art) = positive ROI Artstyle punya pengaruh besar buat FTUE (first time user experiece), untuk itu CTR (metric orang mau click) harus tinggi dulu. Test game di target audence yang tepat. Gunakan facebook ads, tidak disarankan share di circle media sosial teman-teman, untuk menghindari bias. Metrics \u0026amp; KPIs itu adalah inti dari bisnis mobile game free to play. Kalau kalian mau bikin company, yang kalian fokusin pertama team kalian, baru produknya.\nPanelis Batam Walaupun kita pakai data, pada akhirnya kita pakai feeling untuk membuat keputusannya, data sebenarnya support feeling kita. Walaupun kita pakai feeling, pada akhirnya keputusan kita harus didasari data, kalau saat diskusi semua orang pakai feeling, feeling siapa yang mau kita percaya? Jangan percaya feeling kalian kalau 50% waktu kalian bukan dihabiskan untuk membentuk feeling itu, gunakan juga refrensi yang sudah works sebagai pendukung feeling. Pada akhirnya yang menilai produk kita adalah market, jadi jangan sampai produk kita yang menilai kita sendiri dan tidak kunjung merilis game. Pada akhirnya cara efektif team berbeda-beda tergantung strength point kita, ada yang punya kapabilitas dan waktu untuk growth skill team yang ada (memperbaiki kelemahan), ada juga yang memilih untuk meyakinkan orang lain yang punya kapabilitas untuk bergabung dalam team (memprioritaskan kekuatan). Dengan adanya komunitas kita bisa mengurangi development cost dan mempercepat validasi ke market karena core player berkumpul di situ. Komunitas penting untuk kita bangun, tapi sebelum itu temukan dulu jati diri kita sebagai game developer ke arah mana, jangan sampai kita menginvestasikan hal yang belum siap kita panen. Untuk proyeksi yang lebih besar, targetkan audiens ke negara yang konversi pembeliannya tinggi terlebih dahulu, kemudian cari user base yang sama yang ada di lokal, jadi saat kita test kita bisa test ke lokal. Untuk memulai dengan resiko yang rendah (CPI rendah), kita bisa mulai dari target audiens lokal karena kita lebih dapat dijangkau. Kalau kalian sukses tanpa gagal, kalian jadi tidak menghargai kegagalan. Kalau kalian gagal, kalian 1 langkah di depan orang belum gagal. Selalu siapkan plan B, supaya kita bisa total di plan A tanpa takut, pada akhirnya kita harus bisa jalan terus. Tips bertahan di industri game: (1) bikin ya bikin aja, (2) networking, (3) investasi skill selain gamedev, (4) konsisten selesaikan pekerjaan, dapatkan pelajaran utuhnya. Andi Taru Dalam membuat game, terdapat berbagai pertimbangan seperti genre, lokasi, dan platform teknis. Pertimbangan sumber daya meliputi man power (jumlah pekerja), time (waktu dan uang), skill (tingkat kompleksitas), dan moment (tren). Ada beberapa cara untuk menghasilkan uang dari game, seperti melalui iklan (banner, interstitial, rewarded, dll), in-app (pembelian item, langganan), atau premium (game berbayar). Apa tujuanmu dalam membuat game? Uang, kesenangan, atau dampak. Untuk mendapatkan pendapatan sebesar Rp 5 juta per bulan, dapat dilakukan melalui iklan dalam aplikasi (20 ribu pemain per bulan), penjualan game berbayar (1500 pembeli per bulan), atau melalui proyek (1 proyek senilai 60 juta, 10 proyek senilai 6 juta, 100 proyek senilai 600 ribu). Membuat game dengan tujuan membantu orang lain dapat dilakukan melalui game edukasi, kampanye sosial, atau serious game (game untuk pelatihan). Sweet Spot: mencapai titik temu antara menghasilkan uang, menguasai keterampilan, dan menikmati prosesnya. Problem-solution Fit: game yang dibuat harus benar-benar menghibur dan menarik bagi target pemain yang tepat. Meningkatkan skalabilitas bisnis dapat dilakukan melalui peningkatan kuantitas (iklan dan pembelian dalam aplikasi, meningkatkan jumlah game), kualitas (game berbayar, meningkatkan konversi pembelian), dan pangsa pasar (menjangkau pasar yang lebih luas). Industri pengembangan game memiliki risiko yang tinggi, namun juga potensi keuntungan yang tinggi. \u0026ldquo;Dreams are not what you see in your sleep, dreams are things which do not let you sleep\u0026rdquo; ~ Cristiano Ronaldo.\nAgung Subagiyo Menggabungkan antara hobi yang kita sukai dengan kemampuan yang kita miliki: ketika kita antusias terhadap suatu hobi, kita akan mengetahui apa yang membuatnya menyenangkan, dan dari sana kita dapat menemukan potensi dalam menghasilkan produk lain. Bagian paling sulit dalam membuat game adalah memperkirakan biaya, waktu, dan kualitas. Pemasaran yang efektif adalah ketika pengguna sendiri yang mempromosikan (melalui konten berbagi atau jejaring sosial). Kinerja pada perangkat mobile dengan spesifikasi rendah: ukuran build akan mempengaruhi jumlah pengguna yang dapat mencapai game tersebut, dan frame rate akan mempengaruhi kebermainan pada perangkat umum. Pastikan menggunakan alat pihak ketiga yang secara konsisten dikelola oleh pengembangnya. Ritual dasar dalam toko aplikasi: pilih kata kunci yang relevan, gunakan tangkapan layar yang menggambarkan dengan jelas, gunakan ikon yang unik, terapkan fitur penting dari platform (papan peringkat, pencapaian, penyimpanan awan, dll), tanggapi ulasan pengguna. Sertakan kata kunci penting agar mudah ditemukan (discoverability), dan jelaskan secara spesifik dalam deskripsi. Gunakan pengujian A/B pada media pemasaran seperti ikon, tangkapan layar, gambar kampanye, dan sebagainya. Jangan hanya mengandalkan ulasan untuk mengidentifikasi masalah, gunakan umpan balik dari alat lain (konsol, analitik, dll), karena hanya sebagian kecil pengguna yang memberikan ulasan. Keterlibatan dan kinerja: tingkat retensi D1-D30 dan durasi per sesi perlu ditingkatkan, faktor penting bagi Android adalah vitalitasnya yang mempengaruhi visibilitas game di Google Play. Kita dapat menilai sejauh mana orang menyukai game kita dari ekspresi wajah mereka, bukan hanya dari kata-katanya. Pemain game mobile tidak memiliki banyak waktu untuk bermain, maka pastikan pengalaman pengguna/usability-nya sederhana dan responsif dalam situasi yang mengganggu pemain. Kesehatan game dalam suatu wilayah diukur dengan rumus: (pendapatan / jumlah unduhan) \u0026gt; (anggaran pemasaran / jumlah unduhan) Kesuksesan sebuah game dilihat dari sisi finansial, seberapa baik konversinya.\nJessica Hartanto Gunakan tren sebagai cara untuk menarik pemain, gunakan alat seperti Google Trends. Setelah mengetahui tren, berikan nilai unik pada game kita agar tidak terlalu umum. CPI (Cost Per Install) pada iOS adalah 3 kali lipat lebih tinggi dibandingkan dengan Android. Rata-rata CPI global tahun 2023 adalah $2.24. Menggunakan endorser konten kreator dapat membantu mengurangi biaya CPI. Pelajaran yang didapat: desain game sangat mempengaruhi retensi game, gunakan alat yang umum digunakan dalam industri untuk mengatasi masalah teknis, dan jangan bergantung hanya pada satu produk atau platform. Jika ingin membuat game, penting memiliki orang yang dapat melakukan pemasaran, atau setidaknya kita harus tahu cara memasarkannya. Pengalaman kerja sangat penting untuk memahami cara industri bekerja, seperti manajemen proyek, pengaturan tim, dan menjalankan bisnis. Cara mencari endorser yang tepat: cari dan buat daftar konten kreator yang relevan dengan konten mereka, audiens mereka, dan produk kita, lalu cari tahu tingkat keterlibatan dan biaya mereka secara profesional, dan terakhir buat penawaran yang sesuai. Kegagalan adalah bagian dari proses menuju kesuksesan, jadi jangan takut menghadapinya.\nEldwin Viriya Meskipun kita beruntung dengan satu game, pertanyaannya adalah apakah kita dapat mengulang kesuksesan tersebut? Meskipun pendapatan tidak sebesar game yang sukses, game tersebut harus mampu mendukung tim dan tumbuh. Meskipun bukan keputusan bisnis yang ideal, jika yang membuat kita maju adalah tim, jangan mengorbankan tim, adaptasikan diri dengan hal-hal baru untuk tetap bertahan, dan coba ubah model bisnis. Jika ada anggapan bahwa membuat game berdasarkan tren akan cepat menghilang, kembali pada cara pengembangan dan cara membaca data, karena pada saat itu kita tidak hanya membuat game, tetapi juga membangun bisnis. Temukan kekuatan kita, nilai kembali, dan cari tahu apakah kita dapat mereplikasi formula kesuksesan. Setiap orang memiliki perjalanan yang berbeda, beberapa momen tidak dapat dibandingkan, ini adalah perjalanan dan proses pribadi kita, pilih jalur kita sendiri dan sadari pilihan yang kita buat, pada akhirnya kita berhadapan dengan diri kita sendiri dan menanyakan diri kita sendiri. Untuk akuisisi pengguna yang spesifik, biaya akan dipengaruhi oleh sejauh mana tren tersebut ada di pasar, semakin mudah kata kunci itu dicari dan dihadirkan, semakin murah biaya akuisisinya. Tidak disarankan menggunakan anggaran pemasaran selain dari pendapatan, cari tahu nilai seumur hidup game kita, alokasikan pendapatan untuk anggaran pemasaran. Jika game kita mengikuti tren, segera rilis untuk mendapatkan lalu lintas organik. Pilih platform yang tepat: (1) Apa jenis game kita? (2) Bagaimana cara menemukan komunitas yang cocok untuk game kita? (3) Gunakan media sosial yang relevan. Hubungan bisnis yang penting untuk dipahami adalah pertukaran nilai dengan klien, apakah mereka mencari nilai yang pas atau nilai yang melebihi uang yang mereka keluarkan, dan klien hanya bekerja dengan orang-orang yang dapat dipercaya. Jangan meletakkan semua telur kita dalam satu keranjang.\nPanelis Surakarta Cara mengenali kekuatan kita di bidang pengembangan game adalah dengan menemukan dengan mendalam apa yang kita nikmati dari hal-hal yang kita sukai, dan kemudian mengubahnya menjadi sebuah game yang dapat kita bagikan kepada orang lain. Cara praktis mengenali kekuatan kita adalah dengan menjelajahi banyak game, memperhatikan tren terkini, dan mengasah keterampilan yang relevan. Untuk B2C, diperlukan penelitian pasar dan validasi, untuk B2B, diperlukan pitch dan portofolio, dan untuk B2G, diperlukan pemahaman birokrasi. Fokus pada salah satu aspek ini saja agar hasilnya maksimal. Tidak ada pilihan pekerjaan yang lebih baik atau buruk dari yang lain. Yang terpenting adalah memiliki tujuan yang jelas dan komitmen untuk mencapainya, serta tetap fleksibel dalam menjalani prosesnya. Tidak ada kesuksesan instan dalam mencapai hasil yang sempurna. Setiap perjalanan memiliki learning curve di mana kita perlu melalui banyak pembelajaran untuk mencapai kesuksesan. Tujuan kita membuat game bukan hanya untuk diri sendiri, tetapi juga untuk orang lain yang akan memainkannya. Dalam perspektif bisnis, game yang baik adalah game yang menghasilkan uang, dan tim yang baik adalah tim yang dapat menciptakan game yang menghasilkan uang. Mulailah dengan percaya diri dan bertindak, kemudian cari validasi dan cari cara untuk bertahan. Sebelum memutuskan untuk masuk ke industri game, pahami terlebih dahulu risiko dan kondisi finansial kita saat ini, serta pastikan memiliki rencana B jika diperlukan. Tonton Roadshow Lengkapnya Di https://www.youtube.com/playlist?list=PLVUyIfQWnm-EnPV53GdCtNhkhA7aA5ELv\n","permalink":"https://wewnumam.github.io/id/articles/gameseed-roadshow-key-points/","summary":"Adam Ardisasmita Pendapatan dan jumlah ekspor industri game jauh lebih besar dari industri hiburan/konten lainnya (musik, film, dll). Mobile games menguasai 45% di tahun 2021 dan 53% di tahun 2022 pasar game global. Orang indonesia belanja game 25 triliun rupiah setahun, sebagian besar untuk mendapatkan item yang meningkatkan strata sosial di game. Tantangan industri game di Indonesia: komparasi antara pengeluaran gamer indonesia untuk game dengan pendapatan game developer indonesia masih sangat jauh (1000:1).","title":"Gameseed Roadshow Key Points"},{"content":"Untuk menjalankan playtest pertama Anda, penting untuk memiliki pemahaman yang jelas tentang target audiens Anda dan jenis game yang Anda buat. Ini akan membantu Anda memilih kelompok playtesters yang tepat dan membuat skenario tes yang mensimulasikan produk akhir dengan cermat.\nSebelum playtest, siapkan daftar pertanyaan yang ingin Anda tanyakan kepada playtesters Anda, dan siapkan sistem untuk mengumpulkan umpan balik. Hal ini dapat dilakukan melalui survei atau melalui umpan balik verbal selama playtest. Selain itu, pastikan Anda telah menyiapkan semua bahan dan peralatan yang diperlukan, seperti papan permainan, kartu, dadu, dan komponen lain yang diperlukan untuk permainan.\nSelama playtest, pastikan untuk mengamati perilaku dan interaksi playtesters Anda dengan permainan, dan catat masalah apa pun yang muncul. Penting juga untuk tetap netral dan hindari menginterupsi playtest, karena hal ini dapat mengganggu alur alami permainan.\nSetelah playtest, pastikan untuk berterima kasih kepada playtesters Anda atas waktu dan upaya mereka. Gunakan umpan balik mereka untuk mengidentifikasi area perbaikan dan membuat penyesuaian pada permainan yang sesuai. Ingat, playtesting adalah proses berulang, jadi jangan takut untuk menjalankan beberapa playtest dengan kelompok pemain yang berbeda. Setiap playtest akan membawa wawasan baru dan membantu meningkatkan permainan lebih jauh.\nPenting juga untuk diingat bahwa playtesting tidak hanya tentang menemukan masalah, tetapi juga tentang mendapatkan umpan balik tentang apa yang bekerja dengan baik. Hal ini dapat membantu Anda mengidentifikasi kekuatan game Anda, dan membangunnya untuk membuatnya lebih baik lagi.\nMenjalankan playtest pertama Anda bisa menjadi pengalaman yang menegangkan, tetapi ini adalah langkah penting dalam proses desain game. Playtesting memungkinkan Anda untuk mengumpulkan umpan balik yang berharga dan membuat penyesuaian yang diperlukan untuk game Anda sebelum dirilis ke publik. Dengan mengikuti 4 I\u0026rsquo;s Framework, Anda dapat memastikan bahwa playtest Anda dilakukan secara efektif dan umpan balik yang Anda terima berguna dalam meningkatkan game Anda.\nLangkah pertama dalam 4 I\u0026rsquo;s Framework adalah untuk INQUIRE (meminta keterangan) melalui playtest. Ini berarti menyiapkan dan menjalankan playtest Anda, dan mengamati hasilnya. Penting untuk memiliki pemahaman yang jelas tentang apa yang Anda coba uji dan apa yang Anda harapkan untuk dipelajari dari playtest. Ini akan membantu Anda untuk fokus pada aspek terpenting dari permainan dan mengumpulkan umpan balik yang paling berguna.\nLangkah selanjutnya adalah IDENTIFY (mengidentifikasi) masalah dengan meminta umpan balik dari playtesters Anda. Sangat penting untuk berpikiran terbuka dan bersedia mendengar kritik yang membangun. Umpan balik dari playtesters bisa sangat berharga dalam mengidentifikasi area permainan yang perlu diperbaiki.\nSetelah Anda mengidentifikasi masalah potensial, langkah ketiga adalah untuk ILLUMINATE (menerangkan) permasalahan tersebut dengan melakukan brainstorming sejumlah ide untuk solusi. Ini adalah proses kreatif dan penting untuk terbuka terhadap ide-ide baru. Penting juga untuk mempertimbangkan dampak perubahan apa pun terhadap keseimbangan permainan secara keseluruhan.\nTerakhir, langkah keempat adalah ITERATE (melakukan perulangan) dan merevisi game Anda. Pilih solusi potensial terbaik Anda, buat perubahan yang diperlukan, dan lakukan playtest lagi. Proses pengujian, umpan balik, dan iterasi ini harus diulang sampai game berada dalam kondisi terbaik.\nSingkatnya, menjalankan playtest pertama Anda adalah langkah penting dalam proses desain game. Dengan mengikuti 4 I\u0026rsquo;s Framework, Anda dapat memastikan bahwa playtest Anda dilakukan secara efektif dan umpan balik yang Anda terima berguna dalam meningkatkan game Anda. Ingat, desain game adalah proses berulang, jadi jangan berkecil hati jika playtest pertama tidak berjalan sempurna. Rangkullah kegagalan dan belajarlah darinya untuk membuat game Anda lebih baik.\nKesimpulannya, menjalankan playtest pertama Anda bisa tampak menakutkan, tetapi ini adalah langkah penting dalam proses desain game. Dengan mempersiapkan dengan benar, mengamati perilaku playtesters, dan mengumpulkan umpan balik, Anda dapat membuat penyesuaian yang berharga untuk game Anda dan membuat produk yang menyenangkan bagi pemain. Ingat, desain game adalah proses berulang, dan playtesting adalah bagian penting dari proses itu.\nSumber:\nSlack, J., \u0026amp; Stegmaier, J. (2017). The Board Game Designer\u0026rsquo;s Guide: The Easy 4 Step Process to Create Amazing Games that People Can\u0026rsquo;t Stop Playing. Crazy Like a Box.\n","permalink":"https://wewnumam.github.io/id/articles/how-to-run-your-first-playtest/","summary":"Untuk menjalankan playtest pertama Anda, penting untuk memiliki pemahaman yang jelas tentang target audiens Anda dan jenis game yang Anda buat. Ini akan membantu Anda memilih kelompok playtesters yang tepat dan membuat skenario tes yang mensimulasikan produk akhir dengan cermat.\nSebelum playtest, siapkan daftar pertanyaan yang ingin Anda tanyakan kepada playtesters Anda, dan siapkan sistem untuk mengumpulkan umpan balik. Hal ini dapat dilakukan melalui survei atau melalui umpan balik verbal selama playtest.","title":"Cara Menjalankan Playtest Pertama Anda"},{"content":"Menurut sebuah penelitian, orang bermain game karena berbagai alasan, termasuk kesempatan untuk merangkai dan membentuk pengalaman internal mereka. Banyak orang dewasa menikmati saat-saat mengisi kepala mereka dengan pikiran dan emosi yang tidak berhubungan dengan pekerjaan atau sekolah, sementara yang lain tertarik pada tantangan dan kesempatan untuk menantang dan menguji kemampuan mereka. Permainan menawarkan rasa efisiensi dan keteraturan yang mungkin kurang dalam kehidupan sehari-hari, dan dapat memberikan rasa kegembiraan dan relaksasi.\nBeberapa orang tertarik pada sensasi yang dapat diberikan oleh game, seperti sensasi balap motor trail atau perasaan terbang. Pengalaman-pengalaman ini mungkin tidak dapat dijangkau dalam kehidupan nyata, karena kurangnya keterampilan, sumber daya, atau izin sosial. Orang lain mungkin menggunakan game sebagai cara untuk melarikan diri dari dunia nyata atau keluar dari norma-norma sosialnya. Hampir semua pemain menikmati perasaan penyerapan penuh dan tantangan yang ditawarkan game.\nPengamatan telah menunjukkan bahwa pemain mengalami berbagai emosi saat bermain game. Emosi ini dapat dilihat dari respons visceral, perilaku, kognitif, dan sosial pemain terhadap game yang mereka mainkan. Beberapa pemain mungkin mengidamkan peningkatan detak jantung dan kegembiraan saat berlomba, sementara yang lain mungkin mengalami sensasi heran yang menusuk-nusuk kulit. Ketegangan dan frustrasi juga dapat muncul, diikuti oleh rasa pencapaian dan kebanggaan (dikenal sebagai \u0026ldquo;Fiero\u0026rdquo;).\nBagi beberapa pemain, daya tarik game terletak pada kesempatan untuk bersantai dan melarikan diri dari kekhawatiran dan pikiran mereka. Yang lain mungkin menggunakan game sebagai cara untuk membangun harga diri atau untuk mendapatkan perspektif tentang kehidupan mereka sendiri. Bagaimanapun, jelas bahwa game dapat memiliki dampak yang kuat pada emosi pemain dan dapat menawarkan berbagai manfaat terapeutik.\nEmpat Kunci untuk struktur emosi yang dialami pemain adalah empat faktor yang dapat mempengaruhi bagaimana pemain mengalami emosi saat bermain game. Faktor-faktor tersebut adalah:\nPengalaman internal pemain Pemain mungkin menemukan kenikmatan dari pengalaman internal mereka sebagai reaksi terhadap visceral (sensasi fisik), perilaku (tindakan dan gerakan), kognitif (pikiran dan persepsi), dan sosial (interaksi dengan pemain lain) dari permainan. Para pemain ini bermain untuk sensasi internal seperti kegembiraan atau kelegaan dari pikiran dan perasaan mereka.\nTantangan, strategi, dan pemecahan masalah Pemain mungkin menikmati peluang untuk tantangan, strategi, dan pemecahan masalah yang ditawarkan game. Perhatian mereka mungkin terfokus pada tantangan permainan dan pemikiran strategis serta pemecahan masalah. \u0026ldquo;Hard Fun\u0026rdquo; ini sering menghasilkan emosi dan pengalaman frustrasi dan Fiero (rasa pencapaian dan kebanggaan).\nIntrik dan rasa ingin tahu Pemain dapat menjadi tenggelam dalam game ketika game tersebut menyerap perhatian penuh mereka, atau ketika game tersebut membawa mereka pada petualangan yang mengasyikkan. Aspek-aspek permainan yang imersif ini adalah \u0026ldquo;Easy Fun\u0026rdquo; dan menghasilkan emosi dan pengalaman keajaiban, kekaguman, dan misteri.\nPengalaman sosial Beberapa pemain menggunakan game sebagai mekanisme untuk pengalaman sosial. Para pemain ini dapat menikmati emosi hiburan, schadenfreude (kesenangan atas kemalangan orang lain), dan naches (kebanggaan atas pencapaian orang lain) yang berasal dari pengalaman sosial kompetisi, kerja tim, dan kesempatan untuk ikatan sosial dan pengakuan pribadi yang berasal dari bermain dengan orang lain.\nPenelitian ini menemukan bahwa ada perbedaan dramatis dalam tampilan emosional antara pemain yang bermain game sendiri versus mereka yang bermain dalam kelompok. Pemain dalam kelompok cenderung lebih sering beremosi dan dengan intensitas yang lebih tinggi daripada mereka yang bermain sendiri. Hal ini menunjukkan bahwa permainan kelompok menambahkan perilaku, ritual, dan emosi baru yang dapat membuat permainan menjadi lebih menarik.\nPara peneliti juga dikejutkan oleh kegunaan konsep \u0026ldquo;Flow\u0026rdquo; dalam menggambarkan tantangan game dan potensi game untuk meningkatkan kualitas hidup. Flow mengacu pada keadaan tenggelam sepenuhnya dalam suatu aktivitas, yang ditandai dengan perasaan konsentrasi dan kenikmatan tanpa usaha.\nBagi para desainer game, Empat Kunci untuk membuka emosi dalam gameplay dari saat ke saat (pengalaman internal, tantangan dan strategi, intrik dan rasa ingin tahu, dan pengalaman sosial) menawarkan peluang baru untuk menghasilkan emosi melalui pilihan pemain. Penelitian ini menunjukkan bahwa dengan memahami dan memanfaatkan kunci-kunci ini, desainer game dapat membuat game yang secara efektif melibatkan dan membangkitkan emosi pemain.\nSumber:\nGames, W. W. P. (2004). Four Keys to More Emotion Without Story.\n","permalink":"https://wewnumam.github.io/id/articles/why-do-people-play-games/","summary":"Menurut sebuah penelitian, orang bermain game karena berbagai alasan, termasuk kesempatan untuk merangkai dan membentuk pengalaman internal mereka. Banyak orang dewasa menikmati saat-saat mengisi kepala mereka dengan pikiran dan emosi yang tidak berhubungan dengan pekerjaan atau sekolah, sementara yang lain tertarik pada tantangan dan kesempatan untuk menantang dan menguji kemampuan mereka. Permainan menawarkan rasa efisiensi dan keteraturan yang mungkin kurang dalam kehidupan sehari-hari, dan dapat memberikan rasa kegembiraan dan relaksasi.","title":"Mengapa Orang Bermain Game"},{"content":"Ada banyak cara untuk menghasilkan uang dari game, baik sebagai pengembang yang menjual game buatan sendiri, streamer yang menghibur penonton, atau pemain yang memperdagangkan item dalam game. Dalam artikel ini, kami akan mengeksplorasi lima cara berbeda untuk memonetisasi minat untuk bermain game dan mengubahnya menjadi usaha yang menguntungkan. Mulai dari mengembangkan dan menjual game buatan sendiri hingga menawarkan layanan terkait game, ada banyak peluang untuk menghasilkan uang di industri game.\nNamun, penting untuk diingat bahwa menghasilkan uang dari game bisa menjadi kompetitif dan membutuhkan banyak waktu dan usaha.\nMengembangkan dan menjual game buatan sendiri Ini melibatkan pembuatan game dari awal dan kemudian menjualnya kepada pemain. Untuk menjual game secara online, ada beberapa cara yang bisa dilakukan, yaitu mempublikasikannya melalui toko aplikasi seperti Apple App Store, Google Play Store, Steam, atau Itch.io. Anda bisa juga menawarkan kepada publisher untuk memasarkan game Anda. Untuk mengembangkan game yang sukses, Anda harus memiliki pemahaman yang kuat tentang desain, pemrograman, dan pemasaran game.\nMemonetisasi game gratis Banyak game yang gratis untuk diunduh, walaupun begitu game tersebut tetap dapat menghasilkan uang, yaitu melalui pembelian dalam aplikasi atau transaksi mikro. Ini adalah pembelian kecil yang dapat dilakukan pemain di dalam game untuk membuka konten atau fitur baru. Anda juga dapat memonetisasi game free-to-play dengan menampilkan iklan atau menawarkan layanan berlangganan.\nStreaming gameplay game Jika Anda senang bermain game dan memiliki kepribadian yang menarik, Anda dapat menghasilkan uang dengan streaming gameplay Anda di platform seperti Twitch atau YouTube. Penonton dapat berlangganan saluran Anda, menyumbangkan uang, atau menonton iklan untuk mendukung Anda. Untuk menjadi sukses sebagai streamer game, Anda harus memiliki pemahaman yang kuat tentang game yang Anda mainkan dan dapat menghibur dan melibatkan audiens Anda.\nMenjual item atau mata uang dalam game Beberapa game memungkinkan pemain untuk berdagang atau menjual item atau mata uang dalam game di pasar online seperti eBay atau PlayerAuctions. Item atau mata uang ini bisa berharga bagi pemain lain, dan Anda dapat menghasilkan uang dengan membeli dan menjualnya.\nMenawarkan layanan terkait game Jika Anda memiliki pemahaman yang mendalam tentang game tertentu, Anda dapat menawarkan layanan seperti membuka pelatihan skill terkait game tertentu atau konsultasi kepada klien yang membutuhkan jasa Anda di industri game. Anda dapat membuat dan menjual konten terkait game, seperti panduan atau tutorial. Agar berhasil di bidang ini, Anda harus memiliki pemahaman yang kuat tentang game dan dapat berkomunikasi secara efektif dengan klien Anda.\nKesimpulannya, ada banyak cara untuk menghasilkan uang dari game, baik Anda seorang pengembang, streamer, atau pemain. Mulai dari mengembangkan dan menjual game Anda sendiri hingga menawarkan layanan yang terkait dengan game, ada banyak peluang untuk memonetisasi minat Anda terhadap game.\nNamun, penting untuk diingat bahwa menghasilkan uang dari game bisa menjadi kompetitif dan membutuhkan banyak waktu dan usaha. Penting juga untuk mengikuti ketentuan layanan dan hukum yang berlaku saat memonetisasi game. Jika Anda bersedia berkomitmen dan memiliki rencana yang jelas, Anda dapat mengubah kecintaan Anda pada game menjadi usaha yang menguntungkan.\n","permalink":"https://wewnumam.github.io/id/articles/making-money-from-games/","summary":"Ada banyak cara untuk menghasilkan uang dari game, baik sebagai pengembang yang menjual game buatan sendiri, streamer yang menghibur penonton, atau pemain yang memperdagangkan item dalam game. Dalam artikel ini, kami akan mengeksplorasi lima cara berbeda untuk memonetisasi minat untuk bermain game dan mengubahnya menjadi usaha yang menguntungkan. Mulai dari mengembangkan dan menjual game buatan sendiri hingga menawarkan layanan terkait game, ada banyak peluang untuk menghasilkan uang di industri game.","title":"Menghasilkan Uang dari Game"},{"content":"Menulis pesan commit yang baik adalah praktik penting yang dapat membantu orang lain memahami perubahan yang telah kita buat dan alasannya. Berikut ini beberapa kiat untuk menulis commit message yang lebih baik:\nGunakan baris subjek yang jelas dan deskriptif Baris pertama dari pesan commit harus berupa ringkasan singkat dan padat dari perubahan yang telah kita buat. Jaga agar panjangnya sekitar 50 karakter atau kurang. Ini akan membantu pengembang lain dengan cepat memahami perubahan yang telah kita buat.\n\u0026amp;nbsp\nBuruk:\nUpdate\n\u0026amp;nbsp\nBagus:\nFix typo in README file\nGunakan nada perintah Gunakan gaya bahasa imperatif dalam baris subjek, seolah-olah kita sedang memberikan perintah. Misalnya, Fix bug atau Add feature. Ini membantu membuat pesan commit lebih lugas dan dapat ditindaklanjuti.\n\u0026amp;nbsp\nBuruk:\nAdded feature to search bar\n\u0026amp;nbsp\nBagus:\nAdd feature to search bar\nTambahkan lebih banyak konteks di body Body dari pesan commit harus memberikan informasi yang lebih rinci tentang perubahan yang telah kita buat. Jelaskan mengapa kita membuat perubahan dan bagaimana perubahan itu bermanfaat bagi basis kode. Ini akan membantu pengembang lain memahami alasan di balik perubahan kita.\n\u0026amp;nbsp\nBuruk:\n(No body)\n\u0026amp;nbsp\nBagus:\nI added a feature to the search bar that allows users to search for specific items by keyword. This will make it easier for users to find what they are looking for and should improve the overall user experience.\nJaga agar tetap ringkas Usahakan untuk menjaga pesan commit menjadi sekitar 72 karakter per baris. Ini membuatnya lebih mudah dibaca di baris perintah atau di git client.\n\u0026amp;nbsp\nBuruk:\nI fixed a bug that was causing the application to crash when a user tried to submit a form with an empty field. This was a really annoying bug and it toome a while to track it down, but I finally found it and was able to fix it. I hope this doesn't happen again.\n\u0026amp;nbsp\nBagus:\nFix bug that caused application to crash when submitting form with empty field\nGunakan poin-poin Jika Anda telah membuat beberapa perubahan, gunakan poin-poin untuk mencantumkannya. Hal ini membantu mengatur informasi dan membuatnya lebih mudah dibaca.\n\u0026amp;nbsp\nBuruk:\nI made a bunch of changes to the codebase. I fixed some bugs, added some new features, and refactored some of the code to make it more readable. I also added some tests to make sure everything is working properly.\n\u0026amp;nbsp\nBagus:\n- Fix bug that caused application to crash when submitting form with empty field\n- Add feature to search bar\n- Refactor code for improved readability\n- Add tests to ensure proper functionality\nContoh Lainnya Berikut adalah beberapa contoh pesan commit git yang baik yang menggunakan poin-poin di body untuk menjelaskan perubahan yang dibuat dengan jelas dan ringkas:\n\u0026ldquo;Fix typo in README file\u0026rdquo;\nCorrected spelling error on line 5 \u0026ldquo;Add feature to search bar\u0026rdquo;\nAdded keyword search functionality Improved UI of search bar \u0026ldquo;Refactor code for improved readability\u0026rdquo;\nRenamed variables to be more descriptive Grouped related code into functions Added comments to clarify code logic \u0026ldquo;Improve performance of login page\u0026rdquo;\nOptimized database queries Reduced amount of data transferred between server and client Added caching to improve response time \u0026ldquo;Update dependencies to fix security vulnerabilities\u0026rdquo;\nUpgraded library \u0026ldquo;X\u0026rdquo; to version 2.0 Replaced deprecated function \u0026ldquo;Y\u0026rdquo; with recommended alternative \u0026ldquo;Fix bug that caused application to crash when submitting form with empty field\u0026rdquo;\nIdentified root cause of crash Implemented fix to handle empty field input Added tests to prevent similar issues in the future \u0026ldquo;Add tests to ensure proper functionality\u0026rdquo;\nWrote tests for new features Added coverage for edge cases Improved reliability of existing tests \u0026ldquo;Update documentation to reflect changes in API\u0026rdquo;\nAdded descriptions for new endpoints Updated examples to reflect changes in request and response formats Clarified usage of deprecated functions \u0026ldquo;Rename variables for improved readability\u0026rdquo;\nRenamed variables throughout codebase to be more descriptive Adjusted tests and documentation to reflect renames Improved code clarity and maintainability \u0026ldquo;Refactor code to use new library\u0026rdquo;\nReplaced old library with more feature-rich alternative Adjusted code to use new library\u0026rsquo;s API Improved code performance and reliability Dengan mengikuti tips-tips ini, kita dapat menulis pesan commit yang jelas, ringkas, dan mudah dimengerti. Ini akan membantu pengembang lain untuk lebih mudah meninjau dan memahami kode kita, yang dapat mempercepat review dan deployment kode. Jadi, luangkan waktu untuk membuat pesan commit-mu dengan hati-hati dan kamu akan bisa menulis pesan commit yang lebih baik dalam waktu singkat!\n","permalink":"https://wewnumam.github.io/id/articles/5-tips-for-writing-clear-and-concise-git-commit-messages/","summary":"Menulis pesan commit yang baik adalah praktik penting yang dapat membantu orang lain memahami perubahan yang telah kita buat dan alasannya. Berikut ini beberapa kiat untuk menulis commit message yang lebih baik:\nGunakan baris subjek yang jelas dan deskriptif Baris pertama dari pesan commit harus berupa ringkasan singkat dan padat dari perubahan yang telah kita buat. Jaga agar panjangnya sekitar 50 karakter atau kurang. Ini akan membantu pengembang lain dengan cepat memahami perubahan yang telah kita buat.","title":"5 Tips untuk Menulis Pesan Git Commit yang Jelas dan Ringkas"},{"content":"Clean code adalah kode yang mudah dibaca, dipahami, dan dikelola. Kode bersih mengikuti seperangkat standar dan prinsip pengkodean yang bertujuan untuk membuat kode dapat dimengerti dan dirawat sebaik mungkin.\nClean code penting karena membantu mengurangi waktu dan upaya yang diperlukan untuk memahami dan memodifikasi basis kode, dan membuatnya lebih mudah untuk menambahkan fitur baru atau memperbaiki bug. Ini juga mendukung kolaborasi dan mengurangi risiko memperkenalkan masalah baru saat memodifikasi kode.\nUntuk mencapai kode yang bersih, penting untuk mengikuti praktik terbaik untuk menamai variabel dan function, menggunakan format yang jelas dan konsisten, menjaga function tetap kecil dan terfokus, menghindari kerumitan yang tidak perlu, dan menulis kode yang mendokumentasikan diri sendiri. Penting juga untuk mengikuti standar pengkodean yang telah ditetapkan dan secara konsisten menerapkan prinsip-prinsip ini di seluruh basis kode.\nBerikut adalah lima prinsip penting dari Clean Code, bersama dengan beberapa contoh kode untuk mengilustrasikan setiap prinsip:\nGunakan Nama yang Dapat Dicari Nama yang baik mudah dicari dan memudahkan untuk memahami tujuan kode. Gunakan nama yang deskriptif dan bermakna yang secara akurat mencerminkan tujuan variabel atau function.\nBuruk:\nint computeTotalCost(int quantity, int pricePerItem) { return quantity * pricePerItem + 5; } Dalam contoh ini, biaya tambahan $5 ditambahkan langsung ke perhitungan, tanpa konteks atau penjelasan apa pun. Hal ini membuat lebih sulit untuk memahami tujuan kode dan memodifikasinya jika perlu.\nCara yang lebih baik untuk mengimplementasikan kode ini adalah dengan menggunakan konstanta deskriptif untuk mewakili biaya tambahan:\nBagus:\nint computeTotalCost(int quantity, int pricePerItem) { final int SHIPPING_COST = 5; return quantity * pricePerItem + SHIPPING_COST; } Versi kode ini lebih mudah dipahami dan dimodifikasi, karena tujuan biaya tambahan dijelaskan dengan jelas dengan penggunaan konstanta deskriptif.\nNama Function Harus Berupa Kata Kerja dan Function Harus Melakukan Satu Hal Saja Function harus memiliki nama deskriptif yang mencerminkan tindakan yang mereka lakukan, dan mereka harus melakukan satu hal saja. Function yang melakukan lebih dari satu hal lebih sulit untuk dipahami dan dikelola.\nBuruk:\nint calc(int x, int y) { int z = x + y; int w = x * y; return z - w; } Bagus:\nint add(int x, int y) { return x + y; } int multiply(int x, int y) { return x * y; } int subtract(int x, int y) { return add(x, y) - multiply(x, y); } Tiga atau Lebih Sedikit Argumen dalam Function Function dengan terlalu banyak argumen sulit untuk dipahami dan dikelola. Bertujuan untuk menjaga jumlah argumen dalam function menjadi tiga atau kurang. Jika sebuah function membutuhkan lebih dari tiga argumen, pertimbangkan untuk mem-refactoring kode untuk menggunakan objek atau struktur data untuk meneruskan argumen.\nBuruk:\nvoid printInvoice(int customerId, int invoiceNumber, int itemNumber, int quantity, int pricePerItem, int discountPercent, int taxPercent) { // code to print invoice } Bagus:\nclass Invoice { int customerId; int invoiceNumber; int itemNumber; int quantity; int pricePerItem; int discountPercent; int taxPercent; } void printInvoice(Invoice invoice) { // code to print invoice } Hindari Memberikan Nilai Boolean sebagai Argumen dalam Function Memberikan nilai boolean sebagai argumen ke function dapat membuat kode lebih sulit dipahami, karena tidak langsung jelas apa yang diwakili oleh nilai boolean. Sebaliknya, pertimbangkan untuk menggunakan nama deskriptif untuk argumen atau membuat ulang kode untuk menggunakan function dengan nama yang lebih deskriptif.\nBuruk:\nvoid printMessage(string message, bool isError) { if (isError) { Console.WriteLine(\u0026#34;ERROR: \u0026#34; + message); } else { Console.WriteLine(message); } } Dalam contoh ini, nilai boolean isError dilewatkan sebagai argumen ke function, yang memerlukan pernyataan if tambahan untuk menentukan bagaimana mencetak pesan.\nCara yang lebih baik untuk mengimplementasikan kode ini adalah dengan menggunakan function dengan nama yang lebih deskriptif yang mencerminkan tujuan dari function tersebut:\nBagus:\nvoid printErrorMessage(string message) { Console.WriteLine(\u0026#34;ERROR: \u0026#34; + message); } void printMessage(string message) { Console.WriteLine(message); } Versi kode ini lebih mudah dimengerti, karena tujuan dari function sudah jelas dari namanya, dan tidak perlu pernyataan if tambahan di dalam function.\nHindari Penggunaan Nama Huruf Menggunakan nama huruf tunggal untuk variabel dan function dapat membuat kode sulit dimengerti, karena tidak terlihat jelas apa yang diwakili oleh huruf-huruf tersebut. Sebaliknya, gunakan nama deskriptif yang secara akurat mencerminkan tujuan kode.\nBuruk:\nint[][] data = new int[5][5]; for (int i = 0; i \u0026lt; 5; i++) { for (int j = 0; j \u0026lt; 5; j++) { data[i][j] = i + j; } } Dalam contoh ini, variabel i dan j digunakan sebagai indeks untuk data array multidimensi, tetapi tidak jelas apa yang diwakili oleh huruf-huruf ini.\nCara yang lebih baik untuk mengimplementasikan kode ini adalah dengan menggunakan nama deskriptif untuk indeks:\nBagus:\nint[][] data = new int[5][5]; for (int row = 0; row \u0026lt; 5; row++) { for (int col = 0; col \u0026lt; 5; col++) { data[row][col] = row + col; } } Versi kode ini lebih mudah dimengerti, karena tujuan dari variabel row dan col sudah jelas dari namanya.\nKesimpulannya, clean code adalah kode yang mudah dibaca, dipahami, dan dikelola. Ini mengikuti seperangkat standar dan prinsip pengkodean yang bertujuan untuk membuat kode dapat dibaca dan dirawat sebaik mungkin.\nBeberapa prinsip penting dari kode bersih termasuk menggunakan nama yang bermakna dan deskriptif, menggunakan format yang jelas dan konsisten, menjaga function tetap kecil dan terfokus, menghindari kerumitan yang tidak perlu, dan menulis kode yang mendokumentasikan diri sendiri.\nDengan mengikuti prinsip-prinsip ini, kita dapat membuat kode yang lebih mudah dimengerti dan dimodifikasi, dan yang mendukung kolaborasi dan mengurangi risiko munculnya isu-isu baru ketika memodifikasi kode.\nSumber:\n","permalink":"https://wewnumam.github.io/id/articles/5-tips-for-creating-clean-code/","summary":"Clean code adalah kode yang mudah dibaca, dipahami, dan dikelola. Kode bersih mengikuti seperangkat standar dan prinsip pengkodean yang bertujuan untuk membuat kode dapat dimengerti dan dirawat sebaik mungkin.\nClean code penting karena membantu mengurangi waktu dan upaya yang diperlukan untuk memahami dan memodifikasi basis kode, dan membuatnya lebih mudah untuk menambahkan fitur baru atau memperbaiki bug. Ini juga mendukung kolaborasi dan mengurangi risiko memperkenalkan masalah baru saat memodifikasi kode.","title":"5 Tips untuk Membuat Kode yang Bersih"},{"content":"Sebagai seorang desainer game, penting untuk menyadari jebakan dan kesalahan umum yang dapat menghambat keberhasilan proyek kita. Dengan menghindari kesalahan-kesalahan ini, kita dapat meningkatkan peluang kita untuk menciptakan game yang sukses dan menyenangkan yang akan disukai para pemain. Berikut adalah 10 kesalahan teratas yang harus dihindari oleh desainer game:\nProyek Besar tanpa Portofolio Memulai dengan proyek besar dan ambisius tanpa portofolio game yang lebih kecil dan sudah selesai bisa berisiko. Penting untuk membangun portofolio proyek yang sudah selesai untuk menunjukkan keterampilan dan kemampuan kita sebelum menangani proyek yang lebih besar. Portofolio juga dapat membantu kita menunjukkan kemampuan kita untuk menyelesaikan proyek dan dapat digunakan untuk menarik pendanaan atau mitra untuk proyek yang lebih besar.\nMenyembunyikan Ide Sangat penting untuk membagikan ide game kita dan mendapatkan umpan balik dari orang lain, baik itu melalui playtesting atau mencari masukan dari para profesional. Menyembunyikan ide dapat membatasi potensi peningkatan dan pertumbuhan kita. Berbagi ide dengan orang lain dapat membantu kita mendapatkan umpan balik dan wawasan yang berharga, yang mengarah ke game yang lebih kuat dan lebih sukses.\nTidak Menggunakan Cloud Satu kesalahan yang harus dihindari oleh desainer game adalah tidak menggunakan cloud untuk penyimpanan dan kolaborasi. Penyimpanan lokal bisa menjadi masalah karena kapasitasnya terbatas dan rentan terhadap kehilangan data atau kerusakan karena masalah perangkat keras atau kejadian tak terduga lainnya. Cloud, di sisi lain, menyediakan kapasitas penyimpanan yang hampir tidak terbatas dan lebih dapat dikitalkan dan aman.\nTidak Menyelesaikan Proyek Sangat penting untuk mengerjakan sebuah game sampai selesai daripada meninggalkannya di tengah jalan saat masih di tahap pengembangan. Pemain akan kecewa jika mereka menginvestasikan waktu dan uang ke dalam game yang tidak pernah sepenuhnya selesai. Lebih baik menetapkan tujuan dan prioritas yang realistis dan fokus untuk menyelesaikan sejumlah kecil proyek daripada mengambil terlalu banyak dan meninggalkan proyek yang belum selesai.\nMembuat Game Sendirian Berkolaborasi dengan orang lain dapat membawa perspektif dan ide segar ke meja dan dapat menghasilkan produk akhir yang lebih baik. Penting untuk mempertimbangkan untuk bekerja sama dengan orang lain, baik itu melalui perekrutan karyawan atau bermitra dengan pengembang lain. Bekerja sendiri dapat membatasi kreativitas dan potensi game kita.\nTidak Menyimpan Uang untuk Iklan Pemasaran dan periklanan sangat penting untuk menyebarkan berita tentang game kita dan menarik pemain. Gagal mengalokasikan sumber daya yang cukup untuk upaya ini dapat menghambat kesuksesan game kita. Penting untuk menganggarkan pemasaran dan periklanan sejak awal dan mengalokasikan porsi yang cukup dari anggaran kita untuk upaya ini.\nFokus pada Teknologi Meskipun teknologi merupakan aspek penting dalam pengembangan game, namun hal itu tidak boleh menjadi fokus utama. Penting untuk menyeimbangkan dan memastikan bahwa gameplay dan pengalaman keseluruhan adalah fokus utama. Terlalu fokus pada teknologi dapat menyebabkan game mengesankan dari sudut pandang teknis namun terasa kurang dalam hal gameplay dan kenikmatan.\nKeluar dari Pekerjaan Tanpa Jaminan Desain game bisa menjadi jalur karier yang berisiko dan tidak pasti, dan penting untuk memiliki rencana yang solid sebelum berhenti dari pekerjaan harian kita untuk mengejarnya secara penuh waktu. Ini termasuk memiliki tingkat keamanan dan jaminan keuangan, seperti kontrak atau pendanaan, untuk memastikan bahwa kita dapat mempertahankan diri saat mengerjakan game kita.\nTidak Membuat Prototype Prototype adalah langkah penting dalam proses desain game yang memungkinkan kita untuk menguji dan melaukan iteras terhadap ide-ide kita sebelum menginvestasikan banyak waktu dan sumber daya ke dalam pengembangan. Melewatkan langkah ini dapat menyebabkan kesalahan yang mahal dan produk akhir yang kurang dipoles. Pembuatan prototype juga dapat membantu kita mengidentifikasi dan mengatasi masalah potensial sejak dini, menghemat waktu dan tenaga dalam jangka panjang.\nTidak Ada Perbedaan yang Berarti Salah satu kesalahan umum yang dilakukan desainer game adalah gagal memastikan bahwa game mereka memiliki nilai jual atau diferensial yang unik. Tanpa perbedaan yang berarti, akan sulit untuk menonjol di pasar yang ramai dan menarik pemain. Penting untuk mempertimbangkan dengan cermat apa yang membuat game kita berbeda dan bagaimana kita dapat menggunakannya untuk keuntungan kita.\nMenghindari kesalahan umum ini dapat membantu desainer game menciptakan game yang sukses dan menyenangkan.\nPenting untuk mempertimbangkan dengan cermat nilai jual unik dari game kita, membuat prototype dan menguji ide-ide kita, merencanakan keamanan finansial dan upaya pemasaran, berkolaborasi dengan orang lain, menyelesaikan proyek, memanfaatkan cloud, mencari umpan balik tentang ide-ide kita, dan membangun portofolio proyek yang telah selesai.\nDengan mengikuti praktik-praktik terbaik ini, desainer game dapat meningkatkan peluang keberhasilan mereka dan membuat game yang akan disukai para pemain.\nSumber:\nIntroduction to Game Design Theory by John Haste\n","permalink":"https://wewnumam.github.io/id/articles/top-10-game-designer-mistakes/","summary":"Sebagai seorang desainer game, penting untuk menyadari jebakan dan kesalahan umum yang dapat menghambat keberhasilan proyek kita. Dengan menghindari kesalahan-kesalahan ini, kita dapat meningkatkan peluang kita untuk menciptakan game yang sukses dan menyenangkan yang akan disukai para pemain. Berikut adalah 10 kesalahan teratas yang harus dihindari oleh desainer game:\nProyek Besar tanpa Portofolio Memulai dengan proyek besar dan ambisius tanpa portofolio game yang lebih kecil dan sudah selesai bisa berisiko. Penting untuk membangun portofolio proyek yang sudah selesai untuk menunjukkan keterampilan dan kemampuan kita sebelum menangani proyek yang lebih besar.","title":"Top 10 Kesalahan Game Designer"},{"content":"Game memiliki banyak tujuan yang berbeda dan dapat dinikmati karena berbagai alasan. Beberapa orang bermain game sebagai bentuk hiburan, untuk menghabiskan waktu, atau untuk bersosialisasi dengan teman dan keluarga. Yang lain bermain game untuk menantang diri mereka sendiri atau untuk meningkatkan keterampilan mereka di bidang tertentu. Yang lainnya lagi bermain game sebagai cara untuk bersantai dan menghilangkan stres setelah hari yang panjang.\nTujuan permainan dalam konteks yang berbeda:\nHiburan Game bisa menjadi sumber hiburan, memberikan kenikmatan dan relaksasi bagi para pemainnya. Game bisa menjadi cara yang menyenangkan untuk menghabiskan waktu dan bisa dimainkan sendiri atau bersama orang lain.\nPendidikan Game dapat digunakan sebagai alat untuk pendidikan, membantu pemain mempelajari konsep baru atau mengembangkan keterampilan baru. Hal ini dapat dilakukan melalui game edukasi yang secara khusus dirancang untuk belajar, atau melalui game yang menggabungkan elemen-elemen edukasi dengan cara yang lebih menarik dan interaktif.\nIklan Game dapat digunakan sebagai cara untuk mengiklankan produk atau layanan. Misalnya, sebuah perusahaan dapat membuat game sederhana yang mempromosikan merek atau produk mereka, yang dapat diakses dan dimainkan oleh pemain secara gratis.\nProduktivitas (Gamifikasi) Gamifikasi adalah proses memasukkan elemen seperti permainan ke dalam aktivitas non-game untuk membuatnya lebih menarik dan memotivasi. Ini dapat digunakan untuk meningkatkan produktivitas dan memotivasi orang untuk menyelesaikan tugas atau mencapai tujuan.\nModel Bisnis Game dapat dikembangkan sebagai bisnis, dengan tujuan menghasilkan pendapatan melalui penjualan atau pembelian dalam game. Mereka juga dapat digunakan sebagai cara untuk mempromosikan bisnis atau merek dan gamifikasi sebagai layanan, seperti yang disebutkan di atas. Model bisnis lainnya adalah dengan melisensikan properti intelektual dan mengadakan acara seperti turnamen.\nSeni Game dapat dianggap sebagai bentuk seni, dengan desainer dan pengembang menciptakan dunia yang imersif dan menarik secara visual untuk dijelajahi pemain. Game juga dapat digunakan sebagai media untuk ekspresi artistik, memungkinkan pemain untuk membuat dan berbagi kreasi mereka sendiri.\nSains Game dapat digunakan dalam penelitian ilmiah, seperti dalam studi tentang perilaku atau kognisi manusia. Game juga dapat digunakan untuk mensimulasikan skenario dunia nyata atau menguji hipotesis dalam lingkungan yang terkendali.\nTerapi Game dapat digunakan sebagai bentuk terapi, membantu orang untuk mengatasi stres, kecemasan, atau masalah kesehatan mental lainnya. Permainan ini juga dapat digunakan untuk membantu orang-orang dengan cacat fisik atau cedera untuk meningkatkan fungsi dan mobilitas mereka.\nSecara umum, tujuan permainan adalah untuk memberikan kesenangan dan keterlibatan bagi pemain. Hal ini dapat dicapai melalui kompetisi, pemecahan masalah, eksplorasi, kreativitas, atau kombinasi dari elemen-elemen ini. Game juga dapat melayani tujuan pendidikan, membantu pemain mempelajari konsep baru atau mengembangkan keterampilan baru.\nPada akhirnya, tujuan dari sebuah game tergantung pada masing-masing pemain dan tujuan serta motivasi mereka untuk bermain. Beberapa orang mungkin bermain game hanya untuk bersenang-senang, sementara yang lain mungkin lebih fokus untuk mencapai tujuan tertentu atau meningkatkan kinerja mereka.\nKredit:\nKualitas artikel ditingkatkan oleh ChatGPT (2022).\n","permalink":"https://wewnumam.github.io/id/articles/the-purpose-of-games/","summary":"Game memiliki banyak tujuan yang berbeda dan dapat dinikmati karena berbagai alasan. Beberapa orang bermain game sebagai bentuk hiburan, untuk menghabiskan waktu, atau untuk bersosialisasi dengan teman dan keluarga. Yang lain bermain game untuk menantang diri mereka sendiri atau untuk meningkatkan keterampilan mereka di bidang tertentu. Yang lainnya lagi bermain game sebagai cara untuk bersantai dan menghilangkan stres setelah hari yang panjang.\nTujuan permainan dalam konteks yang berbeda:\nHiburan Game bisa menjadi sumber hiburan, memberikan kenikmatan dan relaksasi bagi para pemainnya.","title":"Tujuan dari Game"},{"content":"Catatan:\nUntuk dapat menggunakan fitur-fitur ini, kita membutuhkan setidaknya C# versi 7 ke atas atau Unity 2018 ke atas.\nTernary Operator Dalam pemrograman komputer, ternary operator adalah merupakan bagian dari sintaks untuk ekspresi kondisional dasar dalam beberapa bahasa pemrograman, biasanya disebut sebagai operator kondisional, ternary if, atau inline if.\nSebuah ekspresi a ? b : c dievaluasi ke b jika nilai a benar, dan sebaliknya ke c. Atau secara singkat: \u0026ldquo;jika a maka b jika tidak maka c\u0026rdquo;.\nEkspresi kondisional menggunakan if:\nif (health \u0026gt; 0) { barColor = Color.red; } else { barColor = Color.black; } Ekspresi kondisional menggunakan ternary operator:\nbarColor = health \u0026gt; 0 ? Color.red : Color.black; String Interpolation Karakter khusus $ mengidentifikasi string literal (string tanpa format) sebagai string interpolasi. String interpolasi adalah string literal yang mungkin berisi ekspresi interpolasi.\nInterpolasi string menyediakan sintaks yang lebih mudah dibaca dan nyaman untuk memformat string.\nstring name = \u0026#34;Groot\u0026#34;; float health = 100; float mana = 50; // operator \u0026#39;+\u0026#39; logMessage = \u0026#34;Unit \u0026#34; + name + \u0026#34;, health: \u0026#34; + health + \u0026#34;, mana: \u0026#34; + mana; // string.Format logMessage = string.Format(\u0026#34;Unit {0}, health: {1}, mana: {2}\u0026#34;, name, health, mana); // string interpolation logMessage = $\u0026#34;Unit {name}, health: {health}, mana: {mana}\u0026#34;; Expression Body Definisi expression body memungkinkan kita menyediakan implementasi property dalam bentuk yang sangat ringkas dan mudah dibaca.\nDefinisi expression body memiliki sintaks umum berikut ini: anggota =\u0026gt; ekspresi;\nProperti normal:\nprivate float health, maxHealth; public float HealthPrencentage { get { return health / maxHealth; } set { health = value * maxHealth; } } Properti expression-body:\nprivate float health, maxHealth; public float HealthPrencentage { get =\u0026gt; health / maxHealth; set =\u0026gt; health = value * maxHealth; } read-only properti expression-body:\npublic float HealthPrencentage =\u0026gt; health / maxHealth; \u0026amp;nbsp\nMethod normal:\npublic float Percentage(float current, float max) { return current / max; } Method expression-body:\npublic float Percentage(float current, float max) =\u0026gt; current / max; Local Function Local functions adalah method-method yang bersarang di dalam method yang lain. Mereka hanya bisa dipanggil dari method yang mengandungnya.\nLocal functions membuat maksud dari kode kita menjadi jelas. Siapa pun yang membaca kode kita dapat melihat bahwa method ini tidak dapat dipanggil kecuali oleh method yang mengandungnya.\nMethod normal:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); } private IEnumerator UpdateHealthBarCoroutine() { yield return null; } Local function:\npublic void UpdateHealthBar() { StartCoroutine(UpdateHealthBarCoroutine()); IEnumerator UpdateHealthBarCoroutine() { yield return null; } } Null Checking Menyederhanakan pola pengkodean umum di mana variabel diberi nilai jika null.\nPengecekan null yang umum:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { if (OnEnemyHit != null) OnEnemyHit.Invoke(other.gameObject); } Operator null checking:\nprivate event Action\u0026lt;GameObject\u0026gt; OnEnemyHit; private void OnTriggerEnter2D(Collider2D other) { OnEnemyHit?.Invoke(other.gameObject); } Null Coalescing Operator null-coalescing ?? mengembalikan nilai dari operasi kiri jika operasi kiri tidak null; jika tidak, operator ini mengevaluasi operasi kanan dan mengembalikan hasilnya. Operator ?? tidak mengevaluasi bagian kanan operasi kanannya jika operasi kiri bernilai non-null.\npublic class GameManager : MonoBehaviour { private Player player; // using null comparison public Player GetPlayer() { if (player == null) return new Player(\u0026#34;Groot\u0026#34;); else return player; } // using null coalescing operator public Player GetPlayer() { return player ?? new Player(\u0026#34;Groot\u0026#34;); } } nameof Keyword Ekspresi nameof menghasilkan nama variabel, tipe, atau member sebagai konstanta string. Ekspresi nameof dievaluasi pada waktu kompilasi dan tidak berpengaruh pada waktu berjalan.\npublic class Enemy { public string name; public flaot health; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.name}, health: {enemy.health}\u0026#34;); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;{nameof(Enemy.name)}: {enemy.name}, {nameof(Enemy.health)}: {enemy.health}\u0026#34;); Dalam situasi tertentu ketika kita ingin mengubah nama variabel, kita tidak perlu mengubah string yang kita buat secara manual.\npublic class Enemy { public string id; public flaot hp; } Enemy enemy = new Enemy(\u0026#34;Groot\u0026#34;, 100); // will print -\u0026gt; name: Groot, health: 100 Debug.Log($\u0026#34;name: {enemy.id}, health: {enemy.hp}\u0026#34;); // will print -\u0026gt; id: Groot, hp: 100 Debug.Log($\u0026#34;{nameof(Enemy.id)}: {enemy.id}, {nameof(Enemy.hp)}: {enemy.hp}\u0026#34;); Source:\n","permalink":"https://wewnumam.github.io/id/articles/syntatic-sugars-csharp-hidden-features/","summary":"Catatan:\nUntuk dapat menggunakan fitur-fitur ini, kita membutuhkan setidaknya C# versi 7 ke atas atau Unity 2018 ke atas.\nTernary Operator Dalam pemrograman komputer, ternary operator adalah merupakan bagian dari sintaks untuk ekspresi kondisional dasar dalam beberapa bahasa pemrograman, biasanya disebut sebagai operator kondisional, ternary if, atau inline if.\nSebuah ekspresi a ? b : c dievaluasi ke b jika nilai a benar, dan sebaliknya ke c. Atau secara singkat: \u0026ldquo;jika a maka b jika tidak maka c\u0026rdquo;.","title":"Syntatic Sugars | Fitur Tersembunyi C#"},{"content":"Pikirkanlah Setiap Potongan Gambar Saat menonton video, kita hanya bisa melihat ke arah kamera membidik. Kalau kamera melihat hal yang sama terlalu lama atau tidak melihat sesuatu yang ingin penonton lihat, penonton akan bosan.\nPertandingan olahraga di TV biasa diliput dengan belasan hingga puluhan kamera yang berbeda—setiap beberapa detik pindah ke gambar yang berbeda. Dan setiap gambar berfokus pada informasi yang baru. Setiap gambar memiliki arti, dan pemotongan antar gambar tersebut memberikan banyak informasi tanpa membuat penonton bosan.\nSetiap kali membidikkan kamera, pikirkanlah, siapa yang akan kita bidik? Apa yang sedang mereka lakukan? Apakah itu menarik? Jika tidak, potong saja dan carilah sesuatu yang lain untuk direkam.\nJangan menyalakan kamera secara nonstop. Sekalipun kita akan mengeditnya, tapi ini adalah kebiasaan buruk yang hanya akan membuang-buang waktu, karena kita harus menonton puluhan potongan video yang tak berguna dan tak bisa dipakai.\nRekam Ketika Bagian Putih Mata Subjek Terlihat Orang-orang mengkomunikasikan setengah dari apa yang mereka ungkapkan dari mulut mereka dan setengah lainnya dengan mata mereka. Jika kita melewatkan matanya, kita akan melewatkan setengah dari pesannya.\nPola-pola halus pada wajah membentuk setengah komunikasi antarmanusia.\nVideo kita langsung jadi 200 persen lebih baik jika kita tetap berada dekat dengan subjek untuk menangkap dengan jelas bagian putih mata mereka.\nSelalu Ambil Gambar dengan Durasi di Bawah 10 Detik Potongan-potongan gambar yang pendek adalah bagian dari bahasa film modern.\nGabungan video yang pendek yang berbeda memiliki lebih banyak informasi dan perasaan, dibandingkan jika videonya merekam secara terus-menerus.\nMenge-zoom dengan Kaki 10x zoom = 10x lebih bergoyang.\nGunakanlah alat-alat perekaman yang membantu kita mengatasi kamera goyang karena tangan kita. Untuk mencegah kamera goyang, kita bisa memasangkan tripod atau stabilizer—atau memanfaatkan bidang datar di sekitar lokasi.\nUntuk mendapatkan close-up yang bagus, atur lensa kamera sampai mentok di sudut lebar (alias tidak di-zoom sama sekali). Berjalanlah secara fisik untuk mendekati subjek, kemudian ambillah gambar.\nHal yang perlu diingat mengenai zoom digital:\nJangan. Jangan pernah enggunakannya.\nJangan Bergerak! Jangan Goyang! Dan Jangan Menge-zoom Selama Pengambilan Gambar! Perlakukan kamera video seperti kamera foto.\nBidikkan lensa. Jauhkan jari kita dari tombol zoom. Lihat ke layar LCD untuk memastikan gambarnya bagus. Dan, tekan start.\nBerhentilah setelah mendapatkan gambar, dan ulangi. Ritme yang kita ikuti adalah Pindah, Bidik, Rekam, Berhenti.\nAturlah Agar Cahaya Datang dari Arah Belakang Kamera Kamera akan bingung saat dia harus berurusan dengan beberapa tingkat pencahayaan berbeda dalam pengambilan gambar yang sama.\nSebagian besar kamera video akan mengekspos objek yang paling besar dan paling terang di dalam frame.\nJika cahaya berada di depan kamera, maka latar belakang subjek akan selalu lebih terang. Subjek yang kita rekam akan jadi gelap.\nJika sumber cahaya tetap berada di belakang kamera, cahayanya akan jatuh menerpa subjek. Mereka akan menjadi bagian yang terang di dalam frame. Dan kita akan bisa melihatnya.\nNonaktifkan Efek Digital Kamera Kalau kita mengambil video yang bagus dan bersih, kita bisa selalu menambahkan efek-efek yang kita inginkan nanti, menggunakan salah satu dari banyak program pengeditan komputer yang dirancang untuk hal itu.\nTapi kalau kita langsung merekam video dengan aplikasi efek bawaan kamera, kita tidak akan pernah bisa menghilangkannya. Video kita terjebak dengan efek itu selamanya.\nBerfokuslah Pada Hal yang Benar-benar Menarik Setiap video akan jadi lebih baik saat kita mengaplikasikan prinsip yang terorganisasi, dan prinsip apa pun itu, hampir tak masalah.\nBidik konsentrasi wajah subjek, apa yang dilakukanya, reaksi penonton, apa yang penonton lihat, dan bagaimana suasana lokasi.\nCarilah sesuatu untuk difokuskan—seseorang atau sudut yang menarik—dan video kita akan langsung jadi lebih menarik.\nJangan Menggunakan Teks yang Amatir Jangan pakai teks, kecuali itu memang benar-benar penting.\nBerikut beberapa tips yang penting untuk diterapkan jika hendak menggunakan teks:\nBuatlah teksnya pendek dan kata-katanya sederhana. Gunakan font yang sederhana dan mudah dibaca (font kategori sans-serif).\nJangan biarkan teks mengganggu bagian penting dalam gambar dan pastikan teksnya tetap mudah dibaca.\nTaruhlah di atas atau di sepertiga bawah layar.\nGunakan huruf berwarna putih di atas latar belakang hitam atau hitam di atas warna terang—jangan tambahkan shadow, outline, underline, motion, maupun glow.\nJangan menggunakan penulisan secara vertikal.\nKalau latar belakang gambar kita setengah-terang sehingga teks sulit dibaca dengan warna teks hitam maupun putih, taruhlah kotak persegi panjang sederhana di belakang teks.\nTampilkan teks pada layar sekitar satu-ketuk lebih panjang dari waktu yang kita butuhkan untuk membacanya dengan lantang.\nSeperti segala sesuatu di dalam video, usahakan teks tetap sederhana tapi elegan.\nBuatlah Video yang Singkat Apa pun yang pantas yang pantas diucapkan di dalam video, sepantasnya diucapkan dengan singkat.\nIklan TV menceritakan kisah yang lengkap, menghibur kita, dan menjual kepada kita—semuanya dalam 30 detik.\nCara terbaik untuk membuat video kita jadi lebih pendek adalah dengan meniatkannya untuk menjadi pendek sejak awal.\nKalau kita ragu, potong saja.\nGunakanlah mikrofon eksternal Sebagian besar kamera video mengatur tingkat suaranya sendiri. Itu berarti mereka mengambil apa pun yang mereka dengar dan memperkerasnya ke tingkat yang konstan dan bisa di dengar.\nSayangnya, jika kamera mendengar suara berisik di sekitarnya, mereka juga akan memperkerasnya. Bunyi berisik lalu lintas, sirine, dan suara kerumunan—semuanya diperkeras.\nKalau kita berada sedekat mungkin dengan subjek, masalahnya akan lebih sedikit.\nUntuk membuatnya tak ada masalah sama sekali gunakan mic clip on yang bagus. Jepitkan ujung mic ke baju subjek, dan masalah suara ini pun akan berakhir.\nSumber: Stockman, S. (2011). How to Shoot Video That Doesn’t Suck: Advice to Make Any Amateur Look Like a Pro. Workman Publishing.\n","permalink":"https://wewnumam.github.io/id/articles/12-easy-ways-to-make-videos-significantly-better/","summary":"Pikirkanlah Setiap Potongan Gambar Saat menonton video, kita hanya bisa melihat ke arah kamera membidik. Kalau kamera melihat hal yang sama terlalu lama atau tidak melihat sesuatu yang ingin penonton lihat, penonton akan bosan.\nPertandingan olahraga di TV biasa diliput dengan belasan hingga puluhan kamera yang berbeda—setiap beberapa detik pindah ke gambar yang berbeda. Dan setiap gambar berfokus pada informasi yang baru. Setiap gambar memiliki arti, dan pemotongan antar gambar tersebut memberikan banyak informasi tanpa membuat penonton bosan.","title":"12 Cara Mudah untuk Membuat Video Menjadi Lebih Baik Secara Signifikan"},{"content":"Halaman Pembuka Pada cover halaman berisi informasi diantaranya:\nJudul. Judul berupa tulisan “Game Design Document” diperlukan untuk memberi nama dokumen sehingga secara sekilas orang dapat menyiratkan apa yang dimaksud dalam dokumen tersebut. Judul Game. Berupa lampiran nama game baik dalam bentuk logo atau bentuk apapun yang dapat dibaca. Genre dan Mode Permainan. Berisi keterangan mengenai genre dan mode permainan—seperti mode online atau offline, dan mode single-player atau multi-player—yang akan dipakai. Pemangku Kepentingan. Berupa lampiran logo kelompok, organisasi, dan/atau institusi yang menaungi proyek game ini. Hak Cipta, Alamat, dan Kontak. Berisi keterangan hak cipta, tahun produksi, nama organisasi yang bertanggung jawab, alamat tempat kerja, dan alamat email yang dapat dihubungi. Kemudian pada halaman berikutnya berisi daftar isi dokumen beserta nomor halamannya.\nLatar Belakang Latar belakang berisi uraian permasalahan yang terjadi dan alasan game desainer membuat game ini. Latar belakang terdiri dari tiga paragraf atau lebih.\nParagraf pertama berisi uraian secara umum tentang masalah atau fenomena yang diangkat. Kemudian paragraf selanjutnya berisi penjelasan khusus tentang permasalahan yang masih terkait dengan uraian paragraf pertama. Paragraf terakhir berisi alasan mengapa game ini perlu dibuat berdasarkan permasalahan yang ada.\nRumusan Ide Penciptaan (Rumusan Masalah) Rumusan masalah berisi daftar pertanyaan yang akan diuraikan dalam penjelasan desain. Secara umum, daftar pertanyaan tersebut menanyakan apakah bagian-bagian atau konten dalam desain game nanti dinilai mampu memecahkan masalah yang diangkat.\nTujuan dan Manfaat Tujuan berisi pernyataan mengenai alasan game designer membuat game ini. Umumnya menyimpulkan solusi dari masalah yang diangkat, atau secara singkat menawarkan game ini sebagai solusi dari masalah tersebut.\nManfaat berisi harapan game designer kepada pemain setelah memainkan game yang dibuat. Umumnya menjelaskan dampak atau perubahan yang ingin dibuat dengan adanya game ini.\nPlatform yang Digunakan Bagian ini menjabarkan perangkat yang akan digunakan untuk memainkan game ini. Secara umum, bagian ini mendeskripsikan spesifikasi perangkat keras maupun lunak yang perlu dimiliki pemain.\nKebutuhan Bagian ini menjelaskan kebutuhan produksi untuk membuat game ini. Umumnya berisi daftar perangkat yang akan dipakai dalam produksi seperti spesifikasi perangkat keras dan aplikasi yang digunakan.\nReferensi Game Referensi game berisi sumber acuan atau rujukan dari game lain atau proyek lain.\nReferensi ini dikategorikan berdasarkan konten yang ada dari game rujukan. Misal: referensi cerita, referensi gameplay, referensi mekanik, referensi desain karakter, referensi user interface, referensi font, referensi environment, referensi animasi, dll.\nPenjelasan yang sertai gambar dan tautan akan sangat membantu tim memahami maksud yang diinginkan.\nProses Perancangan Game Bagian ini berisi daftar perincian dan penjelasan segala aspek dalam produksi, antara lain:\nTimeline Produksi. Berisi urutan tindakan atau kegiatan yang akan dilakukan selama produksi, disusun berdasarkan jadwal yang ditentukan, dan dikategorikan berdasarkan tanggung jawab masing-masing anggota tim. Genre. Menguraikan perincian tentang jenis atau tipe game dan tema yang dimiliki game ini. Disertai juga alasan mengapa game designer mengangkat genre ini. Alur Cerita. Menceritakan latar belakang dari kejadian yang dialami tokoh sebelum terjadinya konflik dalam game ini. Secara umum berisi pengenalan tokoh dan lingkungannya serta tantangan yang perlu dijawab dalam game. Gameplay. Menjelaskan aspek taktis dari game, seperti plotnya dan cara memainkannya. Secara umum berisi perincian pola yang ditentukan melalui aturan permainan, hubungan antara pemain dan permainan, tantangan dan mengatasinya, plot dan koneksi pemain dengannya. Mekanik. Menjelaskan komponen sistem yang merespon permainan terhadap gerakan atau tindakan pemain. Umumnya diuraikan dalam bentuk tabel atau diagram. Bagian ini harus mampu menjelaskan maksud mekanik berdasarkan nama/jenis mekanik, objek yang berinteraksi, kondisi aktif, input pemain, dan keterangan lain. Desain Level. Desain level juga dikenal sebagai desain lingkungan atau pemetaan game. Desain level mencakup sketsa desain konseptual level. Umumnya berisi lampiran tata letak objek dalam peta game beserta keterangan event yang akan dipicu dari tindakan pemain. Antarmuka Pengguna (UI). User interface meliputi desain halaman dan elemen UI, tata letak ruang, penggunaan tipografi, pemilihan warna, dan pemilihan gaya atau tema. Elemen UI meliputi kontrol input (button, text field, checkbox), komponen navigasi (gamepad, slider, breadcrumb), komponen informasi (icon, message box, progress bar), dan container (pembungkus komponen UI). Desain Karakter. Berisi lampiran karakter beserta keterangan keseluruhan unsur yang dipakai. Desain karakter harus melampirkan karakter dalam berbagai dimensi, kondisi, dan ekspresi. Aset Game. Berisi daftar keterangan dan lampiran aset-aset visual atau objek-objek yang dipakai dalam game. Engine. Berisi penjelasan teknis terkait environment atau konfigurasi dalam game engine. Umumnya berisi deskripsi konfigurasi yang dicustom, daftar modul yang dipakai, metode dan kerangka kerja dipakai, dan penjelasan teknis lain yang berisi arahan untuk game programmer. Desain Suara. Berisi daftar musik latar (BGM) dan efek suara (SFX) beserta keterangan—jenis, tipe, atau tema—dan kondisinya dalam game. Nilai Jual. Mengacu pada manfaat unik dari game ini yang memungkinkannya menonjol dari pesaing. Secara umum menjelaskan klaim eksplisit tentang keunikan yang melibatkan atribut dalam game dan dapat diverifikasi secara objektif dan memiliki manfaat kegunaan. Credit Title Bagian ini berisi daftar nama anggota tim beserta tugasnya dalam proyek ini. Secara umum masing-masing bertanggung jawab atas satu bidang mencakup art, tech, atau design.\n","permalink":"https://wewnumam.github.io/id/articles/game-design-document-format-for-academic-purposes/","summary":"Halaman Pembuka Pada cover halaman berisi informasi diantaranya:\nJudul. Judul berupa tulisan “Game Design Document” diperlukan untuk memberi nama dokumen sehingga secara sekilas orang dapat menyiratkan apa yang dimaksud dalam dokumen tersebut. Judul Game. Berupa lampiran nama game baik dalam bentuk logo atau bentuk apapun yang dapat dibaca. Genre dan Mode Permainan. Berisi keterangan mengenai genre dan mode permainan—seperti mode online atau offline, dan mode single-player atau multi-player—yang akan dipakai. Pemangku Kepentingan.","title":"Format Game Design Document untuk Keperluan Akademik"},{"content":"Nama Variabel yang Bermakna Memilih nama yang baik membutuhkan waktu tetapi menghemat lebih banyak daripada yang dibutuhkan.\nNama yang Mengungkapkan Niat Nama harus menjawab semua pertanyaan besar. Nama harus memberitahu kita mengapa variabel itu ada, apa yang dilakukannya, dan bagaimana penggunaannya. Jika nama tersebut membutuhkan komentar, maka nama tersebut tidak mengungkapkan maksudnya.\nlet d; // waktu yang berlalu dalam hari Kita harus memilih nama yang menentukan apa yang sedang diukur dan unit pengukuran itu:\nlet elapsedTimeInDays; let daysSinceCreation; let daysSinceModification; let fileAgeInDays; Contoh kode yang sulit dimengerti karena menggunakan nama yang buruk:\nfunction getThem() { let list1 = []; for (let x in theList) if (x[0] == 4) list1.add(x); return list1; } Masalahnya bukan pada kesederhanaan kodenya, tetapi penyederhanaan kodenya. Kode tersebut tidak memberitahukan benda apa saja yang ada di dalam theList dan apa nilai dari 4. Hanya dengan memberikan nama-nama konseptual, kita dapat memperbaiki kode secara signifikan:\nfunction getFlaggedCells() { let flaggedCells = []; for (let cell in gameBoard) { if (cell[STATUS_VALUE] == FLAGGED) flaggedCells.add(cell); } return flaggedCells; } atau secara fungsional:\nfunction getFlaggedCells(gameBoard) { return gameBoard.filter(cell =\u0026gt; cell[STATUS_VALUE] === FLAGGED) } Contoh Nama Variabel yang Baik dan Buruk\nTujuan Variabel Nama Baik Nama Buruk Jumlah total pemeriksaan yang ditulis hingga saat ini runningTotal, checkTotal written, ct, checks, CHKTTL, x, x1, x2 Kecepatan peluru velocity, trainVelocity, velocityMph velt, v, tv, train,x, x1, x2 Tanggal saat ini currentDate, todaysDate cd, current, c, x, x1, x2, date Baris per halaman linesPerPage lpp, lines, l, x, x1, x2 Panjang Nama Optimum\nTerlalu panjang Pendek Tepat numberOfPeopleOnTheUsOlympicTeam n, np, ntm numTeamMembers, teamMemberCount numberOfSeatsInTheStadium n, ns, nsisd numSeatsInStadium, seatCount maximumNumberOfPointsInModernOlympics m, mp, max, points maxTeamPoints, maxPoints Perbedaan yang Bermakna Karena kita tidak dapat menggunakan nama yang sama untuk merujuk ke dua hal yang berbeda dalam lingkup yang sama, kita mungkin tergoda untuk mengubah satu nama secara sembarangan. Tidak cukup hanya dengan menambahkan deret angka atau kata-kata mengganggu (mubazir), walaupun compiler atau interpreter sudah puas.\nfunction copyChars(a1, a2) { for (let i = 0; i \u0026lt; a1.length; i++) { a2[i] = a1[i]; } } Jika nama harus berbeda, maka mereka juga harus berarti sesuatu yang berbeda. Deret angka {a1, a2, ... aN} adalah kebalikan dari penamaan yang disengaja. Nama-nama seperti itu tidak disinformatif (mereka noninformatif); mereka tidak memberikan petunjuk tentang maksud penulis. Pertimbangkan:\nfunction copyChars(source, target) { for (let i = 0; i \u0026lt; source.length; i++) { target[i] = source[i]; } } Gunakan lawan kata secara tepat. Menggunakan konvensi penamaan untuk lawan kata membantu konsistensi, dimana hal ini membantu keterbacaan.\nKebalikan Umum dalam Nama Variabel\nbegin/end first/last locked/unlocked min/max next/previous old/new opened/closed visible/invisible source/target up/down Nama yang Dapat Diucapkan Jika kita tidak dapat mengucapkannya, kita tidak dapat mendiskusikannya tanpa terdengar seperti orang bodoh. Hal ini penting karena pemrograman adalah aktivitas sosial. Bandingkan:\n// ymdhms (date, year, month, day, hour) let genymdhms; let modymdhms; let pszqint = \u0026#34;102\u0026#34;; menjadi\nlet generationTimestamp; let modificationTimestamp; let recordId = \u0026#34;102\u0026#34;; Nama yang dapat dicari Nama dengan huruf tunggal dan konstanta numerik memiliki masalah khusus karena tidak mudah ditemukan di seluruh badan teks. Nama huruf tunggal HANYA dapat digunakan sebagai variabel lokal di dalam metode pendek. Panjang nama harus sesuai dengan ukuran ruang lingkupnya. Jika sebuah variabel atau konstanta mungkin terlihat atau digunakan di banyak tempat dalam sebuah badan kode, sangat penting untuk memberikan nama yang mudah dicari. Bandingkan:\nfor (let j = 0; j \u0026lt; 34; j++) { s += (t[j] * 4) / 5; } menjadi\nlet realDaysPerIdealDay = 4; const WORK_DAYS_PER_WEEK = 5; let sum = 0; for (let j = 0; j \u0026lt; NUMBER_OF_TASK; j++) { let realTaskDays = taskEstimate[j] * realDaysPerIdealDay; let realTaskWeeks = realTaskDays / WORK_DAYS_PER_WEEK; sum += realTaskWeeks; } Penamaan Jenis Data Tertentu Penamaan Indeks Loop\nNama i, j, dan k adalah nama-nama variabel loop sederhana yang lazim:\nfor (let i = firstItem; i \u0026lt; lastItem; i++) { data[i] = 0; } Jika sebuah variabel akan digunakan di luar perulangan, variabel tersebut harus diberi nama yang lebih bermakna daripada i, j, k. Misalnya, jika kita membaca record dari file dan perlu mengingat berapa banyak record yang telah kita baca, nama yang lebih bermakna seperti recordCount akan sesuai:\nlet recordCount = 0 while (moreScore()) { score[recordCount] = getNextScore(); recordCount++; } Satu alasan umum mengapa loop berkembang adalah karena mereka bersarang. Jika kita memiliki beberapa loop bersarang, berikan nama yang lebih panjang untuk variabel teratas untuk meningkatkan keterbacaan.\nfor (teamIndex = 0; teamIndex \u0026lt; teamCount; teamIndex++) { for (eventIndex = 0; eventIndex \u0026lt; eventCount[teamIndex]; eventIndex++) { score[teamIndex][eventIndex] = 0; } } Nama-nama yang dipilih dengan hati-hati untuk variabel indeks-lingkaran menghindari masalah umum dari cross-talk indeks. Cara paling sederhana untuk menghindari masalah tersebut adalah dengan memikirkan nama-nama yang lebih deskriptif daripada i, j, k. score[teamIndex][eventIndex] lebih informatif daripada score[i][j]\nPenamaan Variabel Status Variabel status menggambarkan keadaan program kita. Lebih baik menganggap flag sebagai variabel status. Flag harus diberi nilai dan nilainya harus diuji dengan tipe enumerasi, konstanta, atau variabel global yang bertindak sebagai konstanta. Berikut adalah beberapa contoh flag dengan nama yang buruk:\nif (flag) ... if (statusFlag == 0x0F) ... if (printFlag == 16) ... if (computeFlag == 0) ... flag = 0x1; statusFlag = 0x80; printFlag = 16 computeFlag = 0; Berikut adalah contoh kode serupa yang lebih jelas:\nif (dataReady) ... if (charType \u0026amp; PRINTABLE_CHAR) ... if (reportType == reportTypeEnum.annual) ... if (recalcNeeded == true) ... dataReady = true; charType = CONTROL_CHARACTER; reportType = reportTypeEnum.annual recalcNeeded = false; Penamaan Variabel Sementara\nVariabel sementara digunakan untuk menampung hasil antara dari perhitungan, sebagai placeholder sementara, dan untuk menampung nilai housekeeping. Mereka biasanya disebut temp, x, atau nama lain yang tidak jelas dan tidak deskriptif. Secara umum, variabel sementara adalah tanda bahwa programmer belum sepenuhnya memahami masalah. Selain itu, karena variabel-variabel tersebut secara resmi diberi status temporary, programmer cenderung memperlakukan mereka lebih santai daripada variabel lain. Hal ini meningkatkan kemungkinan terjadinya kesalahan.\nlet temp = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + temp) / (2 * a); root[1] = (-b - temp) / (2 * a); Nama temp tidak memberitahukan apapun tentang apa yang dilakukan oleh variabel tersebut. Pendekatan yang lebih baik ditunjukkan dalam contoh ini:\nlet disciminant = Math.sqrt(b^2 - 4*a*c); root[0] = (-b + disciminant) / (2 * a); root[1] = (-b - disciminant) / (2 * a); Penamaan Variabel Boolean\nNama-nama variabel boolean yang berguna:\ndone error found success Berikan nama variabel boolean yang menyiratkan true atau false\nNama-nama seperti done dan success adalah nama boolean yang tepat karena statusnya adalah true atau false. Nama-nama seperti status dan sourceFile, di sisi lain, adalah nama-nama boolean yang buruk karena mereka tidak jelas true atau false.\nUntuk hasil yang lebih baik, ganti status dengan nama seperti error atau statusOK, dan ganti sourceFile dengan sourceFileAvailable atau sourceFileFound, atau apapun yang diwakili oleh variabel tersebut.\nBeberapa programmer suka meletakkan Is di depan nama boolean mereka. Kemudian nama variabel menjadi pertanyaan: isDone? isError? isFound? isProcessingComplete? Menjawab pertanyaan dengan true atau false akan memberikan nilai variabel.\nGunakan nama variabel boolean positif\nNama-nama negatif seperti notFound, notDone, dan notSuccessful sulit dibaca ketika mereka dinegasikan.\nPenamaan Tipe Enumerasi\nconst daysEnum = Object.freeze({ monday: 0, tuesday: 1, wednesday: 2, thursday: 3, friday: 4, saturday: 5, sunday: 6 }); Mengambil satu langkah lebih jauh, seseorang dapat mengekstrak logika ke dalam fungsi dengan jumlah argumen yang bervariasi dan menghasilkan objek yang dibekukan. Hanya ada sedikit manfaat dari teknik ini, jadi alternatif yang lebih baik adalah membuat kelas sederhana. Lagipula, enum lebih umum dalam bahasa pemrograman berorientasi objek, jadi ini terdengar sangat cocok.\nPenamaan Konstanta Ketika menamai konstanta, beri nama entitas abstrak yang diwakili oleh konstanta tersebut daripada angka yang dirujuk oleh konstanta tersebut. FIVE adalah nama yang buruk untuk konstanta. FIVE = 6 akan menjadi konyol. CYCLES_NEEDED adalah nama yang baik. Dengan cara yang sama, BAKERS_DOZEN juga merupakan nama konstanta yang buruk; DONUT_MAX adalah nama konstanta yang baik.\nMasalah Umum dalam Menggunakan Variabel Disinformasi Programmer harus menghindari meninggalkan petunjuk palsu yang mengaburkan arti kode. Kita harus menghindari kata-kata yang maknanya berbeda dari makna yang kita maksudkan. Singkatan bisa menjadi disinformatif.\nJangan merujuk pada pengelompokan akun sebagai accountList kecuali jika itu adalah List. Kata daftar berarti sesuatu yang spesifik untuk programmer. Jika wadah yang menampung akun-akun tersebut bukan sebuah List, hal ini dapat menyebabkan kesimpulan yang salah. Jadi accountGroup atau hanya accounts akan lebih baik.\nContoh yang benar-benar parah dari nama yang tidak informatif adalah penggunaan huruf kecil L dan huruf besar O sebagai nama variabel, terutama dalam kombinasi. Masalahnya, tentu saja, adalah bahwa mereka terlihat hampir seluruhnya seperti konstanta satu dan nol, masing-masing.\nlet a = l; if (O == l) a = O1; else l = 01; Orientasi-Masalah\nNama mnemonik nama yang baik umumnya berbicara tentang masalah daripada solusi. Nama yang baik adalah apa lebih dari bagaimana. Secara umum, jika sebuah nama mengacu pada beberapa aspek komputasi daripada masalah, itu adalah bagaimana daripada apa. Hindari nama seperti itu dan pilihlah nama yang mengacu pada masalah itu sendiri.\nSebuah catatan data karyawan bisa disebut inputRec atau employeeData. inputRec adalah istilah komputer yang mengacu pada ide komputasi - input dan record. employeeData mengacu pada domain masalah daripada dunia komputasi. Demikian pula, untuk bidang bit yang menunjukkan status printer, bitFlag adalah nama yang lebih komputeris daripada printerReady. Dalam aplikasi akuntansi, calcVal lebih komputeris.\nPengkodean Kita sudah cukup banyak encoding untuk ditangani tanpa menambah beban kita. Pengkodean tipe atau informasi ruang lingkup ke dalam nama-nama hanya menambah beban ekstra untuk menguraikannya. Ini adalah beban mental yang tidak perlu ketika mencoba untuk memecahkan masalah. Nama-nama yang dikodekan jarang diucapkan dan mudah salah ketik. Sistem pengkodean akan menyesatkan pembaca.\nSaran Hindari nama atau singkatan yang menyesatkan Hindari nama-nama dengan arti yang mirip Hindari variabel dengan arti yang berbeda tetapi nama yang mirip Hindari angka dalam nama Hindari kata-kata yang salah eja dalam nama Jangan membedakan nama variabel hanya dengan kapitalisasi Hindari beberapa bahasa alamiah Hindari nama-nama tipe standar, variabel, dan rutinitas Jangan gunakan nama yang tidak berhubungan dengan apa yang diwakili oleh variabel tersebut Hindari nama yang mengandung karakter yang sulit dibaca Konvensi Penamaan Mengapa Perlu Ada Konvensi?\nKonvensi memungkinkan kita mengambil lebih banyak hal untuk diberikan. Dengan membuat satu keputusan global daripada banyak keputusan lokal, kita dapat berkonsentrasi pada karakteristik kode yang lebih penting. Konvensi membantu kita mentransfer pengetahuan lintas proyek. Kesamaan nama memberi kita pemahaman yang lebih mudah dan lebih percaya diri tentang apa yang seharusnya dilakukan oleh variabel yang tidak dikenal. Mereka membantu kita belajar kode lebih cepat pada proyek baru. Mereka mengurangi proliferasi nama. Tanpa konvensi penamaan, kita dapat dengan mudah menyebut hal yang sama dengan dua nama yang berbeda. Sebagai contoh, kita mungkin menyebut total poin dengan pointTotal dan totalPoints. Konvensi ini mengkompensasi kelemahan bahasa. Konvensi dapat membedakan antara data lokal, kelas, dan global. Mereka menekankan hubungan di antara item-item yang terkait. Kapan Kita Harus Memiliki Konvensi Penamaan?\nKetika beberapa programmer sedang mengerjakan sebuah proyek Ketika kita berencana untuk menyerahkan program kepada programmer lain untuk modifikasi dan pemeliharaan Ketika program kita ditinjau oleh programmer lain dalam organisasi kita Ketika program kita begitu besar sehingga kita tidak dapat menyimpan semuanya di otak kita sekaligus dan harus memikirkannya secara terpisah-pisah Ketika program kita akan berumur cukup panjang sehingga kita mungkin mengesampingkannya selama beberapa minggu atau bulan sebelum mengerjakannya lagi Ketika kita memiliki banyak istilah yang tidak biasa yang umum pada suatu proyek dan ingin memiliki istilah atau singkatan standar untuk digunakan dalam pengkodean Kita selalu mendapat manfaat dari memiliki semacam konvensi penamaan. Pertimbangan-pertimbangan di atas akan membantu kita menentukan sejauh mana konvensi yang akan digunakan pada proyek tertentu.\nPertimbangan yang paling penting dalam penamaan variabel adalah bahwa nama tersebut sepenuhnya dan secara akurat menggambarkan entitas yang diwakili oleh variabel tersebut.\nNama variabel yang baik adalah elemen kunci dari keterbacaan program.\nDaftar Pustaka: Martin, R. C. (2009). Clean code: a handbook of agile software craftsmanship. Pearson Education. McConnell, S. (2004). Code complete. Pearson Education. Terima kasih kepada Julien Dephix, Ben Sinclair, dan penasihat lainnya yang telah membantu memperbaiki artikel ini.\n","permalink":"https://wewnumam.github.io/id/articles/the-power-of-variable-names/","summary":"Nama Variabel yang Bermakna Memilih nama yang baik membutuhkan waktu tetapi menghemat lebih banyak daripada yang dibutuhkan.\nNama yang Mengungkapkan Niat Nama harus menjawab semua pertanyaan besar. Nama harus memberitahu kita mengapa variabel itu ada, apa yang dilakukannya, dan bagaimana penggunaannya. Jika nama tersebut membutuhkan komentar, maka nama tersebut tidak mengungkapkan maksudnya.\nlet d; // waktu yang berlalu dalam hari Kita harus memilih nama yang menentukan apa yang sedang diukur dan unit pengukuran itu:","title":"Dahsyatnya Fungsi Nama Variabel"},{"content":"Kenapa sebuah game bisa dikatakan game?\nJawabannya adalah karena game memenuhi kunci-kunci kualitas sebuah game.\nSetidaknya, terdapat 10 kunci kualitas penting dalam sebuah permainan, menurut Jesse Schell dalam bukunya The Art of Game Design.\nGame dimainkan secara sukarela (volunteer) Tidak ada paksaan dalam bermain game. Artinya, pemain memiliki kendali untuk bebas mengikuti permainan dan keluar dari permainan.\nGame memiliki tujuan (goals) Sebuah game harus memiliki misi yang ditawarkan kepada pemain. Misi ini ditujukan untuk memberikan pemain tujuan bermain.\nDi sisi lain terdapat juga tujuan pribadi dari pemain, seperti rasa ingin tahu, pengakuan sosial, mengasah kemampuan, dan bentuk motivasi lainnya.\nOleh karena itu, kita sebagai desainer perlu memfasilitasi tujuan-tujuan pribadi dari pemain. Bentuk fasilitas tersebut dapat berupa puzzle, skor, level, item khusus, dsb.\nGame memiliki konflik (conflict) Ukuran sebuah kekuatan dinilai dari konflik yang bisa atasi oleh pemain dalam game. Ukuran inilah yang membedakan seorang pemain bisa dikatakan pemula atau ahli. Konflik bisa datang dari eksternal maupun internal.\nBentuk dari konflik bisa berupa batasan-batasan yang didesain dalam game. Seperti musuh atau obstacle yang menghalangi tujuan pemain, atau kekurangan yang harus dibawa dan dihadapi oleh pemain.\nGame memiliki aturan (rules) Aturan adalah salah satu aspek yang mendefinisikan sebuah game. Aturan membentuk dunia yang diciptakan dalam game. Aturan membantu pemain untuk berpikir, belajar, dan menciptakan strategi, menemukan langkah mereka sendiri untuk mencapai tujuan.\nGame memiliki kondisi menang dan kalah (circumstance) Keadaan menang atau kalah merupakan bentuk umpan balik atau hasil dari usaha pemain. Hal ini ditujukan untuk menilai kemampuan yang ditunjukkan oleh pemain dalam game. Kondisi ini digunakan untuk menciptakan efek realita dalam game.\nGame itu interaktif (interactive) Entitas-entitas dalam game berinteraksi satu sama lain dan saling memberikan feedback. Mulai dari interaksi antar objek dalam game, hingga pemain yang berinteraksi melalui controller.\nDalam sebuah game, setiap objek memiliki relasi satu sama lain dan memiliki perilaku yang berbeda-beda ketika berinteraksi. Efek sebab-akibat inilah yang ingin dijelajahi oleh pemain, sebuah pengalaman yang diinginkan dan dicari oleh pemain.\nGame memiliki tantangan (challenge) Tantangan merupakan tahap lanjut dari konflik. Konflik-konflik yang ada disusun untuk menggugah tekad pemain dalam mencapai tujuan permainan.\nSebuah game yang buruk memiliki terlalu sedikit tantangan atau terlalu banyak tantangan. Keseimbangan menjadi perhatian utama dalam mengukur dan mendesain tatangan. Desainer perlu merancang permainan yang tidak membosankan sekaligus tidak membuat pemain kewalahan.\nGame menciptakan nilai internalnya sendiri (value) Segala sesuatu yang ada di dalam game memiliki nilai yang berharga bagi pemain. Nliai ini diciptakan dari dalam game dan bernilai atau berguna dalam realitas game tersebut. Seperti poin, koin, pangkat, dan apapun yang diinginkan seorang pemain maupun banyak pemain lain.\nGame mengikutsertakan pemain (motivation) Sebuah game secara mental harus mampu memicu keketerlibatan pemain untuk bermain.\nMotivasi datang dari banyak aspek dalam game tapi setidaknya ada dua aspek penting yang menciptakan motivasi pemain. Pertama, pemain didorong oleh keingintahuan (curiosity). Kemudian diikuti dengan keinginan pemain untuk menunjukkan dan meningkatkan kemampuan (skill).\nMotivasi dari aspek lain dapat dianalisis berdasarkan demografi dan psikografi pemain.\nGame adalah sistem formal dan tertutup (constraint) Sederhanya, game perlu memiliki batasan dan definisi yang jelas agar sebuah game memiliki nilai dan bentuk yang dapat dipahami. Ini ditujukan untuk mengatur keseimbangan dalam game dan menjaga rasa (feel) dalam permainan.\nInformasi seperti simbol, tanda, peta, pesan, feedback, dan model konseptual lainnya menekankan batasan yang membantu menjaga keseimbangan dan bentuk permainan.\nPrinsip paling umum yang dipakai dalam konteks bentuk dan keseimbangan adalah membuat game yang easy to learn but difficult to master (mudah dipelajari namun sulit dikuasai).\nKunci-kunci kualitas di atas mendefinisikan arti dari sebuah game.\nGunakanlah kunci-kunci kualitas tersebut sebagai bahan pertimbangan dalam mendesain game dan sebagai checklist untuk playtesting.\nKesimpulan Game merupakan pengalaman sukarela yang mengandung setidaknya elemen: tujuan, interaksi, hambatan, dan aturan.\nSumber:\nSchell, J. (2008). The Art of Game Design: A book of lenses. CRC press.\n","permalink":"https://wewnumam.github.io/id/articles/10-key-quality-of-games/","summary":"Kenapa sebuah game bisa dikatakan game?\nJawabannya adalah karena game memenuhi kunci-kunci kualitas sebuah game.\nSetidaknya, terdapat 10 kunci kualitas penting dalam sebuah permainan, menurut Jesse Schell dalam bukunya The Art of Game Design.\nGame dimainkan secara sukarela (volunteer) Tidak ada paksaan dalam bermain game. Artinya, pemain memiliki kendali untuk bebas mengikuti permainan dan keluar dari permainan.\nGame memiliki tujuan (goals) Sebuah game harus memiliki misi yang ditawarkan kepada pemain. Misi ini ditujukan untuk memberikan pemain tujuan bermain.","title":"Syarat Dasar Sebuah Game"},{"content":" 🛠 Kemampuan Perancangan board game dan video game. Desain grafis: Logo. Media cetak: board game, poster, cover buku, kartu nama, packaging. Social media kit. Digital painting. Pengarah produksi video. Editor video. 🕓 Pengalaman Freelance Graphic Designer 🗓️ 2019 - SEKARANG\nMendesain poster, cover buku, desain packaging, dan social media kit. Mengikuti kontes desain logo di sribu.com. Tools yang dipakai: Inkscape, GIMP. Hasil yang di dapat: Orang-orang menyukai desain minimalis yang saya buat. Desain minimalis dinilai memberikan kesan elegan dan modern. Pesan yang dikemas dengan gaya minimalis lebih mudah ditangkap oleh audiens. Fiverr - Logo Designer 🗓️ APRIL 2020 - SEPTEMBER 2021\nMendesain logo minimalis untuk klien personal dan perusahaan rintisan. Melayani perbaikan desain logo sesuai permintaan klien. Tools yang dipakai: Inkscape. Selagi projek berjalan, saya memberi saran dan informasi mengenai prinsip-prinsip desain kepada klien, agar desain yang dipakai dapat menyesuaikan kebutuhan dan tujuan pemakaiannya. Hasil yang di dapat: Saya mendapatkan feedback positif dan ulasan bintang 5 dari seluruh klien. 📚 Pendidikan STMM MMTC Yogyakarta (Teknologi Permainan) 🗓️ 2021 - SEKARANG\nDesain board game print \u0026amp; play di itch.io. Membangun project studi kasus: Desain board game kelompok: buku panduan, kartu, dan token. Desain karakter bermuatan lokal: Kebo Bule, Domba Priangan, Kodok Darah. Maskot prodi Teknologi Permainan. Cover buku cerita bergambar. SMKN 2 Surakarta (Rekayasa Perangkat Lunak) 🗓️ 2018 - 2021\nProject studi kasus: Mendesain kartu nama. Pengarah dan editor video tutorial memasak bakmie toprak. Pengarah dan editor video materi statistika sub-materi median. Pengarah produksi dan editor video profil pembina pramuka SMKN 2 Surakarta. Hasil yang didapat: Video rancangan saya membantu menghantarkan pembina pramuka SMKN 2 Surakarta menjadi pembina berprestasi tingkat Prov. Jawa Tengah Th. 2020. 🔍 Lebih Lanjut icon platform deskripsi LinkedIn Profil LinkedIn saya. Fiverr Layanan desain logo saya. Dribbble Kumpulan logo buatan saya. ArtStation Kumpulan karya seni buatan saya. Sarbini Damai Channel youtube yang saya desain dan operasikan. Ahmad Adillaumam Channel youtube pribadi yang kelola secara penuh. 💬 Kontak ✉️ Ngemplak, Boyolali, Jawa Tengah, Indonesia 57375 ✉️ Gamping, Sleman, Daerah Istimewa Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/id/ahmad-adillaumam-designer-resume/","summary":"🛠 Kemampuan Perancangan board game dan video game. Desain grafis: Logo. Media cetak: board game, poster, cover buku, kartu nama, packaging. Social media kit. Digital painting. Pengarah produksi video. Editor video. 🕓 Pengalaman Freelance Graphic Designer 🗓️ 2019 - SEKARANG\nMendesain poster, cover buku, desain packaging, dan social media kit. Mengikuti kontes desain logo di sribu.com. Tools yang dipakai: Inkscape, GIMP. Hasil yang di dapat: Orang-orang menyukai desain minimalis yang saya buat.","title":"Ahmad Adillaumam - Designer Resume"},{"content":" 🛠 Kemampuan Pengembangan video game: Perancangan video game. Pemrograman game (Unity \u0026amp; HTML5). Pengembangan web: Front-End (HTML, CSS, Javascript) Back-End (Codeigniter, Laravel, NodeJS, Django) Database (MySQL, PostgreSQL). CMS (Wordpress, Hugo). Pemodelan perangkat lunak: Perancangan database. Perancangan dan dokumentasi API. Desain UI. Manajemen: Pengelolaan source code. Dokumentasi program. Manajemen project. 🕓 Pengalaman LKS Web Technology Prov. Jawa Tengah 🗓️ MARET 2021\nSpeed test, membangun fitur-fitur web: CSS (responsive layout) Javascript (rgb color slider) PHP (captcha) Melakukan kustomisasi Wordpress themes menggunakan CSS. Membangun sistem pemungutan suara menggunakan Laravel. Video rekam layar proses lomba di sini.\nLKS Web Design Kota Surakarta 🗓️ JANUARI 2021\nMembangun blog. Dibangun menggunakan HTML, CSS, Javascript, Laravel, dan MySQL. Pendefinisian skema data didokumentasikan menggunakan fitur migration Laravel. Hal ini memudahkan saya untuk mempresentasikan source code saya. 📚 Pendidikan STMM MMTC Yogyakarta (Teknologi Permainan) 🗓️ 2021 - SEKARANG\nHIMA Gametech Divisi Research \u0026amp; Development: Membangun landing page website organisasi. Menyusun roadmap dan sumber belajar game developer. Membangun project studi kasus: Kumpulan project game kuliah. Sistem pemungutan suara. SMKN 2 Surakarta (Rekayasa Perangkat Lunak) 🗓️ 2018 - 2021\nMembangun project studi kasus: Sistem presensi menggunakan kode QR. Sistem informasi rumah sakit. Layanan informasi Covid-19. Layanan perpustakaan digital. 🔍 Lebih Lanjut icon platform deskripsi LinkedIn Profil LinkedIn saya. Github Repository source code dan aktivitas project saya. Itch.io Kumpulan game buatan saya. YouTube Konten saya terkait pengembangan perangkat lunak dan game. 💬 Kontak ✉️ Ngemplak, Boyolali, Jawa Tengah, Indonesia 57375 ✉️ Gamping, Sleman, Daerah Istimewa Yogyakarta, Indonesia 55284 📧 wvwnumam@gmail.com 📱 (+62) 897-6633-000 ","permalink":"https://wewnumam.github.io/id/ahmad-adillaumam-software-developer-resume/","summary":"🛠 Kemampuan Pengembangan video game: Perancangan video game. Pemrograman game (Unity \u0026amp; HTML5). Pengembangan web: Front-End (HTML, CSS, Javascript) Back-End (Codeigniter, Laravel, NodeJS, Django) Database (MySQL, PostgreSQL). CMS (Wordpress, Hugo). Pemodelan perangkat lunak: Perancangan database. Perancangan dan dokumentasi API. Desain UI. Manajemen: Pengelolaan source code. Dokumentasi program. Manajemen project. 🕓 Pengalaman LKS Web Technology Prov. Jawa Tengah 🗓️ MARET 2021\nSpeed test, membangun fitur-fitur web: CSS (responsive layout) Javascript (rgb color slider) PHP (captcha) Melakukan kustomisasi Wordpress themes menggunakan CSS.","title":"Ahmad Adillaumam - Software Developer Resume"},{"content":" 📚 Pecinta filosofi.\n🧑‍💻 Memiliki dedikasi dalam pengembangan perangkat lunak.\n🏷 Berkarya melalui konten dan desain.\n💻 Orang-orang datang ke saya untuk mendapatkan bantuan terkait teknologi.\n\u0026hellip;\nMasih mencari tahu irisannya.\nKunjungi Linktree saya untuk mengenal saya lebih lanjut!\nStop kutipan glorifikasi. Sadari saja apa yang kita inginkan butuhkan. ✌️\n","permalink":"https://wewnumam.github.io/id/about/","summary":"📚 Pecinta filosofi.\n🧑‍💻 Memiliki dedikasi dalam pengembangan perangkat lunak.\n🏷 Berkarya melalui konten dan desain.\n💻 Orang-orang datang ke saya untuk mendapatkan bantuan terkait teknologi.\n\u0026hellip;\nMasih mencari tahu irisannya.\nKunjungi Linktree saya untuk mengenal saya lebih lanjut!\nStop kutipan glorifikasi. Sadari saja apa yang kita inginkan butuhkan. ✌️","title":"Tentang Saya"}]